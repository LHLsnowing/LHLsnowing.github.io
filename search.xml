<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JPA</title>
      <link href="/2023/07/13/java/jpa/"/>
      <url>/2023/07/13/java/jpa/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/07/13/java/jpa/0-0.png"></p><h2 id="一、SpringData"><a href="#一、SpringData" class="headerlink" title="一、SpringData"></a>一、SpringData</h2><p><img src="/2023/07/13/java/jpa/1-1-0.png" alt="概览"></p><ul><li>SpringData致力于为数据访问层，(DAO)提供统一的基于Spring的编程模版<br>对于每一种持久性存储，都需要为其搞一套CRUD（创建-读取-更新-删除），SpringData提供了一个通用的接口和模版</li></ul><p>总结：简化开发-统一</p><p><img src="/2023/07/13/java/jpa/1-1.png" alt="主要特性"></p><h2 id="二、SpringData-JPA"><a href="#二、SpringData-JPA" class="headerlink" title="二、SpringData JPA"></a>二、SpringData JPA</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li><p>JPA全称 Java Persistence API(2019年重命名成 Jakarta …) ,是一种ORM规范<br>表和实体的一个映射</p></li><li><p><strong>相同处</strong></p></li></ul><ol><li>JPA是JDBC的升级版</li><li>JDBC和JPA都是一种规范</li><li>都是SUN推出的</li></ol><ul><li><strong>不同处</strong></li></ul><ol><li>JDBC是由各个关系型数据实现的，JPA是有ORM框架实现的</li><li>JDBC使用 SQL语句和数据库通信，JPA用面向对象方式，通过ORM框架来生成SQL，进行操作</li><li>JPA在JDBC之上的，JPA也要以来JDBC才能操作数据库</li></ol><p><img src="/2023/07/13/java/jpa/2-1.png"><br>简单理解就是以面向对象的方式去和数据库交流，不需要面向sql</p><h3 id="2-规范提供"><a href="#2-规范提供" class="headerlink" title="2.规范提供"></a>2.规范提供</h3><blockquote><p><strong>ORM映射元数据</strong>：JPA支持<strong>XML</strong>和<strong>注解</strong>两种元数据方式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中。<br>eg：<code>@Entity</code>、<code>@Table</code>、<code>@Id</code>与<code>@Column</code>等注解<br><strong>JPA的API</strong>：用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的事情，开发者从琐碎的JDBC和SQL代码中解脱出来。<br>eg: <code>entityManager.merge(T t);</code><br><strong>JPQL查询语言</strong>：通过面向对象而非面向数据的查询语言查询数据，避免程序的SQL语句紧密耦合。<br>eg: <code>from Student s where s.name=?</code>   Student- 类名</p></blockquote><h3 id="3-Hibernate与JPA"><a href="#3-Hibernate与JPA" class="headerlink" title="3.Hibernate与JPA"></a>3.Hibernate与JPA</h3><p>待更…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JPA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语学习</title>
      <link href="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/"/>
      <url>/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Bp4y1D747?p=2&amp;vd_source=27965c9221f395745c5958a4e2b71636">资料来源B站</a></p><h2 id="一、日语五十音"><a href="#一、日语五十音" class="headerlink" title="一、日语五十音"></a>一、日语五十音</h2><ul><li>emm,有的日语对应有汉字可以打出汉字 ，无汉字对应直接拼出来 eg：ファイオ　</li><li>主要あ行 列会读<br><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-0.png" alt="基础50音"></li></ul><h3 id="1-Ka行"><a href="#1-Ka行" class="headerlink" title="1.Ka行"></a>1.Ka行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-1.png" alt="Ka行"></p><h3 id="2-Sa行"><a href="#2-Sa行" class="headerlink" title="2.Sa行"></a>2.Sa行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-2.png" alt="Ka行"></p><h3 id="3-Ta行"><a href="#3-Ta行" class="headerlink" title="3.Ta行"></a>3.Ta行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-3.png" alt="Ka行"></p><h3 id="4-Na行"><a href="#4-Na行" class="headerlink" title="4.Na行"></a>4.Na行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-4.png" alt="Ka行"></p><h3 id="5-Ha行"><a href="#5-Ha行" class="headerlink" title="5.Ha行"></a>5.Ha行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-5.png" alt="Ha行"></p><h3 id="6-Ma行"><a href="#6-Ma行" class="headerlink" title="6.Ma行"></a>6.Ma行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-6.png" alt="Ma行"></p><h3 id="7-Ya行"><a href="#7-Ya行" class="headerlink" title="7.Ya行"></a>7.Ya行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-7.png" alt="Ya行"></p><h3 id="8-Ra行"><a href="#8-Ra行" class="headerlink" title="8.Ra行"></a>8.Ra行</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-8.png" alt="Ra行"></p><h3 id="9-Wa行"><a href="#9-Wa行" class="headerlink" title="9.Wa行"></a>9.Wa行</h3><p>这行最后一个为助词出现<br><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-9.png" alt="Wa行"></p><h3 id="10-n"><a href="#10-n" class="headerlink" title="10.n"></a>10.n</h3><p><img src="/2023/07/12/gong-ju-ji-he-ji-bao-cuo/ri-yu/1-10.png" alt="n"></p>]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源整合 </tag>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2023/07/04/java/redis/"/>
      <url>/2023/07/04/java/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、NoSQL"><a href="#一、NoSQL" class="headerlink" title="一、NoSQL"></a>一、NoSQL</h2><ul><li>NoSQL仅仅是一个概念，泛指非关系型的数据库</li><li>区别于关系数据库，它们不保证关系数据的ACID特性</li><li>常见的NoSQL数据库有：**<code>Redis</code>、<code>MemCache</code>、<code>MongoDB</code>**等</li></ul><h2 id="二、NoSQL与SQL区别"><a href="#二、NoSQL与SQL区别" class="headerlink" title="二、NoSQL与SQL区别"></a>二、NoSQL与SQL区别</h2><p><img src="/2023/07/04/java/redis/2-1.png" alt="NoSQL与SQL差异"></p><h2 id="三、认识Redis"><a href="#三、认识Redis" class="headerlink" title="三、认识Redis"></a>三、认识Redis</h2><blockquote><p>Redis的特征：</p><blockquote><p>键值（key-value）型，value支持多种不同数据结构，功能丰富<br>单线程，每个命令具备原子性<br>低延迟，速度快（基于内存、IO多路复用、良好的编码）。<br>支持数据持久化<br>支持主从集群、分片集群<br>支持多语言客户端</p></blockquote></blockquote><h2 id="四、Redis数据结构"><a href="#四、Redis数据结构" class="headerlink" title="四、Redis数据结构"></a>四、Redis数据结构</h2><blockquote><p>Redis是一个key-value的数据库，key是String，不过value的类型多种多样</p></blockquote><p><img src="/2023/07/04/java/redis/4-1.png" alt="Redis数据结构"></p><h2 id="五、Redis常见命令"><a href="#五、Redis常见命令" class="headerlink" title="五、Redis常见命令"></a>五、Redis常见命令</h2><h3 id="1-通用命令"><a href="#1-通用命令" class="headerlink" title="1.通用命令"></a>1.通用命令</h3><p>通用指令是部分数据类型的，都可以使用的指令，常见如下</p><blockquote><p>指令描述<br><strong>KEYS:</strong>查看符合模板的所有key，不建议在生产环境设备上使用<br><strong>DEL :</strong>   删除一个指定的key<br><strong>EXISTS:</strong>判断key是否存在<br><strong>EXPIRE:</strong>给一个key设置有效期，有效期到期时该key会被自动删除<br><strong>TTL  :</strong>  查看一个KEY的剩余有效期</p></blockquote><p>可以通过<code>help [command]</code> 可以查看一个命令的具体用法！</p><h3 id="2-String类型"><a href="#2-String类型" class="headerlink" title="2.String类型"></a>2.String类型</h3><ul><li><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p></li><li><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：<br><strong>1.string：</strong>普通字符串<br><strong>2.int：</strong>整数类型，可以做自增、自减操作<br><strong>3.float：</strong>浮点类型，可以做自增、自减操作<br>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><blockquote><p>KEY VALUE<br>msghello world<br>num10<br>score92.5</p></blockquote></li></ul><p><strong>String的常见命令</strong>有如下表格所示:<br><img src="/2023/07/04/java/redis/5-2-1.png"></p><blockquote><p>Redis的key允许有多个单词形成层级结构，多个单词之间用” ：“隔开，格式如下：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">项目名:业务名:类型:id <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。<br>例如:我们的项目名称叫 coderlhl，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li>user相关的key：coderlhl:user:1</li><li>product相关的key：coderlhl:product:1<br>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储:<blockquote><p>KEY            VALUE<br>coderlhl:user:1{“id”:1, “name”: “Jack”, “age”: 21}<br>coderlhl:product:1{“id”:1, “name”: “小米11”, “price”: 4999}</p></blockquote></li></ul><h3 id="3-Hash类型"><a href="#3-Hash类型" class="headerlink" title="3.Hash类型"></a>3.Hash类型</h3><ul><li><strong>Hash类型，也叫散列，其value是一个无序字典</strong>，类似于Java中的HashMap结构。</li><li>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</li><li><strong>Hash的常见命令有：</strong><blockquote><p>命令描述<br>HSET key field value添加或者修改hash类型key的field的值<br>HGET key field获取一个hash类型key的field的值<br>HMSEThmset 和 hset 效果相同 ，4.0之后hmset可以弃用了<br>HMGET批量获取多个hash类型key的field的值<br>HGETALL获取一个hash类型的key中的所有的field和value<br>HKEYS获取一个hash类型的key中的所有的field<br>HVALS获取一个hash类型的key中的所有的value<br>HINCRBY让一个hash类型key的字段值自增并指定步长<br>HSETNX添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></blockquote></li></ul><h3 id="4-List类型"><a href="#4-List类型" class="headerlink" title="4.List类型"></a>4.List类型</h3><blockquote><p><strong>Redis中的List类型与Java中的LinkedList类似</strong>，可以看做是一个<strong>双向链表结构</strong>。既可以支持正向检索和也可以支持反向检索。<br>特征也与LinkedList类似：</p><blockquote><p>有序<br>元素可以重复<br>插入和删除快<br>查询速度一般</p></blockquote></blockquote><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.</p><ul><li><strong>List的常见命令</strong><blockquote><p>命令描述<br>LPUSH key element …向列表左侧插入一个或多个元素<br>LPOP key移除并返回列表左侧的第一个元素，没有则返回nil<br>RPUSH key element …向列表右侧插入一个或多个元素<br>RPOP key移除并返回列表右侧的第一个元素<br>LRANGE key star end返回一段角标范围内的所有元素<br>BLPOP和BRPOP与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</p></blockquote></li></ul><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/new.gif"></p><p>有意思的问题</p><ul><li>如何利用List结构模拟一个栈?<br>先进后出，入口和出口在同一边</li><li>如何利用List结构模拟一个队列?<br>先进先出，入口和出口在不同边</li><li>如何利用List结构模拟一个阻塞队列?<br>入口和出口在不同边<br>出队时采用BLPOP或BRPOP</li></ul><h3 id="5-Set类型"><a href="#5-Set类型" class="headerlink" title="5.Set类型"></a>5.Set类型</h3><ul><li><strong>Redis的Set结构与Java中的HashSet类似</strong>，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征</li><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><p><strong>Set的常见命令有：</strong></p><blockquote><p>命令描述<br>SADD key member …向set中添加一个或多个元素<br>SREM key member …移除set中的指定元素<br>SCARD key返回set中元素的个数<br>SISMEMBER key member判断一个元素是否存在于set中<br>SMEMBERS获取set中的所有元素<br>SINTER key1 key2 …求key1与key2的交集<br>SDIFF key1 key2 …求key1与key2的差集<br>SUNION key1 key2 …求key1和key2的并集</p></blockquote><p>交集、差集、并集图示<br><img src="/2023/07/04/java/redis/5-5-1.png"></p><h3 id="6-SortedSet类型"><a href="#6-SortedSet类型" class="headerlink" title="6.SortedSet类型"></a>6.SortedSet类型</h3><ul><li>Redis的<strong>SortedSet是一个可排序的set集合</strong>，与<strong>Java中的TreeSet有些类似</strong>，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以<strong>基于score属性对元素排序</strong>，底层的实现是一个跳表（SkipList）加 hash表。</li></ul><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快<br>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</li></ul><p><strong>SortedSet的常见命令有:</strong></p><blockquote><p>命令描述<br><strong>ZADD key score member</strong>添加一个或多个元素到sorted set ，如果已经存在则更新其score值<br><strong>ZREM key member</strong>删除sorted set中的一个指定元素<br><strong>ZSCORE key member</strong>获取sorted set中的指定元素的score值<br><strong>ZRANK key member</strong>获取sorted set 中的指定元素的排名<br><strong>ZCARD key</strong>获取sorted set中的元素个数<br><strong>ZCOUNT key min max</strong>统计score值在给定范围内的所有元素的个数<br><strong>ZINCRBY key increment member</strong>让sorted set中的指定元素自增，步长为指定的increment值<br><strong>ZRANGE key min max</strong>按照score排序后，获取指定排名范围内的元素<br><strong>ZRANGEBYSCORE key min max</strong>按照score排序后，获取指定score范围内的元素<br><strong>ZDIFF、ZINTER、ZUNION</strong>求差集、交集、并集<br>注意：所有的排名默认都是<strong>升序</strong>，如果要降序则在命令的Z后面<strong>添加REV</strong>即可</p></blockquote><h2 id="六、Redis客户端"><a href="#六、Redis客户端" class="headerlink" title="六、Redis客户端"></a>六、Redis客户端</h2><h3 id="1-命令行客户端"><a href="#1-命令行客户端" class="headerlink" title="1.命令行客户端"></a>1.命令行客户端</h3><ul><li>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>commonds<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 132537</code>：指定redis的访问密码<br>其中的<code>commonds</code>就是Redis的操作命令，例如：</li></ul><p><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></p><h3 id="2-图形化桌面客户端"><a href="#2-图形化桌面客户端" class="headerlink" title="2.图形化桌面客户端"></a>2.图形化桌面客户端</h3><p><a href="https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234">https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234</a><br>下载地址</p><p>编程客户端</p><h3 id="3-Jedis快速入门"><a href="#3-Jedis快速入门" class="headerlink" title="3.Jedis快速入门"></a>3.Jedis快速入门</h3><ul><li><p>新建一个Maven工程并引入以下依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入Jedis依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--引入单元测试依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试类并与Redis建立连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span><span class="token annotation punctuation">@BeforeEach</span> <span class="token comment">//被该注解修饰的方法每次执行其他方法前自动执行</span><span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 1. 获取连接</span>    jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.230.88"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 设置密码</span>    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"132537"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 选择库（默认是下标为0的库）</span>    jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个操作数据的方法（这里以操作String类型为例）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 1.往redis中存放一条String类型的数据并获取返回结果</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"https://www.oz6.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.从redis中获取一条数据</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url = "</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后不要忘记编写一个释放资源的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterEach</span> <span class="token comment">//被该注解修饰的方法会在每次执行其他方法后执行</span><span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 1.释放资源</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行<code>testString()</code>方法后测试结果如图所示<br><img src="/2023/07/04/java/redis/6-3.png"></p></li></ul><h3 id="4-Jedis连接池"><a href="#4-Jedis连接池" class="headerlink" title="4.Jedis连接池"></a>4.Jedis连接池</h3><ul><li>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">//配置连接池</span>        <span class="token class-name">JedisPoolConfig</span> jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建连接池对象</span>        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span><span class="token string">"192.168.230.88"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">"132537"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-SpringDataRedis介绍"><a href="#5-SpringDataRedis介绍" class="headerlink" title="5.SpringDataRedis介绍"></a>5.SpringDataRedis介绍</h3><blockquote><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis<br>官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p></blockquote><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><blockquote><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：<br><img src="/2023/07/04/java/redis/6-5.png" alt="API操作"></p></blockquote><h3 id="6-SpringDataRedis快速入门"><a href="#6-SpringDataRedis快速入门" class="headerlink" title="6.SpringDataRedis快速入门"></a>6.SpringDataRedis快速入门</h3><blockquote><p><code>SpringBoot</code>已经提供了对<code>SpringDataRedis</code>的支持，使用非常简单</p></blockquote><ul><li><p>1.首先新建一个Spring Boot工程<br><img src="/2023/07/04/java/redis/6-6.png" alt="建立过程"></p></li><li><p>2.然后引入连接池依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--连接池依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.编写配置文件application.yml（连接池的配置在实际开发中是根据需求来的）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 192.168.230.88 <span class="token comment">#指定redis所在的host</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>  <span class="token comment">#指定redis的端口</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span>  <span class="token comment">#设置redis密码</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment">#最大连接数</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span> <span class="token comment">#最大空闲数</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment">#最小空闲数</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 100ms <span class="token comment">#连接等待时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>4.编写测试类执行测试方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RedisDemoApplicationTests</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1.通过RedisTemplate获取操作String类型的ValueOperations对象</span><span class="token class-name">ValueOperations</span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.插入一条数据</span>ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"blogName"</span><span class="token punctuation">,</span><span class="token string">"Vz-Blog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.获取数据</span><span class="token class-name">String</span> blogName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"blogName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"blogName = "</span> <span class="token operator">+</span> blogName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="7-RedisSerializer配置"><a href="#7-RedisSerializer配置" class="headerlink" title="7.RedisSerializer配置"></a>7.RedisSerializer配置</h3><ul><li>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的<br><img src="/2023/07/04/java/redis/6-7.png"></li></ul><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><blockquote><p>那么如何解决以上的问题呢？我们可以通过自定义<code>RedisTemplate</code>序列化的方式来解决。</p></blockquote><ul><li><p>编写一个配置类<code>RedisConfig</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 1.创建RedisTemplate对象</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.设置连接工厂</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.创建序列化对象</span>        <span class="token class-name">StringRedisSerializer</span> stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> genericJackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.设置key和hashKey采用String的序列化方式</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5.设置value和hashValue采用json的序列化方式</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>此时我们已经将RedisTemplate的key设置为<code>String</code>序列化，value设置为<code>Json</code>序列化的方式，再来执行方法测试<br><img src="/2023/07/04/java/redis/6-7-2.png"></p></li><li><p>由于我们设置的value序列化方式是Json的，因此我们可以直接向redis中插入一个对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user:100"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user:100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/07/04/java/redis/6-7-3.png"></p></li></ul><p>尽管Json序列化可以满足我们的需求，但是依旧存在一些问题。</p><p>如上图所示，为了在反序列化时知道对象的类型，<code>JSON</code>序列化器会将类的<code>class</code>类型写入<code>json</code>结果中，存入<code>Redis</code>，会带来额外的内存开销。</p><p>那么我们如何解决这个问题呢？我们可以通过下文的<code>StringRedisTemplate</code>来解决这个问题。</p><h3 id="8-StringRedisTemplate"><a href="#8-StringRedisTemplate" class="headerlink" title="8.StringRedisTemplate"></a>8.StringRedisTemplate</h3><blockquote><p>为了<strong>节省内存空间</strong>，我们并<strong>不会使用JSON序列化器来处理value</strong>，而是<strong>统一使用String序列化器</strong>，要求<strong>只能存储String类型的key和value</strong>。当需要存储Java对象时，手动完成对象的序列化和反序列化。<br><img src="/2023/07/04/java/redis/6-8.png"><br>Spring默认提供了一个<code>StringRedisTemplate</code>类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</p></blockquote><ul><li>我们可以直接编写一个测试类使用StringRedisTemplate来执行以下方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RedisStringTemplateTest</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSaveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span><span class="token comment">// 1.创建一个Json序列化对象</span><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.将要存入的对象通过Json序列化对象转换为字符串</span><span class="token class-name">String</span> userJson1 <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.通过StringRedisTemplate将数据存入redis</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user:100"</span><span class="token punctuation">,</span>userJson1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4.通过key取出value</span><span class="token class-name">String</span> userJson2 <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user:100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5.由于取出的值是String类型的Json字符串，因此我们需要通过Json序列化对象来转换为java对象</span><span class="token class-name">User</span> user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>userJson2<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6.打印结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行完毕回到Redis的图形化客户端查看结果<br><img src="/2023/07/04/java/redis/6-8-2.png"></li></ul><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><blockquote><p><code>RedisTemplate</code>的两种序列化实践方案，两种方案各有各的优缺点，可以根据实际情况选择使用。</p></blockquote><p>方案一：</p><ol><li>自定义<code>RedisTemplate</code></li><li>修改<code>RedisTemplate</code>的序列化器为<code>GenericJackson2JsonRedisSerializer</code></li></ol><p>方案二：</p><ol><li>使用<code>StringRedisTemplate</code></li><li>写入Redis时，手动把<strong>对象序列化为JSON</strong></li><li>读取Redis时，手动把<strong>读取到的JSON反序列化为对象</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错记录</title>
      <link href="/2023/07/02/gong-ju-ji-he-ji-bao-cuo/bao-cuo-ji-yi/"/>
      <url>/2023/07/02/gong-ju-ji-he-ji-bao-cuo/bao-cuo-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
          <category> 报错记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English</title>
      <link href="/2023/07/02/gong-ju-ji-he-ji-bao-cuo/dan-ci-ji-yi/"/>
      <url>/2023/07/02/gong-ju-ji-he-ji-bao-cuo/dan-ci-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="英语还是很重滴！"><a href="#英语还是很重滴！" class="headerlink" title="英语还是很重滴！"></a>英语还是很重滴！</h2><blockquote><ol><li>“Inspection”（检查）</li><li>“artifact”（构件）</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具集合及报错 </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_2</title>
      <link href="/2023/06/30/java/spring-2/"/>
      <url>/2023/06/30/java/spring-2/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM常用注解"><a href="#SSM常用注解" class="headerlink" title="SSM常用注解"></a>SSM常用注解</h1><ul><li>在SSM（Spring + Spring MVC + MyBatis）框架中，有很多常用的注解用来简化配置和增强开发效率。以下是一些常用的注解：<blockquote><p><code>@Component</code>：用于标识一个普通的Java类为Spring容器的组件。<br><code>@Controller</code>：用于标识一个类为Spring MVC的控制器。<br><code>@RequestMapping</code>：用于映射请求路径到控制器的处理方法。<br><code>@Service</code>：用于标识一个类为服务层的组件，用于定义业务逻辑。<br><code>@Repository</code>：用于标识一个类为持久层的组件，通常用于访问数据库。<br><code>@Autowired</code>：用于自动注入依赖，可以用在构造方法、属性或方法上。<br><code>@Qualifier</code>：结合@Autowired使用，用于指定注入的Bean的名称。<br><code>@Value</code>：用于注入属性值。<br><code>@RequestParam</code>：用于获取请求参数的值。<br><code>@ResponseBody</code>：用于将方法返回的对象转换为指定的格式（如JSON）并响应给客户端。<br><code>@PathVariable</code>：用于获取请求路径中的占位符的值。<br><code>@Valid</code>：用于开启方法参数的校验。<br><code>@Transactional</code>：用于标识一个方法或类需要进行事务管理。<br><code>@Aspect</code>：用于定义切面（Aspect）。<br><code>@Pointcut</code>：用于定义切入点（Pointcut）。</p></blockquote></li></ul><p><img src="/2023/06/30/java/spring-2/0.jpg"></p><h2 id="一、事务"><a href="#一、事务" class="headerlink" title="一、事务"></a>一、事务</h2><ul><li><p>@Transactional</p></li><li><p>mybatis内部使用jdbc的事务，事务主要是为了同成功或者同失败，eg：银行转账，并记录日志</p></li><li><p>事务管理员：发起事务方    开启事务的方法</p></li><li><p>事务协调员：加入事务方，通常为   数据层方法，也可以是业务层方法</p></li><li><p>事务传播<br><img src="/2023/06/30/java/spring-2/1-1.png" alt="事务传播"></p></li></ul><h2 id="二、SpringMVC"><a href="#二、SpringMVC" class="headerlink" title="二、SpringMVC"></a>二、SpringMVC</h2><h3 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1.SpringMVC概述"></a>1.SpringMVC概述</h3><ul><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架<br><img src="/2023/06/30/java/spring-2/2-1.png" alt="轻量级Web框架"></li></ul><h3 id="2-bean加载控制"><a href="#2-bean加载控制" class="headerlink" title="2.bean加载控制"></a>2.bean加载控制</h3><ul><li><img src="/2023/06/30/java/spring-2/2-2.png" alt="bean加载控制"></li><li>主要有excludeFilters， includeFilters<br><img src="/2023/06/30/java/spring-2/2-3.png" alt="利用Filter细节"></li></ul><h4 id="白学之路——化简了"><a href="#白学之路——化简了" class="headerlink" title="白学之路——化简了"></a>白学之路——化简了</h4><p><img src="/2023/06/30/java/spring-2/2-3-1.png" alt="简化开发"></p><h3 id="3-设置请求映射路径"><a href="#3-设置请求映射路径" class="headerlink" title="3.设置请求映射路径"></a>3.设置请求映射路径</h3><ul><li>为了避免冲突</li><li>/user/save</li><li>/book/save</li></ul><h3 id="4-json数据传递参数"><a href="#4-json数据传递参数" class="headerlink" title="4.json数据传递参数"></a>4.json数据传递参数</h3><ul><li>@RequestBody和@RequestParam的区别<br><img src="/2023/06/30/java/spring-2/2-4-1.png" alt="@RequestBody和@RequestParam的区别"></li></ul><h2 id="三、jetty服务器-切换web服务器"><a href="#三、jetty服务器-切换web服务器" class="headerlink" title="三、jetty服务器_切换web服务器"></a>三、jetty服务器_切换web服务器</h2><p><img src="/2023/06/30/java/spring-2/3-1.png" alt="Jetty换tomcat配置"></p><h2 id="四、三种配置文件格式"><a href="#四、三种配置文件格式" class="headerlink" title="四、三种配置文件格式"></a>四、三种配置文件格式</h2><h3 id="1-优先级及格式配置"><a href="#1-优先级及格式配置" class="headerlink" title="1.优先级及格式配置"></a>1.优先级及格式配置</h3><ul><li>优先级：<code>application.yml</code>  &lt; <code>application.yaml</code> &lt; <code>application.properties</code><br><img src="/2023/06/30/java/spring-2/4-1.png" alt="提示功能消失解决方案"><br><img src="/2023/06/30/java/spring-2/4-2.png" alt="几种格式"></li></ul><h3 id="2-yaml语法"><a href="#2-yaml语法" class="headerlink" title="2.yaml语法"></a>2.yaml语法</h3><blockquote><p>yaml主流-数据序列化格式，下面为语法格式</p><blockquote><p>1.大小写敏感<br>2.属性层级关系使用多行描述，每行结尾使用冒号（：）结束<br>3.使用缩进表示层级关系，同层级左侧对齐，只允许空格（不允许用tab）<br>4.属性值前面添加空格（属性名和属性值之间用 冒号+空格 分隔<br>5.# 表示注释</p></blockquote></blockquote><h3 id="3-读取方式"><a href="#3-读取方式" class="headerlink" title="3.读取方式"></a>3.读取方式</h3><blockquote><p>数据读取 ： <code>@Value(${..})</code>   ,<br> 自定义封装的指定数据  <code>@ConfigurationProperties(prefix="enterprise")</code> ,<br> Environment</p></blockquote><h2 id="五、-多环境开发配置"><a href="#五、-多环境开发配置" class="headerlink" title="五、 多环境开发配置"></a>五、 多环境开发配置</h2><h3 id="1-基础配置，多环境启动"><a href="#1-基础配置，多环境启动" class="headerlink" title="1.基础配置，多环境启动"></a>1.基础配置，多环境启动</h3><ul><li>带划线的为过时的<br><img src="/2023/06/30/java/spring-2/5-1.png"></li></ul><h3 id="2-propertie多环境启动-承接上面"><a href="#2-propertie多环境启动-承接上面" class="headerlink" title="2.propertie多环境启动_承接上面"></a>2.propertie多环境启动_承接上面</h3><p><img src="/2023/06/30/java/spring-2/5-2.png"></p><h3 id="3-配置文件分类"><a href="#3-配置文件分类" class="headerlink" title="3.配置文件分类"></a>3.配置文件分类</h3><ul><li>config文件夹下的配置文件优先级更高<br><img src="/2023/06/30/java/spring-2/5-3.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2023/06/28/qian-duan/css/"/>
      <url>/2023/06/28/qian-duan/css/</url>
      
        <content type="html"><![CDATA[<h2 id="一、css垂直居中——面试老问"><a href="#一、css垂直居中——面试老问" class="headerlink" title="一、css垂直居中——面试老问"></a>一、css垂直居中——面试老问</h2><ul><li><p>垂直居中是一种常见的布局需求，下面介绍几种实现垂直居中的方法：</p></li><li><p><strong>1.使用 Flexbox：</strong>使用 <code>display: flex;</code> 来创建一个弹性布局容器，并通过设置 <code>align-items: center;</code> 来使子元素在垂直方向上居中。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 可选，水平居中 */</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span> <span class="token comment">/* 确保容器高度占满整个屏幕 */</span><span class="token punctuation">}</span><span class="token selector">.centered-content</span> <span class="token punctuation">{</span>  <span class="token comment">/* 样式规则 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>2.使用表格布局：</strong>使用 <code>display: table;</code> 来创建一个表格布局，通过 <code>display: table-cell;</code> 和 <code>vertical-align: middle;</code> 来使子元素在垂直方向上居中。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span> <span class="token comment">/* 确保容器高度占满整个屏幕 */</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 水平居中 */</span><span class="token punctuation">}</span><span class="token selector">.centered-content</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token comment">/* 样式规则 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>3.使用绝对定位和负边距：</strong>将要居中的元素设置为绝对定位，并通过负边距和 <code>top: 50%;</code> 来使其在垂直方向上居中。同时使用 <code>transform: translateY(-50%);</code> 将元素向上移动自身的一半高度，以完全居中。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span> <span class="token comment">/* 确保容器高度占满整个屏幕 */</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment">/* 水平居中 */</span><span class="token punctuation">}</span><span class="token selector">.centered-content</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* 样式规则 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="二、vw和vh"><a href="#二、vw和vh" class="headerlink" title="二、vw和vh"></a>二、vw和vh</h2><p>vw 和 vh 是CSS中的相对长度单位，它们代表<strong>视窗宽度（Viewport Width）</strong>和<strong>视窗高度（Viewport Height）</strong>的百分比。</p><p>1vw 表示视窗宽度的1%，而 1vh 表示视窗高度的1%。这两个单位可以用于设置元素的尺寸或位置，相对于当前视窗的大小。 以下是一些示例用法：</p><blockquote><p>设置元素的宽度为视窗宽度的50%：</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50vw<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>设置元素的高度为视窗高度的75%：</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span> <span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> 75vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>设置元素的左边距相对于视窗宽度的10%：</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span> <span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 10vw<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>设置元素的顶部位置相对于视窗高度的25%：</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.element</span> <span class="token punctuation">{</span>  <span class="token property">top</span><span class="token punctuation">:</span> 25vh<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 vw 和 vh 单位可以使得元素在不同视窗大小下保持一致的比例关系，因此在响应式设计中非常有用。需要注意的是，这两个单位的兼容性较好，但在一些旧的浏览器版本可能存在兼容性问题，因此在使用时需要进行兼容性考虑。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 垂直居中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue题记</title>
      <link href="/2023/06/28/qian-duan/vue-ti-ji/"/>
      <url>/2023/06/28/qian-duan/vue-ti-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、动态颜色-v-bind-在css中使用"><a href="#一、动态颜色-v-bind-在css中使用" class="headerlink" title="一、动态颜色 v-bind 在css中使用"></a>一、动态颜色 v-bind 在css中使用</h2><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import { ref } from "vue"const theme = ref("red")const colors = ["blue", "yellow", "red", "green"]setInterval(() =&gt; {  theme.value = colors[Math.floor(Math.random() * 4)]}, 1000)&lt;/script&gt;&lt;template&gt;  &lt;p&gt;hello&lt;/p&gt;&lt;/template&gt;&lt;style scoped&gt;/* Modify the code to bind the dynamic color */p {  color:  v-bind(theme)}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、全局css-：global"><a href="#二、全局css-：global" class="headerlink" title="二、全局css ：global()"></a>二、全局css ：global()</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;template&gt;  &lt;p&gt;Hello Vue.js&lt;/p&gt;&lt;/template&gt;&lt;style scoped&gt;p</span> <span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* Make it work */</span><span class="token selector">:global(body)</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Teleport-将插槽内容渲染到另一个DOM"><a href="#三、Teleport-将插槽内容渲染到另一个DOM" class="headerlink" title="三、Teleport 将插槽内容渲染到另一个DOM"></a>三、Teleport 将插槽内容渲染到另一个DOM</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Renders it to a child element <span class="token keyword">of</span> the <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">body</span><span class="token template-punctuation string">`</span></span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>Teleport to<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Teleport<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、render-h-的使用"><a href="#四、render-h-的使用" class="headerlink" title="四、render  h 的使用"></a>四、render  h 的使用</h2><p>mybutton.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment">//import { emit } from 'process';</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'MyButton'</span><span class="token punctuation">,</span>  props<span class="token operator">:</span> <span class="token punctuation">{</span>    disable<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>      <span class="token comment">/** do someting */</span>      <span class="token string">'button'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          context<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'custom-click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      context<span class="token punctuation">.</span>$slots    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue</p><pre class="line-numbers language-Vue" data-language="Vue"><code class="language-Vue">&lt;script setup lang="ts"&gt;import MyButton from "./MyButton"const onClick = () =&gt; {  console.log("onClick")}&lt;/script&gt;&lt;template&gt;  &lt;MyButton :disabled="false" @custom-click="onClick"&gt;    my button   &lt;/MyButton&gt;  &lt;!-- &lt;h2&gt;sdaio&lt;/h2&gt; --&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、树组件"><a href="#五、树组件" class="headerlink" title="五、树组件"></a>五、树组件</h2><p>TreeComponent.vue</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">interface</span> <span class="token class-name">TreeData</span> <span class="token punctuation">{</span>  key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  children<span class="token operator">:</span> TreeData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> data<span class="token operator">:</span> TreeData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">do</span> something<span class="token operator">...</span><span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, i) in data"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>tree<span class="token operator">-</span>component        v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"item.children &amp;&amp; item.children.length"</span>        <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"item.children"</span>      <span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>tree<span class="token operator">-</span>component<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>App.vue</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> TreeComponent <span class="token keyword">from</span> <span class="token string">"./TreeComponent.vue"</span><span class="token keyword">const</span> treeData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>  key<span class="token operator">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">'Parent 1'</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    key<span class="token operator">:</span> <span class="token string">'1-1'</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'child 1'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    key<span class="token operator">:</span> <span class="token string">'1-2'</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'child 2'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      key<span class="token operator">:</span> <span class="token string">'1-2-1'</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">'grandchild 1'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      key<span class="token operator">:</span> <span class="token string">'1-2-2'</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">'grandchild 2'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  key<span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">'Parent 2'</span><span class="token punctuation">,</span>  children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    key<span class="token operator">:</span> <span class="token string">'2-1'</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'child 1'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      key<span class="token operator">:</span> <span class="token string">'2-1-1'</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">'grandchild 1'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      key<span class="token operator">:</span> <span class="token string">'2-1-2'</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">'grandchild 2'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    key<span class="token operator">:</span> <span class="token string">'2-2'</span><span class="token punctuation">,</span>    title<span class="token operator">:</span> <span class="token string">'child 2'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>TreeComponent <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"treeData"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/06/28/qian-duan/vue-ti-ji/jieguo.png" alt="结果"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> render </tag>
            
            <tag> v-bind在css中使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2023/06/25/java/maven/"/>
      <url>/2023/06/25/java/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven大一统"><a href="#Maven大一统" class="headerlink" title="Maven大一统"></a>Maven大一统</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）</li><li>POM （Project Object Model）：项目对象模型<br><img src="/2023/06/25/java/maven/image.png" alt="Maven"></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>项目构建、依赖管理（管jar包，避免版本冲突）</li><li>统一了开发结构<br><img src="/2023/06/25/java/maven/jiegou.png" alt="开发结构"><br> 蓝色文件夹为源码，绿色为test</li></ul><h2 id="二、依赖管理"><a href="#二、依赖管理" class="headerlink" title="二、依赖管理"></a>二、依赖管理</h2><h3 id="依赖传递冲突问题"><a href="#依赖传递冲突问题" class="headerlink" title="依赖传递冲突问题"></a>依赖传递冲突问题</h3><ul><li>路径优先：层次浅的优先级高</li><li>声明优先：资源在同级被依赖时，配置顺序靠前的优先</li><li>特殊优先：同级配置了相同资源的不同版本，后配置覆盖先配置的</li></ul><p> 个人理解 最近的<br> </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  可选依赖 dependency中，类似于私房钱，让不让别人知道 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 排除依赖，主动断开与其他的联系 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><ul><li>依赖的jar默认情况可以 在任何地方使用，可以通过scope标签设定作用范围<blockquote><p>作用范围</p><blockquote><p>主程序范围有效（main文件夹范围内）<br>测试程序范围有效（test文件夹范围内）<br>是否参与打包（package指令范围内）<br><img src="/2023/06/25/java/maven/scope.png" alt="样例"><br>这个servlet-api不参与打包因为服务器会有其api</p></blockquote></blockquote></li></ul><p><img src="/2023/06/25/java/maven/chuandi.png" alt="了解就ok，能用就行"></p><h2 id="三、项目构建生命周期"><a href="#三、项目构建生命周期" class="headerlink" title="三、项目构建生命周期"></a>三、项目构建生命周期</h2><p><img src="/2023/06/25/java/maven/shengmingzhouqi.png" alt="项目构建生命周期"></p><h2 id="四、分模块开发与设计"><a href="#四、分模块开发与设计" class="headerlink" title="四、分模块开发与设计"></a>四、分模块开发与设计</h2><p><img src="/2023/06/25/java/maven/module.png"></p><ul><li>pom导资源坐标，需要先install 打包到自己的repository，其他的模块才能找到需要的依赖</li></ul><h2 id="五、聚合"><a href="#五、聚合" class="headerlink" title="五、聚合"></a>五、聚合</h2><p><img src="/2023/06/25/java/maven/juhe.png" alt="聚合"></p><blockquote><p>模块三种类型：<br>pom<br>jar<br>war</p></blockquote><h2 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h2><p><img src="/2023/06/25/java/maven/jicheng.png" alt="继承配置样例"></p><ul><li>子模块版本可以不写 用父的，便于维护，避免冲突</li><li>父pom.xml的配置<code>&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;</code><br>plugins，同理</li></ul><h2 id="七、属性"><a href="#七、属性" class="headerlink" title="七、属性"></a>七、属性</h2><h3 id="1-自定义属性"><a href="#1-自定义属性" class="headerlink" title="1.自定义属性"></a>1.自定义属性</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 自定义属性 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">&gt;</span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他地方版本写<code>&lt;version&gt;${**.version}&lt;/version&gt;</code>即可。</p><h3 id="2-内置属性"><a href="#2-内置属性" class="headerlink" title="2.内置属性"></a>2.内置属性</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">${basedir}${version}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-Setting属性"><a href="#3-Setting属性" class="headerlink" title="3.Setting属性"></a>3.Setting属性</h3><ul><li>使用Maven配置文件setting.xml中的标签属性，用于动态配置</li><li>调用格式：<code>${settings.localRepository}</code></li></ul><h3 id="4-Java系统属性"><a href="#4-Java系统属性" class="headerlink" title="4.Java系统属性"></a>4.Java系统属性</h3><ul><li>读取Java系统属性</li><li>调用格式：<code>${user.home}</code></li><li>系统属性查询方式<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">mvn help:system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="八、版本管理"><a href="#八、版本管理" class="headerlink" title="八、版本管理"></a>八、版本管理</h2><h3 id="1-工程版本"><a href="#1-工程版本" class="headerlink" title="1.工程版本"></a>1.工程版本</h3><ul><li>SNAPSHOT(快照版本)-会不断更新，没成型</li><li>RELEASE(发布版本)</li></ul><p>每次打包install版本不一样的话，会生成不同的jar，文件夹可见不同</p><h3 id="2-工程版本号约定"><a href="#2-工程版本号约定" class="headerlink" title="2.工程版本号约定"></a>2.工程版本号约定</h3><blockquote><p>约定规范</p><blockquote><ul><li>&lt;主板本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;.&lt;里程碑版本&gt;</li><li>主版本：表示项目重大架构变更，如spring5相对于spring4</li><li>次版本：表示有较大功能增加和变化，或者全面系统地修复漏洞</li><li>增量版本：表示有重大漏洞的修复</li><li>里程碑版本：表示一个版本的里程碑</li></ul></blockquote></blockquote><blockquote><p>规范：5.1.9.RELEASE</p></blockquote><h2 id="九、多环境配置"><a href="#九、多环境配置" class="headerlink" title="九、多环境配置"></a>九、多环境配置</h2><h3 id="1-多环境兼容"><a href="#1-多环境兼容" class="headerlink" title="1.多环境兼容"></a>1.多环境兼容</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    创建多环境--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        定义具体环境、生产环境--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            定义环境对应的唯一名称--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>pro_env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            定义环境中换用的属性值--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        定义具体环境、开发环境--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>dep_env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/06/25/java/maven/env.png" alt="用哪个加哪个参数"></p><h3 id="2-加载指定环境"><a href="#2-加载指定环境" class="headerlink" title="2.加载指定环境"></a>2.加载指定环境</h3><ul><li>作用：加载指定环境配置</li><li>调用格式：<br>  <code>mvn 指令 -P 环境定义id</code></li><li>范例：<br>  <code>mvn install -P pro_env</code></li></ul><h2 id="十、跳过测试"><a href="#十、跳过测试" class="headerlink" title="十、跳过测试"></a>十、跳过测试</h2><blockquote><p>应用场景:</p><blockquote><p>1.整体模块功能未开发<br>2.模块中某个功能未开发完毕<br>3.单个功能更新调试导致其他功能失败<br>4.快速打包<br>…..</p></blockquote></blockquote><p><em>一般按部就班，否则可能面向慈善编程，（把用户权限提高，上线了免费使用….）</em></p><h2 id="十一、私服"><a href="#十一、私服" class="headerlink" title="十一、私服"></a>十一、私服</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><img src="/2023/06/25/java/maven/nexus.png" alt="- Nexus"></p><p>安装地址及教程<br><a href="https://blog.csdn.net/i_r_o_n_m_a_n/article/details/120468285">https://blog.csdn.net/i_r_o_n_m_a_n/article/details/120468285</a></p><h3 id="2-私服资源获取"><a href="#2-私服资源获取" class="headerlink" title="2.私服资源获取"></a>2.私服资源获取</h3><p><img src="/2023/06/25/java/maven/ziyuan.png" alt="私服资源获取"></p><h3 id="3-仓库分类"><a href="#3-仓库分类" class="headerlink" title="3.仓库分类"></a>3.仓库分类</h3><blockquote><p>宿主仓库hosted</p><blockquote><p>保存无法从中央仓库获取的资源</p><blockquote><p>1.自主研发<br>2.第三方非开源项目</p></blockquote></blockquote></blockquote><blockquote><p>代理仓库proxy</p><blockquote><p>代理远程长裤，通过nexus访问替他公共仓库，录入中央仓库</p></blockquote></blockquote><blockquote><p>仓库组group</p><blockquote><p>1.将若干个仓库组成一个群组，简化配置<br>2.仓库组不能保存资源，属于设计型仓库</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_1</title>
      <link href="/2023/06/24/java/spring/"/>
      <url>/2023/06/24/java/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p><img src="/2023/06/24/java/spring/jiagou.png" alt="Spring Framework系统架构"><br><img src="/2023/06/24/java/spring/lujing.png" alt="学习路径"></p><h2 id="一、广义的-Spring"><a href="#一、广义的-Spring" class="headerlink" title="一、广义的 Spring"></a>一、广义的 Spring</h2><ul><li>有多个不同的子项目:<br>Spring FrameWork（其他子项目的基础）、Spring MVC、SpringBoot、Spring Cloud、 Spring Data、Spring Security</li></ul><h2 id="二、狭义的-Spring：SPring-FrameWork"><a href="#二、狭义的-Spring：SPring-FrameWork" class="headerlink" title="二、狭义的 Spring：SPring FrameWork"></a>二、狭义的 Spring：SPring FrameWork</h2><ul><li>Spring框架是一个分层的、面向切面的java应用程序的一站式轻量级解决方案<br>Spring 有两个最核心模块：IOC和AOP<blockquote><p>IoC：（Inverse of Control）,”控制反转”，指把创建对象过程交给Spring管理<br>AOP：(Aspect Oriented Programming),译为”面向切面编程”，AOP用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来、减少系统的重复代码、降低模块间耦合度。另外，AOP还解决一些系统层面上的问题，比如日志、事务、权限等。</p></blockquote></li></ul><h2 id="三、Spring-特性"><a href="#三、Spring-特性" class="headerlink" title="三、Spring 特性"></a>三、Spring 特性</h2><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><h2 id="四、IoC如何使用返回创建的对象"><a href="#四、IoC如何使用返回创建的对象" class="headerlink" title="四、IoC如何使用返回创建的对象"></a>四、IoC如何使用返回创建的对象</h2><p>先写user类，之后配置xml，再在其他类用ioc创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spring6</span><span class="token punctuation">;</span><span class="token comment">// User类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- bean.xml文件 --&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    完成user对象创建        bean标签            id属性 ：唯一标识            class属性：要创建对象所在类的全路径（包名称=类名称）       --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.atguigu.spring6.User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li>加载bean.xml配置文件</li><li>对xml文件进行解析操作</li><li>获取xml文件bean标签属性值 id属性值和class属性值</li><li>使用反射根据类全路径创建对象</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>spring6</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//加载spring配置文件，对象创建</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取创建的对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用对象调用方法进行测试</span>        user<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//反射创建对象</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserObject1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">//获取Class对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.atguigu.spring6.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法创建对象</span>        <span class="token comment">//Object o = clazz.newInstance(); jdk9废除</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*  无参构造            org.atguigu.spring6.User@281e3708         */</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建的对象放到哪里？<br>源码里  <code>Map&lt;String, BeanDefinition&gt; </code><br><code>private final Map&lt;String, BeanDefinition&gt; beanDefinitionMap;</code></li></ul><h2 id="五、Log4j2日志框架"><a href="#五、Log4j2日志框架" class="headerlink" title="五、Log4j2日志框架"></a>五、Log4j2日志框架</h2><ol><li>日志优先级<br>TRACE&lt;DEBUG&lt;INFO&lt;WARN&lt;ERROR&lt;FATAL(严重错误)</li></ol><h3 id="简单配置-log4j2-xml"><a href="#简单配置-log4j2-xml" class="headerlink" title="简单配置 log4j2.xml"></a>简单配置 log4j2.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、容器-IoC-及xml开发"><a href="#六、容器-IoC-及xml开发" class="headerlink" title="六、容器:IoC _及xml开发"></a>六、容器:IoC _及xml开发</h2><ul><li><p>由IoC容器管理的Java对象称为 <strong>Spring Bean</strong>，与使用关键字new创建的Java对象<strong>没有任何区别</strong></p></li><li><p>把对象创建 和 对象与对象之间的关系 都交给了IoC</p></li><li><p>由主动new产生的对象由<strong>外部</strong>提供对象，此过程中对象创建控制权由程序转移到外部，此思想为<strong>控制反转</strong></p></li></ul><h3 id="补充-pom-xml中添加Spring相关的依赖项"><a href="#补充-pom-xml中添加Spring相关的依赖项" class="headerlink" title="补充_ pom.xml中添加Spring相关的依赖项"></a>补充_ pom.xml中添加Spring相关的依赖项</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Spring Core --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Spring Context --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这些依赖项将为你提供创建和管理Spring应用程序上下文的功能，其中包括从XML文件中读取和解析配置信息。你可以在创建Spring的ApplicationContext时，通过读取XML文件来配置和初始化Bean。这样，你就可以在XML文件中定义和配置你的应用程序组件。</p></li><li><p>请注意，实际上，Spring更加倾向于使用基于Java配置而不是XML配置。现代的Spring项目通常使用注解和Java类来配置应用程序。但是，如果你确实需要使用XML进行配置，Spring仍然支持并提供了相应的功能</p></li><li><p>导入此依赖后 右键创建xml文件即可出现 spring config字眼</p></li></ul><h3 id="1-IoC容器在Spring的实现"><a href="#1-IoC容器在Spring的实现" class="headerlink" title="1.IoC容器在Spring的实现"></a>1.IoC容器在Spring的实现</h3><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>IoC基本实现，是spring内部使用的接口，面向spring本身，不提供给开发人员</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>BeanFactory的子接口，提供了更多高级特性。面向spring的使用者。<br><img src="/2023/06/24/java/spring/App1.png" alt="ApplicationContext实现类"></p><h3 id="2-DI（Dependency-Injection）：依赖注入"><a href="#2-DI（Dependency-Injection）：依赖注入" class="headerlink" title="2.DI（Dependency Injection）：依赖注入"></a>2.DI（Dependency Injection）：依赖注入</h3><ul><li><p><strong>在容器中建立bean与bean之间的依赖关系的整个过程</strong>，称为依赖注入</p></li><li><p>依赖注入实现了控制反转的思想</p></li><li><p>指Spring创建对象的过程中，将对象依赖属性通过配置进行注入<br>依赖注入常见的实现方式两种：</p><blockquote><p>1.set注入<br>2.构造注入</p></blockquote></li></ul><blockquote><p>目标：充分解耦</p><blockquote><p>使用IoC容器管理bean<br>再IoC容器内将有依赖关系的bean进行关系绑定<br>IoC就是一种控制反转的思想，DI是对IoC的一种具体实现。</p></blockquote></blockquote><h3 id="3-bean实例化"><a href="#3-bean实例化" class="headerlink" title="3.bean实例化"></a>3.bean实例化</h3><h4 id="1）构造方法实例化bean-bean别名配置"><a href="#1）构造方法实例化bean-bean别名配置" class="headerlink" title="1）构造方法实例化bean_bean别名配置"></a>1）构造方法实例化bean_bean别名配置</h4><p><img src="/2023/06/24/java/spring/bean.png" alt="bean别名配置"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    配置bean--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--                property 表示配置当前bean标签属性，name表示具体哪一个属性(bean中必须有set方法），ref表示参照哪个属性--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--            ref可以参照name或者id--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认获取的对象为单例模式（两个对象内存一个地址），可以更改bean scope配置<br><img src="/2023/06/24/java/spring/beandanli.png" alt="bean作用范围配置"></p><h4 id="2）使用静态工厂实例化bean"><a href="#2）使用静态工厂实例化bean" class="headerlink" title="2）使用静态工厂实例化bean"></a>2）使用静态工厂实例化bean</h4><ul><li>ApplicationContext.xml配置<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    class配置factory的,method写定义的方法即可--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.factory.OrderFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOrderDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>工厂类 OrderFactory.java<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">OrderDaoImpl</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OrderDao</span> <span class="token function">getOrderDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"factory order dao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OrderDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>启动类 AppFactory.java<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OrderDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"ApplicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrderDao</span> orderDao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OrderDao</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"orderDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 输出 factory order dao</span><span class="token comment">//  order dao save...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3）实例工厂实例化bean"><a href="#3）实例工厂实例化bean" class="headerlink" title="3）实例工厂实例化bean"></a>3）实例工厂实例化bean</h4><p><img src="/2023/06/24/java/spring/shiligongchang.png" alt="实例化工厂实例化bean"><br>改进后：</p><h4 id="4）FactoryBean方式"><a href="#4）FactoryBean方式" class="headerlink" title="4）FactoryBean方式"></a>4）FactoryBean方式</h4><p><img src="/2023/06/24/java/spring/fbean.png" alt="自定义泛型，统一方法名字"></p><ul><li>isSingleton方法可以改变是否是单例对象</li></ul><h3 id="4-bean生命周期"><a href="#4-bean生命周期" class="headerlink" title="4.bean生命周期"></a>4.bean生命周期</h3><ul><li><p>UserDaoImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">UserDao</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user dao save"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//bean初始化对应的操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userdao init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//bean销毁前对应的操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userdao destory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>xml配置,加上init-method，destory-method</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    1.导入坐标 spring-context--&gt;</span><span class="token comment">&lt;!--    2.配置bean--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destory<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.service.impl.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--                property 表示配置当前bean标签属性，name表示具体哪一个属性(bean中必须有set方法），ref表示参照哪个属性--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--            ref可以参照name或者id--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    class配置factory的,method写定义的方法即可--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.factory.OrderFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getOrderDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">userdao initfactory order daoorder dao save...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-注入"><a href="#5-注入" class="headerlink" title="5.注入"></a>5.注入</h3><h4 id="1）setter注入"><a href="#1）setter注入" class="headerlink" title="1）setter注入"></a>1）setter注入</h4><ul><li>有对应的 num属性及setter方法，配合以下配置<br><code>  &lt;property name="num" value="1"&gt;&lt;/property&gt;</code></li></ul><h4 id="2）构造器注入"><a href="#2）构造器注入" class="headerlink" title="2）构造器注入"></a>2）构造器注入</h4><p><code>&lt;constructor-arg name="num" value="100"&gt;&lt;/constructor-arg&gt;</code><br>为了降低耦合，不局限于对应的名字，可以用index=”0”,<br><code>&lt;constructor-arg index="0" value="100"&gt;&lt;/constructor-arg&gt;</code></p><h4 id="3）自动装配"><a href="#3）自动装配" class="headerlink" title="3）自动装配"></a>3）自动装配</h4><p>autowire属性<br>主要是引用类型装配</p><h4 id="4）集合注入"><a href="#4）集合注入" class="headerlink" title="4）集合注入"></a>4）集合注入</h4><p>property   list  set   map(key-value),用entry</p><h3 id="6-Spring管理第三方资源"><a href="#6-Spring管理第三方资源" class="headerlink" title="6.Spring管理第三方资源"></a>6.Spring管理第三方资源</h3><ul><li>DruidDataSource</li><li>ComboPooledDataSource   c3p0<br><img src="/2023/06/24/java/spring/shujuyuan.png" alt="数据源对象管理"></li></ul><h3 id="7-加载properties"><a href="#7-加载properties" class="headerlink" title="7.加载properties"></a>7.加载properties</h3><p><img src="/2023/06/24/java/spring/xmlns.png" alt="spring开启命名空间"><br><img src="/2023/06/24/java/spring/jiazai.png" alt="加载properties文件"></p><h2 id="七、Spring命名空间"><a href="#七、Spring命名空间" class="headerlink" title="七、Spring命名空间"></a>七、Spring命名空间</h2><ul><li>Spring命名空间是<strong>一种在Spring框架中配置和声明Bean的方式。</strong>它提供了一种简化配置的方式，可以使用特定的XML命名空间和预定义的标签来定义Bean以及它们之间的关系和行为。</li></ul><blockquote><p>使用Spring命名空间，可以更加简洁和可读性强的方式配置和管理Spring应用的组件。以下是一些常用的Spring命名空间及其功能：</p><blockquote><p><code>&lt;bean&gt;</code>命名空间：<strong>用于定义和配置Bean。</strong>可以通过指定<code>&lt;bean&gt;</code>标签的id和class属性，来声明和创建Bean实例。<br><code>&lt;context&gt;</code>命名空间：<strong>用于配置Spring应用的上下文环境。</strong>包括配置自动扫描组件、注入依赖、AOP、事务等。<br><code>&lt;aop&gt;</code>命名空间：<strong>用于配置切面和面向切面的编程。</strong>可以使用<code>&lt;aop:config&gt;</code>标签来定义切面和通知，以及切入点和切面的关系。<br><code>&lt;tx&gt;</code>命名空间：<strong>用于配置Spring的事务管理。</strong>可以使用<code>&lt;tx:annotation-driven&gt;</code>标签启用基于注解的事务功能，还可以通过配置<code>&lt;tx:advice&gt;</code>标签来定义事务通知。<br><code>&lt;mvc&gt;</code>命名空间：<strong>用于配置Spring MVC框架。</strong>可以使用<code>&lt;mvc:annotation-driven&gt;</code>标签启用注解驱动的Spring MVC功能，还可以使用<code>&lt;mvc:view-resolvers&gt;</code>标签配置视图解析器等。</p></blockquote></blockquote><blockquote><p>除了上述命名空间，还有一些其他的命名空间可以用于配置Spring相关的功能，如缓存、安全等。使用Spring命名空间，可以通过更简单的方式配置和管理Spring应用的各个组件，提高开发效率并降低配置复杂性。</p></blockquote><h2 id="八、容器总结-以上总结"><a href="#八、容器总结-以上总结" class="headerlink" title="八、容器总结_以上总结"></a>八、容器总结_以上总结</h2><h3 id="1-获取容器"><a href="#1-获取容器" class="headerlink" title="1.获取容器"></a>1.获取容器</h3><p><img src="/2023/06/24/java/spring/zongjie2.png" alt="获取容器"></p><h3 id="2-获取bean"><a href="#2-获取bean" class="headerlink" title="2.获取bean"></a>2.获取bean</h3><p><img src="/2023/06/24/java/spring/zongjie1.png" alt="获取bean"></p><h3 id="3-bean相关"><a href="#3-bean相关" class="headerlink" title="3.bean相关"></a>3.bean相关</h3><p><img src="/2023/06/24/java/spring/beanabout.png" alt="bean相关"></p><h3 id="4-依赖注入相关"><a href="#4-依赖注入相关" class="headerlink" title="4.依赖注入相关"></a>4.依赖注入相关</h3><p><img src="/2023/06/24/java/spring/yilaizhuru.png" alt="依赖注入相关"></p><h2 id="九、注解开发"><a href="#九、注解开发" class="headerlink" title="九、注解开发"></a>九、注解开发</h2><p><img src="/2023/06/24/java/spring/9-0.png" alt="下面样例大概结构"></p><h3 id="1-注解开发定义"><a href="#1-注解开发定义" class="headerlink" title="1.注解开发定义"></a>1.注解开发定义</h3><p><img src="/2023/06/24/java/spring/9-1.png" alt="注解开发定义"></p><h3 id="2-三个衍生注解"><a href="#2-三个衍生注解" class="headerlink" title="2.三个衍生注解"></a>2.三个衍生注解</h3><p><img src="/2023/06/24/java/spring/9-2.png" alt="衍生注解"></p><h3 id="3-纯注解开发"><a href="#3-纯注解开发" class="headerlink" title="3.纯注解开发"></a>3.纯注解开发</h3><ul><li>spring3.0可纯注解开发<br><img src="/2023/06/24/java/spring/9-3.png" alt="纯注解开发"></li></ul><p><img src="/2023/06/24/java/spring/9-3-2.png" alt="xml和注解 两种方式对比"></p><h3 id="4-注解开发bean作用范围，生命周期"><a href="#4-注解开发bean作用范围，生命周期" class="headerlink" title="4.注解开发bean作用范围，生命周期"></a>4.注解开发bean作用范围，生命周期</h3><p><img src="/2023/06/24/java/spring/9-4.png" alt="bean管理及生命周期"></p><h3 id="5-注解开发依赖注入"><a href="#5-注解开发依赖注入" class="headerlink" title="5.注解开发依赖注入"></a>5.注解开发依赖注入</h3><h4 id="自动装配"><a href="#自动装配" class="headerlink" title="- 自动装配"></a>- 自动装配</h4><h5 id="1）-Autowire-暴力反射-自动装入引用类型"><a href="#1）-Autowire-暴力反射-自动装入引用类型" class="headerlink" title="1）@Autowire 暴力反射 自动装入引用类型"></a>1）@Autowire 暴力反射 自动装入引用类型</h5><p><img src="/2023/06/24/java/spring/9-5.png" alt="@Autowired"></p><h5 id="2）-Qualifier指定bean名字"><a href="#2）-Qualifier指定bean名字" class="headerlink" title="2）@Qualifier指定bean名字"></a>2）@Qualifier指定bean名字</h5><p><img src="/2023/06/24/java/spring/9-5-1.png" alt="指定bean"></p><h5 id="3）-value简单类型注入"><a href="#3）-value简单类型注入" class="headerlink" title="3）@value简单类型注入"></a>3）@value简单类型注入</h5><h4 id="读取properties文件-PropertySource"><a href="#读取properties文件-PropertySource" class="headerlink" title="- 读取properties文件 @PropertySource"></a>- 读取properties文件 @PropertySource</h4><p><img src="/2023/06/24/java/spring/9-5-3.png" alt="读取properties文件"></p><h3 id="6-第三方bean管理"><a href="#6-第三方bean管理" class="headerlink" title="6.第三方bean管理"></a>6.第三方bean管理</h3><ul><li>独立配置,逻辑拆开<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span> <span class="token comment">//表示返回是一个bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DruidDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/spring_db"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//第一种扫描式</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example.config"</span><span class="token punctuation">)</span><span class="token comment">// 第二种导入式</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JdbcConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十、注解开发总结"><a href="#十、注解开发总结" class="headerlink" title="十、注解开发总结"></a>十、注解开发总结</h2><h3 id="1-XML配置-对比-注解配置"><a href="#1-XML配置-对比-注解配置" class="headerlink" title="1.XML配置 对比 注解配置"></a>1.XML配置 对比 注解配置</h3><p><img src="/2023/06/24/java/spring/10-1.png" alt="xml配置对比注解配置"></p><h2 id="十一、Spring整合Mybatis"><a href="#十一、Spring整合Mybatis" class="headerlink" title="十一、Spring整合Mybatis"></a>十一、Spring整合Mybatis</h2><h3 id="1-Mybatis程序核心对象分析"><a href="#1-Mybatis程序核心对象分析" class="headerlink" title="1.Mybatis程序核心对象分析"></a>1.Mybatis程序核心对象分析</h3><ul><li>核心 SqlSessionFactory<br><img src="/2023/06/24/java/spring/11-1.png" alt="Mybatis程序核心对象分析"></li></ul><h3 id="2-整合Mybatis"><a href="#2-整合Mybatis" class="headerlink" title="2.整合Mybatis"></a>2.整合Mybatis</h3><ul><li>SqlSessionFactoryBean</li><li>MapperScannerConfigurer<br>1:<br><img src="/2023/06/24/java/spring/11-2.png" alt="整合Mybatis_1"><br>2:<br><img src="/2023/06/24/java/spring/11-3.png" alt="整合Mybatis_2_1"><br><img src="/2023/06/24/java/spring/11-4.png" alt="整合Mybatis_2_2"></li></ul><h3 id="3-整合JUnit"><a href="#3-整合JUnit" class="headerlink" title="3.整合JUnit"></a>3.整合JUnit</h3><ul><li><code>@RunWith</code> 注解是JUnit框架提供的一个注解，用于指定测试运行器（Runner）。测试运行器负责调用测试用例的执行，并提供附加的功能和扩展。</li></ul><blockquote><p>在JUnit 4中，常见的测试运行器有：</p><blockquote><p><code>BlockJUnit4ClassRunner：</code>默认的测试运行器，用于执行JUnit 4风格的测试用例。<br><code>Parameterized：</code>用于执行参数化测试，允许对测试用例使用不同的输入参数进行多次运行。<br><code>SpringJUnit4ClassRunner：</code>与Spring框架集成的测试运行器，用于运行基于Spring的测试用例。<br>在JUnit 5中，<code>@RunWith</code> 注解已经被 <code>@ExtendWith</code> 注解取代。JUnit 5使用扩展模型（Extension Model）来提供测试运行器的功能。可以通过 <code>@ExtendWith </code>注解来指定扩展，来实现类似的功能。</p></blockquote></blockquote><ul><li>请注意，使用 <code>@RunWith</code> 注解或 <code>@ExtendWith </code>注解取决于你所使用的JUnit版本。<br><img src="/2023/06/24/java/spring/11-5.png" alt="整合JUnit样例"></li></ul><h2 id="十二、AOP-面向切面编程"><a href="#十二、AOP-面向切面编程" class="headerlink" title="十二、AOP 面向切面编程"></a>十二、AOP 面向切面编程</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><ul><li><strong>AOP（Aspect Oriented Programming）面向切面编程</strong>:一种编程范式、指导开发者<strong>如何组织程序结构</strong></li><li><strong>作用：****在不惊动原始设计的基础上为其进行功能增强</strong></li><li>Spring理念：无入侵/侵入式</li></ul><h3 id="2-AOP-核心概念"><a href="#2-AOP-核心概念" class="headerlink" title="2.AOP 核心概念"></a>2.AOP 核心概念</h3><ul><li><img src="/2023/06/24/java/spring/12-2-1.png"></li><li><img src="/2023/06/24/java/spring/12-2-2.png"></li></ul><h3 id="3-AOP入门案例"><a href="#3-AOP入门案例" class="headerlink" title="3.AOP入门案例"></a>3.AOP入门案例</h3><h4 id="1）导入aop相关坐标"><a href="#1）导入aop相关坐标" class="headerlink" title="1）导入aop相关坐标"></a>1）导入aop相关坐标</h4><p><img src="/2023/06/24/java/spring/12-3-1.png" alt="导入AOP相关坐标"></p><h4 id="2）定义dao接口与实现类"><a href="#2）定义dao接口与实现类" class="headerlink" title="2）定义dao接口与实现类"></a>2）定义dao接口与实现类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span> <span class="token comment">// 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">BookDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">//实现类</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book dao save......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3）4）5）6）定义通知类"><a href="#3）4）5）6）定义通知类" class="headerlink" title="3）4）5）6）定义通知类"></a>3）4）5）6）定义通知类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>aop</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//第6步  告诉spring这个注解做aop</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAdvice</span> <span class="token punctuation">{</span><span class="token comment">//第3步 定义通知类</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(void org.example.dao.BookDao.update())"</span><span class="token punctuation">)</span>   <span class="token comment">//第4步  定义切入点</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt()"</span><span class="token punctuation">)</span>  <span class="token comment">//第5步  绑定切入点和通知关系，并指定通知添加到原始连接点的具体执行位置</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7）开启Spring对AOP注解驱动支持"><a href="#7）开启Spring对AOP注解驱动支持" class="headerlink" title="7）开启Spring对AOP注解驱动支持"></a>7）开启Spring对AOP注解驱动支持</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span>  <span class="token comment">//第7步 告诉有用注解开发aop,开启Spring对AOP注解驱动支持</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8）启动测试"><a href="#8）启动测试" class="headerlink" title="8）启动测试"></a>8）启动测试</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BookDao</span> bookDao <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">BookDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bookDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*  结果1688105568022update......*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-工作流程及核心"><a href="#4-工作流程及核心" class="headerlink" title="4.工作流程及核心"></a>4.工作流程及核心</h3><ul><li>如果匹配上响应切入的点，就造proxy，否则原始对象</li><li>目标对象(Target):原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理（Proxy）：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><h3 id="5-AOP切入点表达式"><a href="#5-AOP切入点表达式" class="headerlink" title="5.AOP切入点表达式"></a>5.AOP切入点表达式</h3><ul><li><p>切入点：要进行增强的方法</p></li><li><p>切入点表达式：要进行增强的方法的描述方式<br><img src="/2023/06/24/java/spring/12-5-1.png" alt="切入点表达式"></p></li><li><p>通配符使用</p></li><li><p>..为任意的意思<br><img src="/2023/06/24/java/spring/12-5-2.png" alt="通配符使用 "><br><img src="/2023/06/24/java/spring/12-5-3.png" alt="书写技巧"></p></li></ul><h3 id="6-AOP通知类型"><a href="#6-AOP通知类型" class="headerlink" title="6.AOP通知类型"></a>6.AOP通知类型</h3><p><img src="/2023/06/24/java/spring/12-6.png" alt="aop通知类型"></p><ul><li><code>@Before</code>    <code>@After</code>     <code>@Around</code>（常用，重点） <code>@AfterReturning</code>（原始切入点方法正常 运行完才运行）       <code>@AfterThrowing</code>(方法出异常才运行)</li><li>环绕通知的返回值细节，可以用pjp.proceed();接收，遇到不同类型可强转<br><img src="/2023/06/24/java/spring/12-6-2.png" alt="@Around细节"></li></ul><h3 id="7-业务层接口执行效率"><a href="#7-业务层接口执行效率" class="headerlink" title="7.业务层接口执行效率"></a>7.业务层接口执行效率</h3><ul><li>proceed 继续进行 继续前进的意思<br><img src="/2023/06/24/java/spring/12-7-1.png" alt="案例业务层接口执行效率"></li><li>测试接口 执行效率仅仅是理论值，并不是完整一次过程</li></ul><h3 id="8-AOP通知获取数据"><a href="#8-AOP通知获取数据" class="headerlink" title="8.AOP通知获取数据"></a>8.AOP通知获取数据</h3><ul><li><p>获取参数<br><img src="/2023/06/24/java/spring/12-8-1.png" alt="获取参数"></p></li><li><p>获取返回值<br><img src="/2023/06/24/java/spring/12-8-2.png" alt="返回值"></p></li><li><p>获取异常数据<br><img src="/2023/06/24/java/spring/12-8-3.png" alt="获取异常"></p></li></ul><h2 id="十三、AOP总结"><a href="#十三、AOP总结" class="headerlink" title="十三、AOP总结"></a>十三、AOP总结</h2><p><img src="/2023/06/24/java/spring/13-0.png" alt="AOP总结"></p><h3 id="1-AOP总结-切入点"><a href="#1-AOP总结-切入点" class="headerlink" title="1.AOP总结_切入点"></a>1.AOP总结_切入点</h3><p><img src="/2023/06/24/java/spring/13-1.png" alt="AOP总结_切入点"></p><h3 id="2-AOP总结-通知类型"><a href="#2-AOP总结-通知类型" class="headerlink" title="2.AOP总结_通知类型"></a>2.AOP总结_通知类型</h3><p><img src="/2023/06/24/java/spring/13-2.png" alt="AOP总结_通知类型"></p><h3 id="3-AOP总结-获取参数和返回值"><a href="#3-AOP总结-获取参数和返回值" class="headerlink" title="3.AOP总结_获取参数和返回值"></a>3.AOP总结_获取参数和返回值</h3><p><img src="/2023/06/24/java/spring/13-3.png" alt="AOP总结_获取参数和返回值"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus</title>
      <link href="/2023/06/21/java/mybatisplus/"/>
      <url>/2023/06/21/java/mybatisplus/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ORM-介绍"><a href="#一、ORM-介绍" class="headerlink" title="一、ORM 介绍"></a>一、ORM 介绍</h2><ul><li>ORM （Object Relational Mapping，对象关系映射），为了解决面向对象与关系数据库存在的互不匹配现象的一种技术</li><li>ORM 通过使用描述对象和数据库之间映射的元数据将程序的对象自动持久化到关系数据库中</li><li>ORM 框架的本质是简化编程中操作数据库的编码<br><img src="/2023/06/21/java/mybatisplus/image.png" alt="ORM"></li></ul><h2 id="二、Mybatis"><a href="#二、Mybatis" class="headerlink" title="二、Mybatis"></a>二、Mybatis</h2><p>MyBatis 是一种基于 Java 的 ORM (Object Relational Mapping) 框架，可以将 SQL 映射到 Java 对象上，使用 XML 或注释的方式配置 SQL 语句，使得开发人员可以通过简单的配置完成对数据库的操作。MyBatis 具有轻量、易学易用、可插拔等优点，在 Java Web 开发中得到广泛使用。</p><ul><li>以下是 MyBatis 的一些基础知识：</li></ul><ol><li><p>MyBatis 核心组件：<code>SqlSession、Configuration、Executor、StatementHandler、ParameterHandler、ResultSetHandler、MappedStatement、SqlSource、BoundSql</code></p></li><li><p>MyBatis 中的映射文件有两种：<strong>Mapper 映射文件和全局配置文件</strong>。其中 Mapper 映射文件用来描述 SQL 语句和映射规则，全局配置文件用来配置一些全局性的配置。</p></li><li><p>在 Mapper 映射文件中，可以使用 <strong>XML 或注解</strong>的方式来配置 SQL 语句。使用 XML 中的 ${} 占位符引用参数，使用 #{} 占位符代替常规的 Java 传参方式，防止 SQL 注入。</p></li><li><p>MyBatis 中<strong>支持插件机制</strong>，用户可以自己编写插件，在 SQL 执行前后进行一些操作，比如记录执行时间、拦截 SQL 执行等。</p></li><li><p>MyBatis 除了支持原生的 JDBC 操作外，还支持集成一些开源的数据库连接池，比如 C3P0、 Druid 等。</p></li><li><p>MyBatis 中的缓存主要分为一级缓存和二级缓存，<strong>一级缓存是 SqlSession 级别的缓存，二级缓存是 SqlSessionFactory 级别的缓存</strong>，可以在多个 SqlSession 之间共享。</p></li><li><p>MyBatis 提供了多种方式来生成主键，比如使用数据库自动生成、使用 MyBatis 内置的序列机制、手工编写主键生成策略等。</p></li></ol><h2 id="三、Mybatis-Plus介绍"><a href="#三、Mybatis-Plus介绍" class="headerlink" title="三、Mybatis-Plus介绍"></a>三、Mybatis-Plus介绍</h2><ul><li>MyBatis是一款优秀的数据持久层ORM框架，被广泛地应用于系统</li><li>MyBatis能够非常灵活地实现动态SQL，可以使用XML或注解来配置和映射原生信息，能够轻松地将Java的POJO（Plain Ordinary Java Object，普通java对象）与数据库中的表和字段进行映射关联</li><li>MyBatis-Plus是一个MyBatis 的增强工具，在MyBatis的基础上做了增强，简化了开发</li></ul><p><a href="https://thexb.notion.site/Mybatis-73730a62229347d08b1b4a021ae86eb4">文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MybatisPlus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2023/06/20/java/servlet/"/>
      <url>/2023/06/20/java/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet学习"><a href="#Servlet学习" class="headerlink" title="Servlet学习"></a>Servlet学习</h1><p>与CGI（创建进程，占用资源多）相比，servlet（创建的是线程）有更好的性能、可移植性、稳健（JVM管理servlet）、安全</p><p><a href="https://www.runoob.com/servlet/servlet-first-example.html">servlet实例</a></p><h2 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h2><ul><li>javax.servlet</li><li>javax.servlet.http:包含只负责http请求的接口和类</li></ul><h2 id="servlet-接口"><a href="#servlet-接口" class="headerlink" title="servlet 接口"></a>servlet 接口</h2><p>提供了三个必须实现方法 <code>init</code> <code>service</code> <code>destory</code></p><h2 id="servletConfig-接口"><a href="#servletConfig-接口" class="headerlink" title="servletConfig 接口"></a>servletConfig 接口</h2><p>Web容器为每个Servlet创建一个<code>ServletConfig</code>对象，这个对象可以从<code>web.xml</code>种获取配置信息，<br>如果配置信息从web.xml中被修改，我们不需要改变servlet</p><h2 id="RequestDispatcher-接口"><a href="#RequestDispatcher-接口" class="headerlink" title="RequestDispatcher 接口"></a>RequestDispatcher 接口</h2><p>RequestDispatcher接口提供了将请求分配给另一个资源的功能，它可能是html、servlet或jsp。这个接口也可以用来包括另一个资源的内容，他是Servlet协作的一种方式</p><ul><li>两个method</li></ul><ol><li>forward：将一个请求从servlet转发到服务器上的另一个资源</li><li>include：在响应中包括一个资源的内容</li></ol><h2 id="HttpServletResponse接口"><a href="#HttpServletResponse接口" class="headerlink" title="HttpServletResponse接口"></a>HttpServletResponse接口</h2><p>HttpServletResponse 接口的<code>sendRedirect()</code>方法可以用来重定向响应到另一个资源，它可以是servlet、jsp或html文件<br>它接收相对和绝对的URL。他在客户端工作，因为它使用浏览器的URL栏进行另一个请求，因此它可以在服务器内部或外部工作</p><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><blockquote><p>servlet类被加载<br>创建servlet实例<br>init方法被调用<br>service方法被调用<br>调用destroy方法</p></blockquote><h2 id="Servlet-中会话跟踪"><a href="#Servlet-中会话跟踪" class="headerlink" title="Servlet 中会话跟踪"></a>Servlet 中会话跟踪</h2><p>几种技术</p><ol><li>Cookies</li><li>隐藏表单域</li><li>URL重写</li><li>HttpSession</li></ol><h2 id="war文件"><a href="#war文件" class="headerlink" title="war文件"></a>war文件</h2><p>网络档案war文件包含网络应用所有内容<br>节省时间<br>创建，进入项目目录（WEB-INF之外），<code>jar -cvf projectname.war *</code></p><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><p>&lt;% java代码 %&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java小记_3</title>
      <link href="/2023/06/20/java/java-xiao-ji-3/"/>
      <url>/2023/06/20/java/java-xiao-ji-3/</url>
      
        <content type="html"><![CDATA[<h1 id="java的第三篇啦"><a href="#java的第三篇啦" class="headerlink" title="java的第三篇啦"></a>java的第三篇啦</h1><p>有部分笔记不是很详细，记在心里即可</p><h2 id="一、List接口"><a href="#一、List接口" class="headerlink" title="一、List接口"></a>一、List接口</h2><p>实现List接口的常用三个类<br>ArrayList、LinkedList、Vector</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">List_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. List集合类中元素有序（取出和添加顺序一样）</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"丹青"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"锦绣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. List 索引从0开始</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//锦绣</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>List三种遍历方式  </p><blockquote><ol><li>使用iterator</li><li>增强for</li><li>普通for</li></ol></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList可以加null，源码由数组实现数据存储<br>效率高，不安全<br>扩容倍数：有参构造直接1.5倍，     无参构造第一次10，第二次1.5倍</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>扩容倍数：指定大小直接2倍          无参默认10，第二次2倍<br>安全，效率低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vector_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span> vector<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0-9</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedList-双向链表"><a href="#LinkedList-双向链表" class="headerlink" title="LinkedList_双向链表"></a>LinkedList_双向链表</h3><ol><li>LinkedList底层实现了双向<strong>链表</strong>和双端<strong>队列</strong></li><li>可以添加任意元素（可重复），包括null</li><li>线程不安全，没有实现同步</li></ol><h2 id="二、Set-接口"><a href="#二、Set-接口" class="headerlink" title="二、Set 接口"></a>二、Set 接口</h2><p>方法和collection类似</p><ol><li>无序，无索引</li><li>不允许有重复数据，最多一个null</li><li>实现类有 HashSet TreeSet等等<br>一般 <code>Set set = new HashSet();</code></li></ol><h3 id="HashSet-实现了-Set接口"><a href="#HashSet-实现了-Set接口" class="headerlink" title="HashSet 实现了 Set接口"></a>HashSet 实现了 Set接口</h3><p>下面有意思</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"lhl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ok</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"lhl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不能加入到set中 都在常量池中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>HashSet底层是HashMap，HashMap底层是（数组+链表+红黑树）</li></ul><h2 id="三、Map-接口"><a href="#三、Map-接口" class="headerlink" title="三、Map 接口"></a>三、Map 接口</h2><p>存key-value<br><img src="/2023/06/20/java/java-xiao-ji-3/Map.jpg"><br>常用方法，基础用法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Map_</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"王宝强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"花戎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"??"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{null=null, 1=王宝强, 2=花戎}</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{null=null, 2=花戎}</span>        <span class="token comment">// map.clear(); 清空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hashtable-实现了-Map"><a href="#Hashtable-实现了-Map" class="headerlink" title="Hashtable 实现了 Map"></a>Hashtable 实现了 Map</h3><ol><li>k-v都不允许为null</li><li>hashtable线程安全，hashmap线程不安全</li><li>方法几乎和hashmap一致</li></ol><h3 id="Properties-实现了-Map"><a href="#Properties-实现了-Map" class="headerlink" title="Properties 实现了 Map"></a>Properties 实现了 Map</h3><ul><li>Properties类继承自Hashtable类并且实现了Map接口，也是k-v存储</li></ul><h2 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h2><ol><li>编译时，检查元素类型，提高安全性</li><li>减少类型转换次数<br><code>ArrayList&lt;Dog&gt; arraylist = new ArrayList&lt;Dog&gt; ();</code></li></ol><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><p>TS差不多</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> 类型<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> <span class="token comment">//也可以是接口</span>    成员<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、JUnit-5"><a href="#五、JUnit-5" class="headerlink" title="五、JUnit 5"></a>五、JUnit 5</h2><ol><li>java语言单元测试框架</li><li>多数开发环境已经集成了<br><img src="/2023/06/20/java/java-xiao-ji-3/JUnit.png" alt="Alt+Enter快捷键"></li></ol><h2 id="六、java绘图"><a href="#六、java绘图" class="headerlink" title="六、java绘图"></a>六、java绘图</h2><p><strong>P572 暂留</strong></p><ul><li>component类提供两个和绘图相关的重要的方法<br>1.<code> paint（Graphics g）</code>绘制组件的外观</li></ul><ol start="2"><li><code>repaint（）</code>刷新组件的外观</li></ol><ul><li>当组件第一次在屏幕显示的时候，程序会自动的调用paint（）方法来绘制</li><li>一下情况paint（）会被调用</li></ul><ol><li>窗口最小化，再最大化</li><li>窗口的大小发生变化</li><li>repaint函数被调用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>draw</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCircle</span> <span class="token keyword">extends</span>  <span class="token class-name">JFrame</span><span class="token punctuation">{</span> <span class="token comment">//窗口</span>    <span class="token keyword">private</span>  <span class="token class-name">MyPanel</span> mp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span><span class="token class-name">JFrame</span><span class="token punctuation">.</span><span class="token constant">EXIT_ON_CLOSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//点×退出</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span><span class="token punctuation">{</span>    <span class="token comment">//g 画笔  MyPanel 画板</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类完成初始化</span>        <span class="token comment">// 画圆形</span>        g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="线程-Thread"><a href="#线程-Thread" class="headerlink" title="线程 Thread"></a>线程 Thread</h2><p>外记快捷键 打开structure ： alt+7</p><ul><li>Thread 实现了 Runnable接口<blockquote><p>两种方法使用：</p></blockquote></li></ul><ol><li>实现Runnable接口</li><li>集成Thread类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>thread</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// try catch   ctrl+alt+t</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h2><p>加入synchronized同步 上锁</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java第三篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3变化</title>
      <link href="/2023/06/11/qian-duan/vue3-bian-hua/"/>
      <url>/2023/06/11/qian-duan/vue3-bian-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue3变化"><a href="#Vue3变化" class="headerlink" title="Vue3变化"></a>Vue3变化</h2><ol><li>用一元素上使用的<code>v-if</code>和<code>v-for</code>优先级已经更改，但<strong>不推荐</strong>同时使用二者</li><li>组件事件需要在<code>emits</code>选项中声明</li><li><code>destoryed</code> 生命周期选项被命名为 <code>unmounted</code></li><li><code>beforeDestory</code> 生命周期选项被命名为 <code>beforeUnmount</code></li><li>自定义指令API已更改为与组件生命周期一致</li><li>新增三个组件：<code>Fragment</code> 支持多个根节点、<code>Suspense</code>可以在组件渲染之前的等待时间显示指定内容、<code>Teleport</code>可以让子组件能够在视觉上跳出父组件（如父组件overflow：hidden）</li><li>新增指令<code>v-memo</code>，可以缓存html模板，比如<code>v-for</code>遍历的列表不会变化就会缓存，（内存换时间）</li><li>用<code>proxy</code>代替<code>Object.defineProperty</code>重构响应式系统，可以监听到数组下标变化，及对象新增属性，因为监听的不是对象属性，而是对象本身，还可以拦截<code>apply</code>，<code>has</code>等13种方法</li><li>重构了虚拟DOM，在编译时会将事件缓存、将<code>slot</code>编译为<code>lazy</code>函数、保存静态节点直接复用（静态提升）、以及添加静态标记、<code>Diff</code>算法使用 最长递增子序列，优化了对比流程，使得虚拟DOM生成速度提升200%</li><li>支持在<style></style>里使用v-bind，给css绑定js变量（color：v-bind（str））</li><li>新增<code>Composition API</code> 可以更好的逻辑复用和代码组织，同一功能代码聚集在一起，尽管Vue2种使用了<code>mixin</code>实现代码复用，也会存在一些问题，如方法或者属性名冲突，代码来源也不清楚</li><li>全局函数<code>set</code>和<code>delete</code>以及实例方法<code>$set</code>和<code>$delete</code>移除，基于代理的变化检测已经不再需要他们了</li><li>Vue3用TS写的，所以对TS的支持度更好</li><li>Vue3不兼容IE11</li><li>$on $off $once 实例方法已被移除</li></ol><hr><p>setup（）最先执行</p><hr><h2 id="vue-axios全局配置"><a href="#vue-axios全局配置" class="headerlink" title="vue axios全局配置"></a>vue axios全局配置</h2><ul><li>在实际项目开发中，几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题：</li></ul><ol><li>每个组件中都需要导入 axios</li><li>每次发请求都需要填写完整的请求路径</li></ol><ul><li>可以通过全局配置的方式解决上述问题：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//请求根路径</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span>  <span class="token string">'http://api.com'</span><span class="token comment">// 将axios作为全局的自定义属性，每个组件内部可以直接访问 （vue3）</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios<span class="token comment">// 将axios作为全局的自定义属性，每个组件内部可以直接访问 （vue2）</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue3变化 </tag>
            
            <tag> axios全局配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/06/11/qian-duan/typescript/"/>
      <url>/2023/06/11/qian-duan/typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="文档非官方的"><a href="#文档非官方的" class="headerlink" title="文档非官方的"></a>文档非官方的</h1><p><a href="http://ts.xcatliu.com/">TS入门</a></p><h2 id="一、快速编译运行"><a href="#一、快速编译运行" class="headerlink" title="一、快速编译运行"></a>一、快速编译运行</h2><ul><li>ts-node **.ts</li></ul><h2 id="二、枚举类型"><a href="#二、枚举类型" class="headerlink" title="二、枚举类型"></a>二、枚举类型</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> NumberType<span class="token punctuation">{</span>    one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//不赋值默认为0，以下依次递增</span>    two<span class="token punctuation">,</span>    three<span class="token punctuation">,</span>  <span class="token comment">// 可以自定义赋值</span>    four<span class="token operator">=</span><span class="token string">"four"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token comment">//计算所得项 需要放置在已经确定赋值得枚举项之前，未赋值不能放</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">.</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">.</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换成js后 <code>tsc **.ts</code>, 运行js的话 <code>node **.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> NumberType<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">NumberType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    NumberType<span class="token punctuation">[</span>NumberType<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"one"</span><span class="token punctuation">;</span>    NumberType<span class="token punctuation">[</span>NumberType<span class="token punctuation">[</span><span class="token string">"two"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"two"</span><span class="token punctuation">;</span>    NumberType<span class="token punctuation">[</span>NumberType<span class="token punctuation">[</span><span class="token string">"three"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"three"</span><span class="token punctuation">;</span>    NumberType<span class="token punctuation">[</span>NumberType<span class="token punctuation">[</span><span class="token string">"four"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"four"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NumberType <span class="token operator">||</span> <span class="token punctuation">(</span>NumberType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">.</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NumberType<span class="token punctuation">.</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型<t></t></h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// keyof 生成其键名</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getProp</span><span class="token generic class-name"><span class="token operator">&lt;</span>Type<span class="token punctuation">,</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Type<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span>Type<span class="token punctuation">,</span>key<span class="token operator">:</span>Key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">=</span><span class="token function">getProp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>phone<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//aaa</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getProp</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'toFixed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Partial-可选"><a href="#四、Partial-可选" class="headerlink" title="四、Partial 可选"></a>四、Partial 可选</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>    id<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>    children<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">PartialProps</span><span class="token operator">=</span>Partial<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token keyword">class</span> <span class="token class-name">newC</span> <span class="token keyword">implements</span> <span class="token class-name">PartialProps</span><span class="token punctuation">{</span>    id<span class="token operator">:</span><span class="token builtin">string</span> <span class="token comment">// 可选择</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、Readonly-只读"><a href="#五、Readonly-只读" class="headerlink" title="五、Readonly 只读"></a>五、Readonly 只读</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Props</span><span class="token punctuation">{</span>    id<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>    children<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">ReadonlyProps</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token keyword">let</span> propsa<span class="token operator">:</span> ReadonlyProps <span class="token operator">=</span><span class="token punctuation">{</span>    id<span class="token operator">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    children<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">// props.id='b' 错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、Pick-直选"><a href="#六、Pick-直选" class="headerlink" title="六、Pick 直选"></a>六、Pick 直选</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Propsa</span><span class="token punctuation">{</span>    id<span class="token operator">:</span><span class="token builtin">string</span>    title<span class="token operator">:</span><span class="token builtin">string</span>    children<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">type</span> <span class="token class-name">PickProps</span><span class="token operator">=</span>Pick<span class="token operator">&lt;</span>Propsa<span class="token punctuation">,</span><span class="token string">'id'</span><span class="token operator">|</span><span class="token string">'title'</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Record"><a href="#七、Record" class="headerlink" title="七、Record"></a>七、Record</h2><p>源码</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * Construct a type with a set of properties K of type T */</span><span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将K中的每个属性([P in K]),都转为T类型。常用的格式如下：<br><code>type proxyKType = Record&lt;K,T&gt;</code><br>会将K中的所有属性值都转换为T类型，并将返回的新类型返回给proxyKType，K可以是联合类型、对象、枚举等<br>eg:</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Recordobj</span><span class="token operator">=</span>Record<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token operator">|</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token keyword">let</span> Reobj<span class="token operator">:</span>Recordobj<span class="token operator">=</span><span class="token punctuation">{</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、TS中promise写法"><a href="#八、TS中promise写法" class="headerlink" title="八、TS中promise写法"></a>八、TS中promise写法</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">DataItf</span><span class="token punctuation">{</span>    a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>    b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ResItf</span><span class="token punctuation">{</span>    code<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>    data<span class="token operator">:</span> DataItf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//也可以这样写{a:number,b:number}[];</span>    message<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//promise对象 p:Promise &lt;res的类型&gt;</span><span class="token keyword">let</span> p<span class="token operator">:</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span>ResItf<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        code<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        message<span class="token operator">:</span><span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">=&gt;</span>item<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
            <tag> 泛型 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java小记_2</title>
      <link href="/2023/06/06/java/java-xiao-ji-2/"/>
      <url>/2023/06/06/java/java-xiao-ji-2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、java中s-length-和-s-length区别"><a href="#一、java中s-length-和-s-length区别" class="headerlink" title="一、java中s.length() 和 s.length区别"></a>一、java中s.length() 和 s.length区别</h2><ul><li>s.length是针对java中数组的，length是数组的一个属性，用来表示数组的长度</li><li>s.length()则是字符串的一个方法，用来返回字符串的长度的</li></ul><h2 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h2><p>代码块的顺序优先于构造器，多个类构造器相同代码可提入代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 如果加了static只会执行一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>细节</p><blockquote><ol><li>static代码块——静态代码块，随着类加载只会执行一次</li><li>类什么时候被加载【重要】<br>1）创建对象实例时候（new）<br>2）创建子类对象实例，父类也会被加载<br>3）使用类的静态成员时候（静态属性，静态方法）</li></ol></blockquote><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class CodeStatic {    public static void main(String[] args) {      //  BB bb = new BB();  (1)        System.out.println(AA.n1);// (2)    }}class AA{    public static int n1=9;    static{        System.out.println("AAAAAAAAA代码块");    }}class BB extends AA{    static {        System.out.println("BBBBBBB代码块");    }}//(1) 输出顺序//AAAAAAAAA代码块//BBBBBBB代码块//(2) 输出顺序//AAAAAAAAA代码块//9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4）创建一个对象时，在一个类调用顺序是：【重点，难点】</p><blockquote><p>1、调用静态代码块和静态属性初始化<br>2、调用普通代码块和普通属性的初始化<br>3、调用构造方法</p></blockquote></blockquote><blockquote><p>5）构造器 的最前面其实因隐藏了super() 和调用普通代码块</p></blockquote><h2 id="三、单例设计模式"><a href="#三、单例设计模式" class="headerlink" title="三、单例设计模式"></a>三、单例设计模式</h2><ol><li>采用一定的方法，在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个去的对象实例的方法</li><li>两种模式 1）饿汉式 2）懒汉式<br>二者主要区别在于创建对象<strong>时机不同</strong>，懒汉式存在线程安全问题，饿汉式存在浪费资源的可能<br>步骤如下：<blockquote><p>1）构造器私有化，防止直接new<br>2）类的内部创建对象<br>3）向外暴漏一个静态的公共方法<br>4）代码实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Single</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">GirlFriend</span> instance1 <span class="token operator">=</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GirlFriend</span> instance2 <span class="token operator">=</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2 <span class="token operator">==</span> instance1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 保障只创建一个 GirlFriend 对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> gf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GirlFriend</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GirlFriend</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> gf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//懒汉</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Single2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> cat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Cat</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="四、final关键字"><a href="#四、final关键字" class="headerlink" title="四、final关键字"></a>四、final关键字</h2><p>使用情况：</p><ol><li>不希望类被继承时</li><li>不希望父类的某个方法被子类覆盖/重写时候，但该方法可继承</li><li>不希望类中某个属性值被修改</li><li>不希望某个局部变量被修改</li></ol><ul><li>final修饰的属性一般叫常量 <code>final double a = 0;</code>定义时候必须初始化</li></ul><h2 id="五、抽象类-Abstract"><a href="#五、抽象类-Abstract" class="headerlink" title="五、抽象类 Abstract"></a>五、抽象类 Abstract</h2><p>当父类的某些方法需要声明，但又不能确定如何实现时候，可以将其声明为抽象方法，那么这个类就是抽象类</p><ol><li>抽象类不能被实例化</li><li>抽象类不一定要含有abstract方法</li><li>一旦保安了abstract方法，这个类必须声明为abstract</li><li>abstract只能修饰类和方法，不能修饰属性和其他的</li><li>抽象类可以拥有任意成员</li><li>抽象方法不能有主体 <code>abstract void aa{}</code>,即{}不应存在</li><li>如果一个类继承了抽象类，则必须实现抽象类的所有抽象方法</li></ol><h2 id="六、接口-interface"><a href="#六、接口-interface" class="headerlink" title="六、接口 interface"></a>六、接口 interface</h2><ul><li>一个类可以实现多个接口</li><li>一个接口可以继承多个接口</li></ul><h2 id="七、类的五大成员"><a href="#七、类的五大成员" class="headerlink" title="七、类的五大成员"></a>七、类的五大成员</h2><p>[属性、方法、构造器、代码块、内部类]<br>内部类还分为局部内部类（通常在方法中）、匿名内部类（无类名）</p><ul><li>局部内部类：作用域在方法或者代码块中、不能添加访问修饰符、但是可以使用final<br>外部其他类不能访问局部内部类，如果外部类和局部内部类的成员重名时候，遵循就近原则，<br>如果想访问外部类成员可以用（外部类名.this.成员）</li><li>（Anonymous匿名的）匿名内部类：同时还是一个对象，系统jdk会分配个名字<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IA</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老虎叫---"</span><span class="token punctuation">)</span>；    <span class="token punctuation">}</span><span class="token punctuation">}</span>tiger<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="八、java反编译"><a href="#八、java反编译" class="headerlink" title="八、java反编译"></a>八、java反编译</h2><p>hello.java ——&gt; hello.class   (javac编译)<br>hello.java &lt;—— hello.class   (javap反编译)</p><h2 id="九、enum-枚举类型"><a href="#九、enum-枚举类型" class="headerlink" title="九、enum 枚举类型"></a>九、enum 枚举类型</h2><p>可以这么写   实际上用 java.lang.enum</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> classname<span class="token punctuation">{</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"复苏"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>what<span class="token punctuation">;</span><span class="token comment">// what调用无参构造器，也可以写what();</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token comment">// 构造器 省略不写了就</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、注解-Annotation"><a href="#十、注解-Annotation" class="headerlink" title="十、注解 Annotation"></a>十、注解 Annotation</h2><h3 id="注解概念及应用"><a href="#注解概念及应用" class="headerlink" title="注解概念及应用"></a>注解概念及应用</h3><ol><li>注解被称为元数据，用于修饰解释包、类、方法、属性、构造器、局部变量等数据</li><li>和注释一样，注解不影响程序逻辑，但可以被编译或者运行，相当于嵌入在代码中的补充信息</li><li>在javaSE中，注解的使用简单，如 标记过时的功能、忽略警告等</li><li>在javaEE中，注解的更重要，如 【配置应用程序的任何切面，代替java EE旧版中所遗留的繁冗代码和XML配置等。】</li></ol><h3 id="三个基本注解"><a href="#三个基本注解" class="headerlink" title="三个基本注解"></a>三个基本注解</h3><ol><li>@Override ：限定某个方法，是重写父类方法，该注解只能用于方法<br>如果写了@Override 编译器会检查该方法是否真的重写了，没重写会报错！</li><li>@Deprecated: 用于表示某个程序元素（类，方法）已经过时<br>并不是不能用</li><li>@SuppressWarnings: 抑制编译器警告 （suppress-抑制）<br>@SuppressWarnings({“”})  -all所有，null 等等</li></ol><p>@interface 不是interface 是个注解类</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>修饰注解的注解</p><ol><li>Retention 指注解的作用范围</li><li>Target 指定注解可以在哪些地方使用</li><li>Documented 指定该注解是否会在Javadoc体现</li><li>Inherited 子类会继承父类注解</li></ol><h2 id="十一、java常用类"><a href="#十一、java常用类" class="headerlink" title="十一、java常用类"></a>十一、java常用类</h2><ol><li>包装类</li><li>String</li><li>StringBuffer</li><li>StringBuildr</li><li>Math</li><li>Date、Calendar、LocalDate。。</li><li>System</li><li>Arrays</li><li>BigInteger BigDecimal</li></ol><h3 id="八大wrapper类"><a href="#八大wrapper类" class="headerlink" title="八大wrapper类"></a>八大wrapper类</h3><p>boolean Boolean<br>char    Character<br>byte    Byte<br>short   Short<br>int     Integer<br>long    Long<br>float   Float<br>double  Double</p><h3 id="拆箱装箱"><a href="#拆箱装箱" class="headerlink" title="拆箱装箱"></a>拆箱装箱</h3><p>其他包装类与此类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//手动装箱 int -&gt; integer</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//手动拆箱 integer -&gt; int</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//jdk5以后可以自动装箱和拆箱</span>        <span class="token comment">//自动装箱 int -&gt; integer</span>        <span class="token class-name">Integer</span> integer2 <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">//底层用的Integer.valueOf()</span>        <span class="token comment">//自动拆箱</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> integer2<span class="token punctuation">;</span><span class="token comment">//底层用的 integer.intValue()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p><img src="/2023/06/06/java/java-xiao-ji-2/integer.png"></p><h2 id="十二、String-和-StringBuffer-和-StringBuilder"><a href="#十二、String-和-StringBuffer-和-StringBuilder" class="headerlink" title="十二、String 和 StringBuffer 和 StringBuilder"></a>十二、String 和 StringBuffer 和 StringBuilder</h2><ol><li>String 保存的是字符串常量，每次更改会改变地址</li><li>StringBuffer 保存的是字符串变量，每次更改到空间不够的时候会新增空间，之后改变地址<br>字符串缓冲区，初始为16个字符<br>StringBuffer里边有char[] value,不是每次都创建新对象</li></ol><h3 id="StringBuffer常用方法"><a href="#StringBuffer常用方法" class="headerlink" title="StringBuffer常用方法"></a>StringBuffer常用方法</h3><ol><li>增 append</li><li>删 delete（start，end）</li><li>改 replace（start，end，string）</li><li>查 indexOf 找到第一次的索引，找不到的话返回-1</li><li>插 insert</li><li>获取长度 length</li><li>stringbuffer转string  toString()方法</li></ol><h3 id="price转换案例"><a href="#price转换案例" class="headerlink" title="price转换案例"></a>price转换案例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> price<span class="token operator">=</span><span class="token string">"2123124773.50"</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> strBuff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> strBuff<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            strBuff<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strBuff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2,123,124,773.50</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ol><li>StringBuilder继承了AbstractStringBuilder</li><li>实现了 <code>Serializable</code>，说明StringBuilder对象可串行化</li><li>StringBuilder 是<code>final</code>类 不能被继承</li><li>StringBuilder 对象字符序列仍然存放在其父类的 AbstractStringBulider的 <code>char[] value</code>中</li><li>StringBuilder 的方法没有synchronized，无互斥处理</li></ol><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p><img src="/2023/06/06/java/java-xiao-ji-2/String.jpg"></p><h2 id="十三、Arrays"><a href="#十三、Arrays" class="headerlink" title="十三、Arrays"></a>十三、Arrays</h2><p>里面包含一些静态方法，用于管理或操作数组</p><ol><li>toString 返回数组字符串形式</li><li>sort 排序</li><li>binarySearch 二分法查找（必须要求排好序）<br>eg：<code>int index = Arrays.binarySearch(arr,3);</code></li><li>copyOf 数组元素的复制<br><code>Integer[] newArr = Arrays.copyOf(arr,arr.length);</code></li><li>fill 数组填充</li><li>equals 比较两个数组元素内容是否完全一致</li><li>asList 将一组值转化为list</li></ol><h2 id="十四、System类"><a href="#十四、System类" class="headerlink" title="十四、System类"></a>十四、System类</h2><ol><li>exit 退出当前程序</li><li>arraycopy 复制数据元素</li><li>currentTimeMillens 返回当前时间距离1970-1-1的毫秒数</li><li>gc 运行垃圾回收机制 System.gc();</li></ol><h2 id="十五、BigInteger和BigDecimal类"><a href="#十五、BigInteger和BigDecimal类" class="headerlink" title="十五、BigInteger和BigDecimal类"></a>十五、BigInteger和BigDecimal类</h2><ol><li>BigInteger 适合保存比较大的整型</li><li>BigDecimal 适合保存浮点数</li></ol><h2 id="十六、Date类-Calendar类"><a href="#十六、Date类-Calendar类" class="headerlink" title="十六、Date类 Calendar类"></a>十六、Date类 Calendar类</h2><h2 id="十七、Collection接口"><a href="#十七、Collection接口" class="headerlink" title="十七、Collection接口"></a>十七、Collection接口</h2><p>collection继承了Iterable接口<br><img src="/2023/06/06/java/java-xiao-ji-2/collection.png"></p><h3 id="iterator迭代器"><a href="#iterator迭代器" class="headerlink" title="iterator迭代器"></a>iterator迭代器</h3><p>获取collection的iterator遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Itera</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Collection</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"三国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"演绎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//  System.out.println(col);</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> col<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 快捷键打出 itit</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> next <span class="token operator">=</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强for遍历collection"><a href="#增强for遍历collection" class="headerlink" title="增强for遍历collection"></a>增强for遍历collection</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionFor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Collection</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"三国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        col<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"水浒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> book <span class="token operator">:</span> col<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java第二篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 增强for </tag>
            
            <tag> collection </tag>
            
            <tag> iterator遍历 </tag>
            
            <tag> 单例设计模式 </tag>
            
            <tag> 抽象类 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法篇</title>
      <link href="/2023/06/03/suan-fa-pian/"/>
      <url>/2023/06/03/suan-fa-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="算法篇"><a href="#算法篇" class="headerlink" title="算法篇"></a>算法篇</h1><h2 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h2><p>快速排序的最差时间复杂度和冒泡排序是一样的都是O(n^2)，它的平均时间复杂度为<br>O(nlog2n )，（以2为底）<br>简单理解就是递归，根据pivot每次划分的数组段，左-》中 ，右-》中 找符合条件的值再更换值，更新pivot继续 直到排序完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将数组进行划分</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 递归排序左侧子数组</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归排序右侧子数组</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// 选取pivot为左侧第一个元素</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 移动i，找到大于或等于pivot的元素</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 移动j，找到小于或等于pivot的元素</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment">// 结束循环条件</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 交换i和j位置上的元素</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>              j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 将pivot放入最终位置</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、替换空格"><a href="#二、替换空格" class="headerlink" title="二、替换空格"></a>二、替换空格</h2><p>将字符串s中每个空格替换成%20</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> str<span class="token operator">+=</span><span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    str<span class="token operator">+=</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、简单的字符串拼接"><a href="#三、简单的字符串拼接" class="headerlink" title="三、简单的字符串拼接"></a>三、简单的字符串拼接</h2><p>两个字符串 word1 和 word2 。请你从 word1 开始，通过交替添加字母来合并字符串。如果一个字符串比另一个字符串长，就将多出来的字母追加到合并后字符串的末尾。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mergeAlternately</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>i<span class="token operator">||</span>j<span class="token operator">&lt;</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">+=</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">+=</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 快排 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种小资源，网站备份，报错等笔记</title>
      <link href="/2023/06/02/gong-ju-ji-he-ji-bao-cuo/ai-ji-he-pian/"/>
      <url>/2023/06/02/gong-ju-ji-he-ji-bao-cuo/ai-ji-he-pian/</url>
      
        <content type="html"><![CDATA[<p>services.msc 打开计算机的服务</p><h1 id="一些资源链接，报错记录，文档等等"><a href="#一些资源链接，报错记录，文档等等" class="headerlink" title="一些资源链接，报错记录，文档等等"></a>一些资源链接，报错记录，文档等等</h1><p><img src="/2023/06/02/gong-ju-ji-he-ji-bao-cuo/ai-ji-he-pian/ad.jpg"></p><h2 id="一、国内-ai镜像，梯子，插件等"><a href="#一、国内-ai镜像，梯子，插件等" class="headerlink" title="一、国内 ai镜像，梯子，插件等"></a>一、国内 ai镜像，梯子，插件等</h2><ol><li><a href="https://www.npmmirror.com/package/freegpt">npm 镜像——freegpt</a></li><li><a href="https://ai-bot.cn/">AI工具集合，这个工具很多</a></li><li><a href="https://chat.forefront.ai/">需要梯子，有gpt4和3.5</a></li><li><a href="https://poe.com/GPT-4">花钱，gpt4，可试用</a></li><li><a href="https://ai.usesless.com/">还可以，积分制</a></li><li><a href="https://codeium.com/playground">coplit平体</a></li><li><a href="https://ai.kunshanyuxin.com/">3.5and4,好用</a></li></ol><h3 id="便宜的梯子订阅"><a href="#便宜的梯子订阅" class="headerlink" title="便宜的梯子订阅"></a>便宜的梯子订阅</h3><p><a href="https://feiniaoyun.top/#/dashboard">存个网址先，https://feiniaoyun.top/#/dashboard</a></p><h3 id="好用的vs插件"><a href="#好用的vs插件" class="headerlink" title="好用的vs插件"></a>好用的vs插件</h3><ol><li>Error Lens ， 在后面事实显示错误</li><li><a href="https://codeium.com/playground">Codeium,ai代码插件，类似copilot</a></li></ol><hr><h2 id="二、git-push失败原因"><a href="#二、git-push失败原因" class="headerlink" title="二、git push失败原因"></a>二、git push失败原因</h2><p>开启梯子（VPN）是为了解决网络访问被封锁或限制的问题，但是对于git push失败可能有以下几个常见原因：</p><ol><li>梯子连接不稳定：有些梯子连接质量并不稳定，导致在推送操作时出现意外中断或延迟。</li><li>仓库地址错误：如果使用了错误的仓库地址，那么即使使用梯子也无法推送成功。</li><li>SSH配置错误：如果使用SSH协议进行push操作，在梯子环境下需要将SSH协议的代理设置正确。可以通过在本地<code>.ssh/config</code>文件中增加如下内容进行设置：<pre class="line-numbers language-none"><code class="language-none">Host *   ProxyCommand /usr/local/bin/connect-proxy -H 127.0.0.1:1080 %h %p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>Git协议：默认情况下Git使用的是Git协议（git://），而这种协议默认使用端口9418，在一些网络环境下该端口被屏蔽，所以需要切换到HTTPS协议推送。</li></ol><h2 id="三、blog文章太多-分类创建命令"><a href="#三、blog文章太多-分类创建命令" class="headerlink" title="三、blog文章太多 分类创建命令"></a>三、blog文章太多 分类创建命令</h2><p><code>hexo new post -p /后端/test.md</code></p><hr><h2 id="四、免费壁纸下载推荐-及-免费软件"><a href="#四、免费壁纸下载推荐-及-免费软件" class="headerlink" title="四、免费壁纸下载推荐 及 免费软件"></a>四、免费壁纸下载推荐 及 免费软件</h2><ol><li>Unsplash（<a href="https://unsplash.com/%EF%BC%89-">https://unsplash.com/）-</a> 提供高质量的免费照片和壁纸，每日更新。</li><li>Pexels（<a href="https://www.pexels.com/%EF%BC%89-">https://www.pexels.com/）-</a> 提供高质量的免费照片和壁纸，覆盖各种主题和风格。</li><li>Pixabay（<a href="https://pixabay.com/%EF%BC%89-">https://pixabay.com/）-</a> 提供免费的高清图片和壁纸，包括照片、插图和矢量图。</li><li>Wallpaper Abyss（<a href="https://wall.alphacoders.com/%EF%BC%89-">https://wall.alphacoders.com/）-</a> 提供大量高清壁纸，包括电影、游戏、动漫等各种分类。</li><li>WallpaperCave（<a href="https://wallpapercave.com/%EF%BC%89-">https://wallpapercave.com/）-</a> 提供各种类型的高清壁纸，包括自然风景、艺术、抽象等。</li><li><a href="https://hdqwalls.com/wallpaper/3840x2160/hogwarts-legacy-8k">https://hdqwalls.com/wallpaper/3840x2160/hogwarts-legacy-8k</a></li></ol><ul><li><a href="https://www.fuzhugou.com/">https://www.fuzhugou.com/</a>  免费软件——大神推荐的</li></ul><hr><h2 id="五、CS自学指南"><a href="#五、CS自学指南" class="headerlink" title="五、CS自学指南"></a>五、CS自学指南</h2><p><a href="https://csdiy.wiki/">https://csdiy.wiki/</a></p><h2 id="六、一些转换工具，简历模板，证件照制作等等"><a href="#六、一些转换工具，简历模板，证件照制作等等" class="headerlink" title="六、一些转换工具，简历模板，证件照制作等等"></a>六、一些转换工具，简历模板，证件照制作等等</h2><h3 id="1-浏览器内搜索，pdf等各种转换"><a href="#1-浏览器内搜索，pdf等各种转换" class="headerlink" title="1.浏览器内搜索，pdf等各种转换"></a>1.浏览器内搜索，pdf等各种转换</h3><p>ctrl+f<br><img src="/2023/06/02/gong-ju-ji-he-ji-bao-cuo/ai-ji-he-pian/image.png" alt="浏览器插件，搜图中名字就ok"></p><h3 id="2-简历模板-，制作证件照-换底色"><a href="#2-简历模板-，制作证件照-换底色" class="headerlink" title="2.简历模板 ，制作证件照,换底色"></a>2.简历模板 ，制作证件照,换底色</h3><p><a href="https://www.resumeis.com/edit?id=62bdbfbf9d1c7150ff3ae5f2">简历模板，可直接导出:https://www.resumeis.com/edit?id=62bdbfbf9d1c7150ff3ae5f2</a><br><a href="https://id-photo.cn/">制作证件照,换底色：https://id-photo.cn/</a></p><h3 id="3-娱乐游戏-单机等网址"><a href="#3-娱乐游戏-单机等网址" class="headerlink" title="3.娱乐游戏 单机等网址"></a>3.娱乐游戏 单机等网址</h3><p><a href="https://www.ali213.net/">游侠网：https://www.ali213.net/</a><br><a href="https://www.3dmgame.com/">3DM:https://www.3dmgame.com/</a></p><h3 id="4-程序员开发工具"><a href="#4-程序员开发工具" class="headerlink" title="4.程序员开发工具"></a>4.程序员开发工具</h3><p><a href="https://tooltt.com/">格式转换</a></p><hr><h2 id="七、前端相关文档"><a href="#七、前端相关文档" class="headerlink" title="七、前端相关文档"></a>七、前端相关文档</h2><ol><li><a href="https://cn.vuejs.org/guide/introduction">Vue官方文档</a></li><li><a href="http://ts.xcatliu.com/">TS书籍文档，非官方</a></li><li><a href="https://developer.mozilla.org/zh-CN/">MDN_js</a></li><li><a href="https://animate.style/">animate_css动画库</a></li><li><a href="https://zh-hans.react.dev/">React文档</a></li><li><a href="https://www.bootcdn.cn/">CDN</a></li><li><a href="https://router.vuejs.org/zh/guide/">Vue-Router</a></li><li><a href="https://pinia.vuejs.org/zh/api/">Pinia</a></li><li><a href="https://webpack.js.org/">Webpack</a></li><li><a href="https://vitejs.dev/">Vite</a></li><li><a href="https://www.iconfont.cn/">iconfont</a></li><li><a href="https://cn-vuejs-challenges.netlify.app/">Vue.js在线挑战通关</a></li><li><a href="https://uniapp.dcloud.net.cn/">uni-app</a></li><li><a href="https://www.yuque.com/fechaichai/qeamqf/xbai87">react基础-router-Mobx-redux-zustand 文档博客</a></li></ol><h3 id="在线颜色习惯，获取16进制"><a href="#在线颜色习惯，获取16进制" class="headerlink" title="在线颜色习惯，获取16进制"></a>在线颜色习惯，获取16进制</h3><p><a href="https://photokit.com/colors/eyedropper/?lang=zh">https://photokit.com/colors/eyedropper/?lang=zh</a></p><hr><h2 id="八、Linux"><a href="#八、Linux" class="headerlink" title="八、Linux"></a>八、Linux</h2><ol><li><a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/index.html">鸟哥的私房菜——书</a></li><li><a href="https://www.kernel.org/">The Linux Kernel Archives</a></li></ol><hr><h2 id="九、HarmonyOS-Developer"><a href="#九、HarmonyOS-Developer" class="headerlink" title="九、HarmonyOS Developer"></a>九、HarmonyOS Developer</h2><p><a href="https://developer.harmonyos.com/">https://developer.harmonyos.com/</a></p><hr><h2 id="十、申请证书-ssl-tls"><a href="#十、申请证书-ssl-tls" class="headerlink" title="十、申请证书 ssl tls"></a>十、申请证书 ssl tls</h2><h2 id="https-letsencrypt-org-zh-cn-freessl-https-freessl-org-cloudflare-https-www-cloudflare-com-zh-cn"><a href="#https-letsencrypt-org-zh-cn-freessl-https-freessl-org-cloudflare-https-www-cloudflare-com-zh-cn" class="headerlink" title="https://letsencrypt.org/zh-cn/freessl:https://freessl.org/cloudflare:https://www.cloudflare.com/zh-cn/"></a><a href="https://letsencrypt.org/zh-cn/">https://letsencrypt.org/zh-cn/</a><br><a href="https://freessl.org/">freessl:https://freessl.org/</a><br><a href="https://www.cloudflare.com/zh-cn/">cloudflare:https://www.cloudflare.com/zh-cn/</a></h2><h2 id="十一、zpxx-nefu"><a href="#十一、zpxx-nefu" class="headerlink" title="十一、zpxx_nefu"></a>十一、zpxx_nefu</h2><p><a href="https://ipb8bic1pz.feishu.cn/docx/UE3QdRaVEozJ9cxTFjFcA5Jcnvd">https://ipb8bic1pz.feishu.cn/docx/UE3QdRaVEozJ9cxTFjFcA5Jcnvd</a></p><h2 id="十二、实习老师的笔记"><a href="#十二、实习老师的笔记" class="headerlink" title="十二、实习老师的笔记"></a>十二、实习老师的笔记</h2><p><a href="https://jshand.gitee.io/#/README">内容挺全的：https://jshand.gitee.io/#/README</a></p><hr><h2 id="十三、后端JAVA"><a href="#十三、后端JAVA" class="headerlink" title="十三、后端JAVA"></a>十三、后端JAVA</h2><p><a href="https://www.bilibili.com/read/cv5216534">https://www.bilibili.com/read/cv5216534</a><br><img src="/2023/06/02/gong-ju-ji-he-ji-bao-cuo/ai-ji-he-pian/Java_learn.png" alt="java学习路线"></p><p><a href="https://pdai.tech/md/resource/tools.html">java全栈知识体系：https://pdai.tech/md/resource/tools.html</a></p><hr><ul><li>涤尘 <a href="https://zhutix.com/">https://zhutix.com/</a></li><li>FireWin  <a href="https://github.com/FWGritTop/node_frontback_2307/tree/main/%E7%AC%94%E8%AE%B02">https://github.com/FWGritTop/node_frontback_2307/tree/main/%E7%AC%94%E8%AE%B02</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源整合 </tag>
            
            <tag> chatgpt </tag>
            
            <tag> ai工具 </tag>
            
            <tag> 插件 </tag>
            
            <tag> git push失败原因及解决 </tag>
            
            <tag> cs自学 </tag>
            
            <tag> 证件照 </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2023/06/02/qian-duan/webpack/"/>
      <url>/2023/06/02/qian-duan/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>整理一下webpack的基础知识吧，具体看右侧TOC</p><h2 id="Webpack五大核心概念"><a href="#Webpack五大核心概念" class="headerlink" title="Webpack五大核心概念"></a>Webpack五大核心概念</h2><ol><li>entry(入口)：指示Webpack从哪个文件开始打包</li><li>output(输出)：指示Webpack打包完文件输出到哪，如何命名等</li><li>loader（加载器）Webpack本身只能处理js、json等资源，其他资源需要借助loader,Webpack才能解析</li><li>plugins(插件) 扩展Webpack功能</li><li>mode（模式）：开发模式development 和 生产模式production</li></ol><h3 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h3><p>打开终端，来到项目根目录。运行以下指令：</p><ul><li><p>初始化package.json<br><code>npm init -y</code><br>此时会生成一个基础的 <code>package.json</code> 文件。<br>需要注意的是 package.json 中 name 字段不能叫做 webpack, 否则下一步会报错</p></li><li><p>下载依赖<br><code>npm i webpack webpack-cli -D</code></p></li></ul><h3 id="启用-Webpack"><a href="#启用-Webpack" class="headerlink" title="启用 Webpack"></a>启用 Webpack</h3><ul><li>开发模式<br><code>npx webpack ./src/main.js --mode=development</code></li><li>生产模式<br><code>npx webpack ./src/main.js --mode=production</code><br><code>npx webpack</code>: 是用来运行本地安装 Webpack 包的。<br><code>./src/main.js</code>: 指定 Webpack 从 main.js 文件开始打包，不但会打包 main.js，还会将其依赖也一起打包进来。<br><code>--mode=xxx</code>：指定模式（环境）。</li></ul><p>位置：会生成在dist目录下</p><h3 id="准备-Webpack-配置文件"><a href="#准备-Webpack-配置文件" class="headerlink" title="准备 Webpack 配置文件"></a>准备 Webpack 配置文件</h3><p>在项目根目录下新建文件：<code>webpack.config.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//node.js核心模块，处理路径问题</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// 入口</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>    <span class="token comment">// 输出</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 入口文件输出文件名</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"js/main.js"</span><span class="token punctuation">,</span>        <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 自动将上次打包目录资源清空</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 加载器</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment">// loader配置</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 插件</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 模式</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Webpack</code> 是基于<code> Node.js</code> 运行的，所以采用 <code>Common.js</code> 模块化规范<br><code>npx webpack</code>即可运行</p><h2 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h2><p>Webpack如何处理Css、Less、Sass、Styl<br><a href="https://webpack.js.org/loaders/">webpack官方文档</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加载器 webpack.config.js中</span>   <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">{</span>               <span class="token comment">// loader配置</span>               <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//正则匹配只检测.css文件</span>               <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                   <span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token comment">// 将js中css通过创建style标签在html中生效</span>                   <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token comment">//css资源编译成common.js模块到js中</span>               <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 执行顺序 从下到上</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span>              <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span> <span class="token punctuation">,</span>              <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                   <span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token comment">// 将js中css通过创建style标签在html中生效</span>                   <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token comment">//css资源编译成common.js模块到js中</span>                   <span class="token string">"less-loader"</span><span class="token punctuation">,</span> <span class="token comment">//将less编译成css</span>               <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 执行顺序 从下到上</span>           <span class="token punctuation">}</span>       <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sass和less配置都类似 看官方下载个loader就行</p><h2 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h2><ul><li>Webpack4 时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理</li><li>Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js-&gt;module-&gt;rules中</span><span class="token punctuation">{</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                <span class="token comment">// 优点：减少请求数量</span>                <span class="token comment">// 缺点：体积变得更大</span>                <span class="token comment">// 图片资源优化</span>                <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">//将小于某个大小的图片转化成 data URI 形式（Base64 格式）</span>                    <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 小于10kb的图片会被base64处理</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">// 输出图片名称</span>                    <span class="token comment">// [hash:10]hash值取前面10位</span>                    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/images/[hash:10][ext][query]"</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="处理js资源"><a href="#处理js资源" class="headerlink" title="处理js资源"></a>处理js资源</h2><p>Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在 IE 等浏览器运行，需要做一些兼容性处理。</p><ul><li>针对 js 兼容性处理，我们使用 Babel 来完成</li><li>针对代码格式，我们使用 Eslint 来完成</li></ul><h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><p>可组装的 JavaScript 和 JSX 检查工具。<br>这句话意思就是：它是用来检测 js 和 jsx 语法的工具，可以配置各项功能<br>我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</p><h4 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><p>配置文件由很多种写法：</p><blockquote><p><code>.eslintrc.*</code>：新建文件，位于项目根目录<br><code>.eslintrc</code><br><code>.eslintrc.js</code><br><code>.eslintrc.json</code><br>区别在于配置格式不一样<br><code>package.json</code> 中 <code>eslintConfig</code>：不需要创建文件，在原有文件基础上写<br>ESLint 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p></blockquote><h4 id="2、具体配置"><a href="#2、具体配置" class="headerlink" title="2、具体配置"></a>2、具体配置</h4><p><code>.eslintrc.js</code>,以下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 解析选项</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// ES 语法版本</span>        <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token comment">// ES 模块化</span>        <span class="token literal-property property">ecmaFeatures</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// ES 其他特性</span>            <span class="token literal-property property">jsx</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 如果是 React 项目，就需要开启 jsx 语法</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 具体检查规则</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token comment">// 禁止使用分号</span>        <span class="token string-property property">'array-callback-return'</span><span class="token operator">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token comment">// 强制数组方法的回调函数中有 return 语句，否则警告</span>        <span class="token string-property property">'default-case'</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token comment">// 要求 switch 语句中有 default 分支，否则警告</span>            <span class="token punctuation">{</span> <span class="token literal-property property">commentPattern</span><span class="token operator">:</span> <span class="token string">'^no default$'</span> <span class="token punctuation">}</span> <span class="token comment">// 允许在最后注释 no default, 就不会有警告了</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">eqeqeq</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">'warn'</span><span class="token punctuation">,</span> <span class="token comment">// 强制使用 === 和 !==，否则警告</span>            <span class="token string">'smart'</span> <span class="token comment">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 继承其他规则</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>rules中具体规则</p><blockquote><p><code>"off"</code> 或 <code>0</code> - 关闭规则<br><code>"warn"</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)<br><code>"error"</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</p></blockquote></li><li><p>extends 继承<br>个人感觉还是继承方便，重写rules难受~~</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例如在React项目中，我们可以这样写配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react-app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 我们的规则会覆盖掉react-app的规则</span>    <span class="token comment">// 所以想要修改规则直接改就是了</span>    <span class="token literal-property property">eqeqeq</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"warn"</span><span class="token punctuation">,</span> <span class="token string">"smart"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3、在-Webpack-中使用eslint"><a href="#3、在-Webpack-中使用eslint" class="headerlink" title="3、在 Webpack 中使用eslint"></a>3、在 Webpack 中使用eslint</h4><ol><li>老规矩，没有的得先下载<br><code>npm i eslint-webpack-plugin eslint -D</code></li><li>定义 Eslint 配置文件</li></ol><ul><li><p><code>.eslintrc.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 继承 Eslint 规则</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint:recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用node中全局变量</span>    <span class="token literal-property property">browser</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用浏览器中全局变量</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string-property property">"no-var"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 不能使用 var 定义变量</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得要在main.js导入</p></li><li><p><code>webpack.config.js</code> 中写入 <code>ESLintWebpackPlugin</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ESLintWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/js/main.js"</span><span class="token punctuation">,</span> <span class="token comment">// 将 js 文件输出到 static/js 目录中</span>    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 自动将上次打包目录资源清空</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token comment">// 用来匹配 .css 结尾的文件</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token comment">// use 数组里面 Loader 执行顺序是从右到左</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"less-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.s[ac]ss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"sass-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.styl$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span> <span class="token string">"stylus-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|webp)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">// 小于10kb的图片会被base64处理</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token comment">// 将图片文件输出到 static/imgs 目录中</span>          <span class="token comment">// 将图片文件命名 [hash:8][ext][query]</span>          <span class="token comment">// [hash:8]: hash值取8位</span>          <span class="token comment">// [ext]: 使用之前的文件扩展名</span>          <span class="token comment">// [query]: 添加之前的query参数</span>          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/imgs/[hash:8][ext][query]"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(ttf|woff2?)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/media/[hash:8][ext][query]"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 指定检查文件的根目录</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中,像es6-&gt;es5</p><h4 id="1、配置文件-1"><a href="#1、配置文件-1" class="headerlink" title="1、配置文件"></a>1、配置文件</h4><p>配置文件由很多种写法：</p><ul><li><code>babel.config.*</code>：新建文件，位于项目根目录<br><code>babel.config.js</code><br><code>babel.config.json</code></li><li><code>.babelrc.*</code>：新建文件，位于项目根目录<br><code>.babelrc</code><br><code>.babelrc.js</code><br><code>.babelrc.json</code></li><li><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写<br>Babel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</li></ul><h4 id="2、具体配置-1"><a href="#2、具体配置-1" class="headerlink" title="2、具体配置"></a>2、具体配置</h4><p><code>babel.config.js</code>为例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//预设</span>  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>presets 预设<br>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><code>@babel/preset-env</code>: 一个智能预设，允许使用最新的 JavaScript。</li><li><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</li><li><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</li></ul><h4 id="3、在-Webpack-中使用"><a href="#3、在-Webpack-中使用" class="headerlink" title="3、在 Webpack 中使用"></a>3、在 Webpack 中使用</h4><ol><li>先下载<br><code>npm i babel-loader @babel/core @babel/preset-env -D</code></li><li>定义 Babel 配置文件,如上代码块<br><code>webpack.config.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//在module-&gt;rules数组里面加上</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除node_modules代码不编译</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>npx webpack 打包<br>打开打包后的 <code>dist/static/js/main.js</code> 文件查看，会发现箭头函数等 ES6 语法已经转换了</li></ol><h2 id="处理-Html-资源"><a href="#处理-Html-资源" class="headerlink" title="处理 Html 资源"></a>处理 Html 资源</h2><ol><li>下载包<br><code>npm i html-webpack-plugin -D</code></li><li>配置<code>webpack.config.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 加上</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//plugins数组中加入</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 以 public/index.html 为模板创建文件</span>      <span class="token comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改 public中的index.html<br>去掉引入的 js 文件，因为 HtmlWebpackPlugin 会自动引入</li><li>运行<code>npx webpack</code><br>此时 dist 目录就会输出一个 index.html 文件</li></ol><h2 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器&amp;自动化</h2><p>自动编译代码，无需手动输入指令</p><ol><li>下载<code>npm i webpack-dev-server -D</code></li><li>配置<code>webpack.config.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// plugins中</span><span class="token comment">// 开发服务器</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token comment">// 启动服务器域名</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">"3000"</span><span class="token punctuation">,</span> <span class="token comment">// 启动服务器端口号</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否自动打开浏览器</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>npx webpack serve</code></li></ol><h2 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h2><p>生产模式是开发完成代码后，我们需要得到代码将来部署上线。<br>上线肯定就要性能好，性能好就要优化<br>优化主要从两个角度出发:</p><ol><li>优化代码运行性能</li><li>优化代码打包速度</li></ol><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p>这个有篇文章vue项目总结里面有项目实例…</p><pre class="line-numbers language-none"><code class="language-none">├── webpack-test (项目根目录)    ├── config (Webpack配置文件目录)    │    ├── webpack.dev.js(开发模式配置文件)    │    └── webpack.prod.js(生产模式配置文件)    ├── node_modules (下载包存放目录)    ├── src (项目源码目录，除了html其他都在src里面)    │    └── 略    ├── public (项目html文件)    │    └── index.html    ├── .eslintrc.js(Eslint配置文件)    ├── babel.config.js(Babel配置文件)    └── package.json (包的依赖管理配置文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-webpack-dev-js"><a href="#修改-webpack-dev-js" class="headerlink" title="修改 webpack.dev.js"></a>修改 webpack.dev.js</h3><p>rules 我清楚了 看着方便，主要改动 目录变化 路径退回上一层<br>运行开发模式指令<br><code>npx webpack serve --config ./config/webpack.dev.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ESLintWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 开发模式没有输出，不需要指定输出目录</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/js/main.js"</span><span class="token punctuation">,</span> <span class="token comment">// 将 js 文件输出到 static/js 目录中</span>    <span class="token comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 指定检查文件的根目录</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 以 public/index.html 为模板创建文件</span>      <span class="token comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../public/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-webpack-prod-js"><a href="#修改-webpack-prod-js" class="headerlink" title="修改 webpack.prod.js"></a>修改 webpack.prod.js</h3><p>可以 对比以下开发模式的配置<br>运行上线模式的指令：<br><code>npx webpack --config ./config/webpack.prod.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ESLintWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 生产模式需要输出</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"static/js/main.js"</span><span class="token punctuation">,</span> <span class="token comment">// 将 js 文件输出到 static/js 目录中</span>    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ESLintWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../public/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"production"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置运行指令"><a href="#配置运行指令" class="headerlink" title="配置运行指令"></a>配置运行指令</h3><p>开发vue项目时候都习惯了npm …的脚本命令<br>像直接<code>npm run build</code>打包<br>为了方便运行不同模式的指令，我们将指令定义在 package.json 中 scripts 里面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// package.json</span><span class="token punctuation">{</span>  <span class="token comment">// 其他省略</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm run dev"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"npx webpack serve --config ./config/webpack.dev.js"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"npx webpack --config ./config/webpack.prod.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://yk2012.github.io/sgg_webpack5/project/">webpack项目配置及一些高级知识</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Webpack5 </tag>
            
            <tag> webpack.config.js </tag>
            
            <tag> webpack生产/开发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java小记_1</title>
      <link href="/2023/05/30/java/java-xiao-ji-1/"/>
      <url>/2023/05/30/java/java-xiao-ji-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="一、java重要特点"><a href="#一、java重要特点" class="headerlink" title="一、java重要特点"></a>一、java重要特点</h2><ol><li>oop</li><li>Java语言健壮性，强类型机制、异常处理、垃圾的自动回收</li><li>跨平台</li><li>解释性的   还有JavaScript，php  （编译性语言c、c++编译后直接执行）</li></ol><h2 id="二、JDK-JRE-JVM关系"><a href="#二、JDK-JRE-JVM关系" class="headerlink" title="二、JDK JRE JVM关系"></a>二、JDK JRE JVM关系</h2><ol><li>JDK = JRE + 开发工具集</li><li>JRE = JVM + Java SE标准类库</li><li>JDK = JVM + Java SE标准类库 + 开发工具集</li></ol><h2 id="三、java文档"><a href="#三、java文档" class="headerlink" title="三、java文档"></a>三、java文档</h2><p><img src="/2023/05/30/java/java-xiao-ji-1/first.png"><br><a href="https://www.matools.com/api/java8">java在线api</a></p><h2 id="四、java字符类型本质"><a href="#四、java字符类型本质" class="headerlink" title="四、java字符类型本质"></a>四、java字符类型本质</h2><p>字符型<br>存储: ‘a’==&gt;码值97==&gt;二进制（110 0001）==&gt; 存储<br>读取: 二进制==&gt;码值==&gt;’a’</p><h2 id="五、基本数据类型转换"><a href="#五、基本数据类型转换" class="headerlink" title="五、基本数据类型转换"></a>五、基本数据类型转换</h2><ol><li>有多种类型的数据混合运算时，系统自动转成容量最大的数据类型再计算</li><li>把精度大的数据赋值给精度小的数据类型时，会报错，反之自动转换类型</li><li>（byte，short）和char之间不会自动转换，他们三者可以计算，计算时候转成int类型</li><li>Boolean 不参与转换</li><li>自动提升，表达式结果类型自动提升为操作数中最大的类型</li></ol><h2 id="六、java递归迷宫问题"><a href="#六、java递归迷宫问题" class="headerlink" title="六、java递归迷宫问题"></a>六、java递归迷宫问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">new_java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiGong</span> <span class="token punctuation">{</span><span class="token comment">// 迷宫问题</span><span class="token comment">// 建立迷宫 二维数组 规定map数组0可走1障碍物</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 设计迷宫四周的墙</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//map[3][1] = 1;</span><span class="token comment">//map[3][2] = 1;</span><span class="token comment">// 当前地图输出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===当前地图情况==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 开始找路(i,j)初始位置</span><span class="token class-name">T</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===找完看==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token punctuation">{</span><span class="token comment">// 递归思想解决老鼠出迷宫问题</span><span class="token comment">// 1.findWay 找迷宫路径 找到返回true 否则false</span><span class="token comment">// 2.map迷宫，i,j初始位置</span><span class="token comment">// 3. 0可以走 1障碍物 2可以走 3表示走过</span><span class="token comment">// 4. map[6][5]=2表示找到通路可以结束，否则继续找</span><span class="token comment">// 5.老鼠找路策略 下-&gt;右-&gt;上-&gt;左</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// System.out.println(i);</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 找到了</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 下</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 右</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 上</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">findWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 左</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、方法重载（OverLoad）"><a href="#七、方法重载（OverLoad）" class="headerlink" title="七、方法重载（OverLoad）"></a>七、方法重载（OverLoad）</h2><p><strong>同一个类中，多个同名方法，参数不同</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCalculator</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">double</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">,</span> <span class="token keyword">int</span> n3<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、可变参数"><a href="#八、可变参数" class="headerlink" title="八、可变参数"></a>八、可变参数</h2><p><strong>可变参数使用</strong><br>有点类似传个数组，实参可以是0个活任意多个，也可以是数组<br>如果里边有普通参数和可变参数，可变参数必须放在最后 eg:<code>(int i, int... nums)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoad</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">MyCalculator</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyCalculator</span> <span class="token punctuation">{</span><span class="token comment">// 可变参数</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收参数个数："</span> <span class="token operator">+</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、对象创建流程分析-※"><a href="#九、对象创建流程分析-※" class="headerlink" title="九、对象创建流程分析  ※"></a>九、对象创建流程分析  ※</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//构造函数、构造器</span>        name<span class="token operator">=</span>n<span class="token punctuation">;</span>        age<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token char">'小明'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程分析（面试题）</strong></p><ol><li>加载Person类信息,只会加载一次</li><li>在堆中分配空间(地址)</li><li>完成对象初始化<br>3.1 默认初始化 age=0,name=null<br>3.2 显示初始化 age=90,name=null<br>3.3 构造器初始化 age=20,name=90</li></ol><h2 id="十、IDEA的使用"><a href="#十、IDEA的使用" class="headerlink" title="十、IDEA的使用"></a>十、IDEA的使用</h2><h3 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h3><p>每个人使用习惯不一样，可自己更改设置，以下也非默认</p><ul><li><p>Ctrl+d 删除一行 （可以自己设置的，setting-》keymap中）</p></li><li><p>Ctrl+Alt+向下箭头 复制当前行</p></li><li><p>Alt+/ 不全代码 方便</p></li><li><p>Ctrl+/ 注释</p></li><li><p>Alt+enter 自动导入 需要先设置 setting-&gt;genergl-&gt;auto import</p></li><li><p>Alt+R 自动运行项目</p></li><li><p>Ctrl+Alt+L 格式化代码</p></li><li><p>Alt+insert 生成构造器，加快开发效率（部分笔记本需要＋fn，关闭即可）</p></li><li><p>Ctrl+H 查看类的继承关系</p></li><li><p>Ctrl+B 和Ctrl+鼠标左键 一样定位方法</p></li><li><p>var 自动分配变量名   <code>new Scanner(System.in).var</code> -&gt; <code>Scanner scanner = new Scanner(System.in);</code></p></li></ul><h3 id="IDEA模板代码"><a href="#IDEA模板代码" class="headerlink" title="IDEA模板代码"></a>IDEA模板代码</h3><p>setting -&gt; Live Templates 自行设置更改</p><h2 id="十一、包命名"><a href="#十一、包命名" class="headerlink" title="十一、包命名"></a>十一、包命名</h2><p>命名规则：<strong>只能包含数字、字母、下划线、小圆点，</strong>不能是数字开头，不能是关键字或者保留字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span>exec1 <span class="token comment">//不行class关键字</span>demo<span class="token punctuation">.</span><span class="token number">12</span>a <span class="token comment">//12数字开头不行</span>demo<span class="token punctuation">.</span>ab12<span class="token punctuation">.</span>aa <span class="token comment">// 对</span><span class="token comment">//___________________正常</span>com<span class="token punctuation">.</span>公司名<span class="token punctuation">.</span>项目名<span class="token punctuation">.</span>业务模块名<span class="token comment">//例如</span>com<span class="token punctuation">.</span>lhledu<span class="token punctuation">.</span>oa<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用的个包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>*  <span class="token comment">//lang包基本包，默认引入</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>* <span class="token comment">//util系统提供的工具包，工具类 scanner</span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>* <span class="token comment">//网络包，网络开发</span>java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>* <span class="token comment">//做java的开发界面，GUI</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、super关键字"><a href="#十二、super关键字" class="headerlink" title="十二、super关键字"></a>十二、super关键字</h2><p>主要访问父类的东西,不能访问private修饰的<br>super.熟悉  super.方法<br>访问父类构造器 super（参数列表），<strong>只能放在第一句</strong></p><h2 id="十三、方法重写"><a href="#十三、方法重写" class="headerlink" title="十三、方法重写"></a>十三、方法重写</h2><ul><li>方法覆盖（重写）就是子类有一个方法，和父类某个方法的名称、返回类型、参数一样<br>且访问权限子类不能小于父类</li></ul><h2 id="十四、多态"><a href="#十四、多态" class="headerlink" title="十四、多态"></a>十四、多态</h2><ul><li>重写和重载都是多态的一种体现</li><li>方法多态 （没啥好说的了 简单例子sum（1，2），sum(1,2,3)</li><li>对象多态：<blockquote><p>1）一个对象的编译类型和运行类型可以不一致<br>2）编译类型在定义对象时，就可以确定了，不能改变<br>3）运行类型是可以变化的<br>4）编译类型看定义时 =号 的左边， 运行类型看 =号 右边</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 例如 Animal 是 Dog 和 Cat的父类</span><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//animal编译类型 是Animal，运行类型是Dog</span>animal<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小狗汪汪叫</span>animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小猫喵喵喵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="向上转型和向下转型"><a href="#向上转型和向下转型" class="headerlink" title="向上转型和向下转型"></a>向上转型和向下转型</h3><p>向下：</p><ul><li>子类类型  引用名 = （子类类型） <strong>父类引用</strong></li><li>只能强转父类的引用，不能强转父类对象</li><li>要求父类的引用必须指向的是当前目标类型的对象</li><li>向下转型后，可以调用子类对象中所有的成员<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> cat <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span> <span class="token comment">//编译类型是Cat 运行类型 Cat</span>cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果再写 Dog dog = (Dog) animal; 报错，可以按照以下理解</span><span class="token comment">// 有两个 cat 和 animal 都指向一个内存  如果再将animal转换成dog 会出现猫是狗的错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十五、属性重写问题"><a href="#十五、属性重写问题" class="headerlink" title="十五、属性重写问题"></a>十五、属性重写问题</h2><p>属性没有重写的说法，属性的值看编译类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Base</span> base<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span>  <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十六、instanceof-可以判断运行类型"><a href="#十六、instanceof-可以判断运行类型" class="headerlink" title="十六、instanceof 可以判断运行类型"></a>十六、instanceof 可以判断运行类型</h2><p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</p><ul><li>左边的对象实例不能是基础数据类型</li><li>左边的对象实例和右边的类不在同一个继承树上</li><li>null用instanceof跟任何类型比较时都是false<br>eg： <code>aa instanceof AA</code></li></ul><h2 id="十七、多态数组-——-instanceof-配合向下转型"><a href="#十七、多态数组-——-instanceof-配合向下转型" class="headerlink" title="十七、多态数组  ——  instanceof 配合向下转型"></a>十七、多态数组  ——  instanceof 配合向下转型</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Person父类， Student，Teacher子类 下面是巧妙运用</span><span class="token class-name">Person</span> persons<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>persons<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>person<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正常person[i].study(); 输出不了</span><span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//判断运行类型</span><span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//向下转型</span>student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span><span class="token punctuation">)</span>person<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>teacher<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类型有误"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十八、属性看编译时类型，方法看运行时类型"><a href="#十八、属性看编译时类型，方法看运行时类型" class="headerlink" title="十八、属性看编译时类型，方法看运行时类型"></a>十八、属性看编译时类型，方法看运行时类型</h2><p>多态挺有意思的  看=左右侧具体判断吧</p><h2 id="十九、动态绑定机制-重要"><a href="#十九、动态绑定机制-重要" class="headerlink" title="十九、动态绑定机制_重要"></a>十九、动态绑定机制_重要</h2><p><img src="/2023/05/30/java/java-xiao-ji-1/duotai.jpg"><br>主要看运行类型<br>找不到方法时候向父级找<br>js原型链能搞懂这个也能</p><h2 id="二十、hashCode"><a href="#二十、hashCode" class="headerlink" title="二十、hashCode"></a>二十、hashCode</h2><ol><li>提高哈希结构容器效率</li><li>两个引用，如果指向同一个对象，hash值一样</li><li>两个引用，如果指向的是不同对象，hash值不一样</li><li>hash值主要根据地址号来的，不能完全等价于地址</li></ol><h2 id="二十一、finalize-垃圾回收机制"><a href="#二十一、finalize-垃圾回收机制" class="headerlink" title="二十一、finalize 垃圾回收机制"></a>二十一、finalize 垃圾回收机制</h2><ol><li>当对象被回收时，系统自动调用该对象的finalize方法，子类可以重写该方法，做释放资源的操作</li><li>什么时候被回收，当某个对象没有任何引用时，则JVM认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁该对象，在销毁对象前，先调用finalize方法</li><li>垃圾回收机制的调用，由系统来决定，也可以通过System.gc()主动触发回收机制<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Car</span> bmw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"宝马"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bmw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 这时 car对象是一个垃圾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="二十二、断点调试-必备技能"><a href="#二十二、断点调试-必备技能" class="headerlink" title="二十二、断点调试 必备技能"></a>二十二、断点调试 必备技能</h2><ul><li>断点调试过程中，是运行状态，是以对象的 运行类型 执行的</li></ul><p>介绍：</p><ol><li>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行既显示错误，停下。</li><li>程序员必备</li><li>断点调试能帮我们查看java底层源代码的执行过程，提高程序员水平</li></ol><ul><li>F7（跳入） shift+F8（跳过，下一步） F9（resume，执行下一个断点）</li></ul><h2 id="二十三、类变量"><a href="#二十三、类变量" class="headerlink" title="二十三、类变量"></a>二十三、类变量</h2><p>static修饰的变量 在静态方法区域（具体在哪和版本有关系） 所有类共享，一个改变另一个也变</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Lt</span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Lt</span> l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Lt.count++; static修饰的可以用类名调用</span>        l1<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lt</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法不能访问普通变量，只能访问修改static修饰的<br>普通的不带static修饰的全能</p><h2 id="二十四、深入理解main方法"><a href="#二十四、深入理解main方法" class="headerlink" title="二十四、深入理解main方法"></a>二十四、深入理解main方法</h2><p>main方法形式<code>public static void main(String[] args){}</code></p><ol><li>main 方法是虚拟机调用</li><li>java虚拟机需要调用类的main（）方法，所以该方法访问权限必须是public</li><li>java虚拟机子啊执行main（）方法时不必创建对象，所以该方法必须是static</li><li>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数，</li><li>java类 参数一 参数二 参数三<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入传参即可观察，如tom cat jack</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 观察args 如何传入</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>mian特别说明，不可以访问本类的非静态成员，要访问必须要先创建一个对象，new Main（）；之后用创建的对象再调用这个非静态成员。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java第一篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 迷宫问题 </tag>
            
            <tag> IDEA快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/05/25/java/jdbc/"/>
      <url>/2023/05/25/java/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC概念"><a href="#JDBC概念" class="headerlink" title="JDBC概念"></a>JDBC概念</h2><p><strong>JDBC ( Java DataBaseConnectivity java数据库连接)</strong> 是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。<br><strong>本质</strong>：其实就是java官方提供的一套规范(接口)。用于帮助开发人员快速实现不同关系型数据库的连接!</p><p>直接上代码！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBC_index1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MySQL5以后可直接省略</span>        <span class="token comment">//获取数据库连接</span>        <span class="token class-name">Connection</span> con<span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/cadastre"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"XXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取执行者对象</span>        <span class="token class-name">Statement</span> stat<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行sql语句并返回结果</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from 网易云热评"</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re<span class="token operator">=</span>stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理结果</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//释放资源</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC功能详解"><a href="#JDBC功能详解" class="headerlink" title="JDBC功能详解"></a>JDBC功能详解</h2><h3 id="1、DriverManager驱动管理对象"><a href="#1、DriverManager驱动管理对象" class="headerlink" title="1、DriverManager驱动管理对象"></a>1、DriverManager驱动管理对象</h3><h4 id="1-注册驱动-（mysql5以后可直接省略驱动）"><a href="#1-注册驱动-（mysql5以后可直接省略驱动）" class="headerlink" title="(1)注册驱动:（mysql5以后可直接省略驱动）"></a>(1)注册驱动:（mysql5以后可直接省略驱动）</h4><ol><li>注册给定的驱动程序: <code>static void register Driver(Driver driver);</code></li><li>写代码使用:<code>Class.forName(“com.mysql.jdbc.Driver”);</code></li><li>在<code>com.mysql.jdbc.Driver</code>类中存在静态代码块</li><li>还有一个跟版本有关的  jdbc:mysql://localhost:3306/cadastre?useSSL=false<br>报错加一个useSSL=false,安全性问题</li></ol><h4 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="(2)获取数据库连接:"></a>(2)获取数据库连接:</h4><ol><li>获取数据库连接对象: <code>static Connection getConnection(String url, String user,String password);</code></li><li>返回值:Connection数据库连接对象</li><li>参数<br>url:指定连接的路径。语法: jdbc:mysql://ip地址(域名):端口号/数据库名称<br>​ user:用户名<br>​ password:密码</li></ol><h3 id="2、Connection数据库连接对象"><a href="#2、Connection数据库连接对象" class="headerlink" title="2、Connection数据库连接对象"></a>2、Connection数据库连接对象</h3><ol><li>获取执行者对象:<br>获取普通执行者对象: <code>Statement createStatement0;</code><br>获取预编译执行者对象:<code>PreparedStatement prepareStatement(String sql);</code></li><li>管理事务<br>开启事务 : <code>setAutoCommit(boolean autoCommit);</code>参数为false，则开启事务<br>​ 提交事务:<code>commit();</code><br>​ 回滚事务: <code>rollback();</code></li><li>释放资源<br>立即将数据库连接对象释放:<code>void close();</code></li></ol><h3 id="3、Statement执行sql语句的对象"><a href="#3、Statement执行sql语句的对象" class="headerlink" title="3、Statement执行sql语句的对象"></a>3、Statement执行sql语句的对象</h3><ol><li>执行DML语句: <code>int executeUpdate(String sql);</code><br>返回值int :返回影响的行数。<br>参数sql:可以执行insert、update、delete语句。</li><li>执行DQL语句:<code>ResultSet executeQuery(String sql);</code><br>返回值ResultSet:封装查询的结果。<br>参数sql:可以执行select语句。</li><li>释放资源<br>立即将数据库连接对象释放:<code>void close();</code></li></ol><h3 id="4、ResultSet结果集对象"><a href="#4、ResultSet结果集对象" class="headerlink" title="4、ResultSet结果集对象"></a>4、ResultSet结果集对象</h3><ol><li>判断结果集中是否还有数据: <code>boolean next();</code><br>有数据返回true，并将索引向下移动一行。没有数据返回false。</li><li>获取结果集中的数据:XXX getXxx(“列名”);XXX代表数据类型(要获取某列数据，这一列的数据类型)。<br>例如: <code>String getString(“name”);int getInt(" age");</code></li><li>释放资源<br>立即将结果集对象释放:<code>void close();</code></li></ol><hr><h3 id="5、pom-xml"><a href="#5、pom-xml" class="headerlink" title="5、pom.xml"></a>5、pom.xml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.49<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>待更…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript笔记</title>
      <link href="/2023/05/24/qian-duan/javascript-bi-ji/"/>
      <url>/2023/05/24/qian-duan/javascript-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/05/24/qian-duan/javascript-bi-ji/bg.jpg"></p><h1 id="Javascript篇"><a href="#Javascript篇" class="headerlink" title="Javascript篇"></a>Javascript篇</h1><p><a href="https://leetcode.cn/circle/discuss/jE87x7/">leetcode14天js编程挑战</a></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。<br>——出自《JavaScript权威指南(第六版)》<br>闭包（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，词法环境）的引用的组合。换而言之，闭包让开发者可以从内部函数访问外部函数的作用域。在 JavaScript 中，闭包会随着函数的创建而被同时创建。</p><blockquote><p>三个作用<br>（1）外部可以读取函数内部的变量。<br>（2）封闭数据，实现数据私有，防止变量被污染。<br>（3）让这些变量的值始终保持在内存中</p></blockquote></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span> <span class="token comment">// name 是一个被 init 创建的局部变量</span>  <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// displayName() 是内部函数，一个闭包</span>      <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用了父函数中声明的变量</span>  <span class="token punctuation">}</span>  <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>闭包主要是用返回值，但使用一定要合理</li><li>如果不是某些特定任务需要使用闭包，在其他函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响。</li><li>会产生内存泄漏问题，如果需要回收这些变量，我们可以手动把这些变量设为 <code>null</code>。</li></ul><p>例题：</p><blockquote><p>请你写一个函数&nbsp;createCounter. 这个函数接收一个初始的整数值 init&nbsp;&nbsp;并返回一个包含三个函数的对象。<br>这三个函数是：<br>increment()&nbsp;将当前值加 1 并返回。<br>decrement()&nbsp;将当前值减 1 并返回。<br>reset()&nbsp;将当前值设置为 init 并返回。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">createCounter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n<span class="token operator">=</span>init<span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">increment</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">++</span>n<span class="token punctuation">;</span>     <span class="token keyword">let</span> <span class="token function-variable function">decrement</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token operator">--</span>n<span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token function-variable function">reset</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> n <span class="token operator">=</span> init<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span>decrement<span class="token punctuation">,</span>reset<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * const counter = createCounter(5) * counter.increment(); // 6 * counter.reset(); // 5 * counter.decrement(); // 4 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li><p><strong>不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）</strong>。 内存泄漏是指程序执行时，一些变量没有及时释放，一直占用着内存 而这种占用内存的行为就叫做内存泄漏。</p></li><li><p>作为一般的用户，根本感觉不到内存泄漏的存在。真正有危害的是内存泄漏的堆积，这会最终消耗尽系统所有的内存。从这个角度来说，一次性内存泄漏并没有什么危害，因为它不会堆积。</p></li><li><p>内存泄漏如果一直堆积，最终会导致<strong>内存溢出问题</strong>。</p></li></ul><h2 id="js实现继承的方式"><a href="#js实现继承的方式" class="headerlink" title="js实现继承的方式"></a>js实现继承的方式</h2><p>1、原型链继承 …<br>2、借用构造函数继承（也称伪造对象或经典继承） …<br>3、组合继承（也称伪经典继承） …<br>4、原型式继承 …<br>5、寄生式继承 …<br><a href="https://www.cnblogs.com/Leophen/p/11401734.html#:~:text=%E4%BA%8C%E3%80%81JavaScript%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E5%BC%8F%201%201%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF%20...%202%202%E3%80%81%E5%80%9F%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF%EF%BC%88%E4%B9%9F%E7%A7%B0%E4%BC%AA%E9%80%A0%E5%AF%B9%E8%B1%A1%E6%88%96%E7%BB%8F%E5%85%B8%E7%BB%A7%E6%89%BF%EF%BC%89%20...%203,4%E3%80%81%E5%8E%9F%E5%9E%8B%E5%BC%8F%E7%BB%A7%E6%89%BF%20...%205%205%E3%80%81%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF%20...%206%206%E3%80%81%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF%20">“继承方式”</a></p><h2 id="一次笔试题，五个人五排看手机电量够玩多久"><a href="#一次笔试题，五个人五排看手机电量够玩多久" class="headerlink" title="一次笔试题，五个人五排看手机电量够玩多久"></a>一次笔试题，五个人五排看手机电量够玩多久</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">let</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">+=</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">let</span> temp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> javascript </category>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> 闭包 </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/05/24/java/springboot/"/>
      <url>/2023/05/24/java/springboot/</url>
      
        <content type="html"><![CDATA[<p>Ctrl+shift+o 刷新maven</p><h3 id="一、springboot项目启动不自动启动内嵌tomcat问题"><a href="#一、springboot项目启动不自动启动内嵌tomcat问题" class="headerlink" title="一、springboot项目启动不自动启动内嵌tomcat问题"></a>一、springboot项目启动不自动启动内嵌tomcat问题</h3><p>pom.xml需要按照以下顺序配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 这个dependcy放在最前面 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二、重新编译启动项目"><a href="#二、重新编译启动项目" class="headerlink" title="二、重新编译启动项目"></a>二、重新编译启动项目</h3><p>SPring Boot 提供  <code>spring-boot-devtools</code> 组件，使得无需手动重启Spring Boot应用即可重新编译启动项目，缩短编译启动时间</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="三、Web入门"><a href="#三、Web入门" class="headerlink" title="三、Web入门"></a>三、Web入门</h3><ul><li>Spring Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了spring-boot-starter-web组件，简化了Web应用配置。</li><li>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter- web组件加入到项目中。</li><li>spring-boot-starter-web启动器主要包括web、webmvc、json、tomcat等基础依赖组件，作用是提供Web开发场景所需的所有底层依赖。</li><li>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带的容器依赖。</li></ul><hr><h3 id="四、控制器"><a href="#四、控制器" class="headerlink" title="四、控制器"></a>四、控制器</h3><ul><li>Spring Boot提供了<code>@Controller</code>和<code>@RestController</code>两种注解来标识此类负责接收和处理HTTP请求。</li><li>如果请求的是页面和数据，使用<code>@Controller</code>注解即可；如果只是请求数据，则可以使用<code>@RestController</code>注解。</li></ul><hr><h3 id="五、RESTful-API"><a href="#五、RESTful-API" class="headerlink" title="五、RESTful API"></a>五、RESTful API</h3><p>互联网软件服务架构设计风格，基于这种架构理念和设计原则的 Web API更加简洁，更有层次<br>特点：</p><blockquote><ol><li>每一个URI代表一种资源</li><li>客户端使用GET POST PUT DELETE四种操作方式对服务端资源进行操作</li><li>通过操作资源的表现形式来实现服务端请求操作</li><li>资源的表现形式是JSON 或 HTML</li><li>客户端与服务端之间的交互在请求之间是无状态的，从客观户端到服务端的每个请求都包含必需的信息</li></ol></blockquote><p>两个关键特性：安全性、幂等性</p><h3 id="六、Spring-Boot-实现-RESTful-API"><a href="#六、Spring-Boot-实现-RESTful-API" class="headerlink" title="六、Spring Boot 实现 RESTful API"></a>六、Spring Boot 实现 RESTful API</h3><ul><li>Spring Boot 提供的 spring-boot-starter-web 组件完全支持开发RESTful API，提供了与REST操作方式（GET\POST\PUT\DELETE）对应的注解<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token annotation punctuation">@PostMapping</span><span class="token annotation punctuation">@PutMapping</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token annotation punctuation">@PatchMapping</span> 处理<span class="token constant">PATCH</span>请求，用于部分资源更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="七、Swagger"><a href="#七、Swagger" class="headerlink" title="七、Swagger"></a>七、Swagger</h3><h4 id="1-解决报错版本匹配问题"><a href="#1-解决报错版本匹配问题" class="headerlink" title="1.解决报错版本匹配问题"></a>1.解决报错版本匹配问题</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Spring</span> <span class="token class-name">Boot</span> <span class="token number">2.6</span><span class="token punctuation">.</span>x版本引入依赖 springfox<span class="token operator">-</span>boot<span class="token operator">-</span>starter <span class="token punctuation">(</span><span class="token class-name">Swagger</span> <span class="token number">3.0</span><span class="token punctuation">)</span> 后，启动容器会报错原因：<span class="token class-name">Springfox</span> 假设 <span class="token class-name">Spring</span> <span class="token constant">MVC</span> 的路径匹配策略是 ant<span class="token operator">-</span>path<span class="token operator">-</span>matcher，而 <span class="token class-name">Spring</span> <span class="token class-name">Boot</span> <span class="token number">2.6</span><span class="token punctuation">.</span>x版本的默认匹配策略是 path<span class="token operator">-</span>pattern<span class="token operator">-</span>matcher，这就造成了上面的报错。解决：spring<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>pathmatch<span class="token punctuation">.</span>matching<span class="token operator">-</span>strategy<span class="token operator">=</span>ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-pom-xml配置"><a href="#2-pom-xml配置" class="headerlink" title="2.pom.xml配置"></a>2.pom.xml配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-SwaggerConfig配置"><a href="#3-SwaggerConfig配置" class="headerlink" title="3.SwaggerConfig配置"></a>3.SwaggerConfig配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>helloworld<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建API应用     * apiInfo() 增加API相关信息     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，     * 本例采用指定扫描的包路径来定义指定要建立API的目录。     * 多人开发可以设置多个Docket     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"***系统"</span><span class="token punctuation">)</span>                <span class="token comment">//false 则不能在浏览器访问，true为默认。</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//配置扫描接口的方式，基于包去扫描</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">//paths()过滤什么路径</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建该API的基本信息（这些基本信息会展现在文档页面中）     * 访问地址：http://项目实际地址/swagger-ui.html     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"springboot利用swagger构建api文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"演示系统"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"https://XXXX/XXXXX/group-manager/tree/develop/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-写接口注释等"><a href="#4-写接口注释等" class="headerlink" title="4.写接口注释等"></a>4.写接口注释等</h4><blockquote><p><code>@ApiOperation</code>和<code>@ApiParam</code>为添加的API相关注解，个参数说明如下：<br><code>@ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, response = “接口返回参数类型”, notes = “接口发布说明”）</code>；其他参数可参考源码；<br><code>@ApiParam(required = “是否必须参数”, name = “参数名称”, value = “参数具体描述”）</code></p></blockquote><h4 id="5-启动后接口文档："><a href="#5-启动后接口文档：" class="headerlink" title="5.启动后接口文档："></a>5.启动后接口文档：</h4><pre><code>http://localhost:8080/swagger-ui.html</code></pre><hr><h3 id="八、application-properties-配置文件"><a href="#八、application-properties-配置文件" class="headerlink" title="八、application.properties 配置文件"></a>八、application.properties 配置文件</h3><p><code>application.properties</code> 是一种配置文件，通常用于存储和管理应用程序的配置信息。它是在许多Java和Spring框架中使用的标准属性文件。</p><p>以下是关于 <code>application.properties</code> 的一些常见用途和注意事项：</p><ul><li><strong>配置应用程序属性：</strong>你可以在 application.properties 文件中指定应用程序的各种属性，如<strong>数据库连接信息、日志级别、端口号</strong>等。这些属性可以根据应用程序的需要进行自定义配置。</li><li><strong>多环境配置：</strong>application.properties 支持按照不同的环境（如开发、测试、生产）进行配置。你可以为每个环境创建不同的配置文件，例如 <code>application-dev.properties</code> 用于开发环境，<code>application-prod.properties</code> 用于生产环境。然后在启动应用程序时通过指定不同的环境变量来加载相应的配置文件。</li><li><strong>使用占位符：</strong>application.properties 支持使用 <code>${}</code> 形式的占位符。你可以在配置文件中定义一些通用的属性值，并在其他地方引用这些属性。例如，可以定义一个<code>server.port=8080</code>的属性，在其他配置项中使用 <code>${server.port}</code> 引用该值。</li><li><strong>注释和空行：</strong>你可以在 application.properties 中添加注释以及空行，用于提高可读性和明确属性的作用。</li><li><strong>高级功能：</strong>除了上述基本用法，application.properties 还支持一些高级功能，如属性的引入、覆盖、条件配置等。这些功能可以根据具体需求进一步扩展配置文件的灵活性和复用性。</li></ul><blockquote><p>需要注意的是，具体的属性和设置方式可能因你使用的框架或应用程序类型而有所差异。确保查阅相关文档以了解适用于你的情况的正确配置方式。此外，还有一些框架在最新版本中可能已经从 application.properties 切换到了 application.yml 或其他格式的配置文件。<br>spring_2文章也有相关知识及优先级</p></blockquote><hr><h3 id="九、Spring-Boot项目的结构"><a href="#九、Spring-Boot项目的结构" class="headerlink" title="九、Spring Boot项目的结构"></a>九、Spring Boot项目的结构</h3><p>Spring Boot项目的结构可以根据实际需求进行灵活的组织和调整，但一般遵循以下常见结构：</p><ul><li><p><strong>主应用程序类（Main Application Class）</strong>：<br>通常位于项目的根目录下，用于启动Spring Boot应用程序。<br>在该类上使用<code>@SpringBootApplication</code>注解，它包含了<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>注解的组合。</p></li><li><p><strong>控制器（Controllers）</strong>：<br>一般位于src/main/java目录下的一个子包中，用于处理HTTP请求和响应。<br>控制器类上使用<code>@RestController</code>或<code>@Controller</code>注解进行标识。<br>可以使用<code>@RequestMapping</code>、<code>@GetMapping</code>、<code>@PostMapping</code>等注解定义路由和请求处理方法。</p></li><li><p><strong>服务层（Services）</strong>：<br>用于处理业务逻辑，协调领域对象和数据访问对象（DAO）之间的交互。<br>一般位于src/main/java目录下的一个子包中。<br>可以使用<code>@Service</code>注解标识服务类。</p></li><li><p><strong>数据访问层（Data Access Layer）</strong>：<br>用于访问数据库或其他外部数据源。<br>一般位于src/main/java目录下的一个子包中。<br>可以使用<strong>Spring Data JPA、MyBatis</strong>等持久化框架来简化数据访问操作。</p></li><li><p><strong>领域层（Domain）</strong>：<br>包含应用程序的核心业务逻辑。  domain<br>一般位于src/main/java目录下的一个子包中。<br>包括领域对象、值对象、聚合根和领域服务等。</p></li><li><p><strong>配置文件（Configuration Files）</strong>：<br>Spring Boot支持多种配置文件格式，如<code>application.properties</code>或<code>application.yml</code>。<br>配置文件通常位于src/main/resources目录下。<br>可以在配置文件中配置数据库连接、日志级别、应用程序端口等信息。</p></li><li><p><strong>静态资源（Static Resources）</strong>：<br>用于存放静态文件，如HTML、CSS、JavaScript等。<br>通常位于src/main/resources/static目录下。</p></li><li><p><strong>模板文件（Template Files）</strong>：<br>用于生成动态内容的模板文件，如<strong>Thymeleaf、Freemarker</strong>等。<br>通常位于src/main/resources/templates目录下。</p></li></ul><p>以上只是一个常见的Spring Boot项目结构，实际项目中还可以根据需要引入其他模块、分层或功能组件。</p><hr><p><a href="https://thexb.notion.site/SpringBoot-Vue-7c90c8fd30c244d88604a240e608fcce">链接学习地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue后台管理系统项目总结</title>
      <link href="/2023/05/24/qian-duan/vue-hou-tai-guan-li-xi-tong-xiang-mu-zong-jie/"/>
      <url>/2023/05/24/qian-duan/vue-hou-tai-guan-li-xi-tong-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>2023-5-20</p><h1 id="Vue后台项目总结"><a href="#Vue后台项目总结" class="headerlink" title="Vue后台项目总结"></a>Vue后台项目总结</h1><ol><li>token、路由导航守卫、劫持request添加authorization</li><li>组件分类及命名，eslint检测，熟悉配置文件</li><li>接口请求、跨域、301永久重定向，不允许更换请求（出现服务器请求服务器状况）、前端请求代理、熟悉后端部分</li><li>熟悉element-ui，cascader 部分有个动态属性类，用它改变样式，之前还有bug</li><li>全局css、按需引入等</li><li>性能优化：vue ui使用<blockquote><p>1） babel.config.js 配置插件 发布时不带console<br>2） vue.config.js 自定义配置webpack<br>3） externals 加载外部CDN资源 直接房dist里 index.js cdn引入<br>4） gzip压缩等</p></blockquote></li><li>配置https SSL证书  <a href="https://freessl.org/">https://freessl.org</a>,    pm2管理</li><li>git流程</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>面包屑部分没封装， axios暴漏</li></ol><hr><p><a href="https://gitee.com/lhlsnowing/vue_shop_project">这个用的Gitee，在这里！https://gitee.com/lhlsnowing/vue_shop_project</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统篇</title>
      <link href="/2023/05/24/cao-zuo-xi-tong-pian/"/>
      <url>/2023/05/24/cao-zuo-xi-tong-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统篇"><a href="#操作系统篇" class="headerlink" title="操作系统篇"></a>操作系统篇</h1><h2 id="一、操作系统的概念、功能和目标"><a href="#一、操作系统的概念、功能和目标" class="headerlink" title="一、操作系统的概念、功能和目标"></a>一、操作系统的概念、功能和目标</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14a0b1654b994d8d8a48496b729e0b58~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="二、操作系统的4个特征"><a href="#二、操作系统的4个特征" class="headerlink" title="二、操作系统的4个特征"></a>二、操作系统的4个特征</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3d62f68bff8410e8ba4b316de842851~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="三、操作系统运行机制和体系结构"><a href="#三、操作系统运行机制和体系结构" class="headerlink" title="三、操作系统运行机制和体系结构"></a>三、操作系统运行机制和体系结构</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1370116b9fe0477fac917c5a77b4f608~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="四、进程与线程"><a href="#四、进程与线程" class="headerlink" title="四、进程与线程"></a>四、进程与线程</h2><p><a href="https://juejin.cn/post/6844903801321685000">这篇文章讲的好，看这个！</a></p><hr><p>待更…</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库篇</title>
      <link href="/2023/05/24/shu-ju-ku-pian/"/>
      <url>/2023/05/24/shu-ju-ku-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础篇"><a href="#数据库基础篇" class="headerlink" title="数据库基础篇"></a>数据库基础篇</h1><h2 id="一，认识MySQL数据库"><a href="#一，认识MySQL数据库" class="headerlink" title="一，认识MySQL数据库"></a>一，认识MySQL数据库</h2><h3 id="1，什么是数据库"><a href="#1，什么是数据库" class="headerlink" title="1，什么是数据库"></a>1，什么是数据库</h3><p><strong>数据库(Database)就是按照数据结构来组织，存储和管理数据的仓库</strong></p><p>专业的数据库是专门对数据进行创建，访问，管理，搜索等操作的软件，比起我们自己用文件读写的方 式对象数据进行管理更加的方便，快速，安全</p><h3 id="2，作用"><a href="#2，作用" class="headerlink" title="2，作用"></a>2，作用</h3><ul><li>对数据进行持久化的保存</li><li>方便数据的存储和查询，速度快，安全，方便</li><li>可以处理并发访问</li><li>更加安全的权限管理访问机制</li></ul><h3 id="3，常见的数据库"><a href="#3，常见的数据库" class="headerlink" title="3，常见的数据库"></a>3，常见的数据库</h3><p>数据库分两大类，一类是 关系型数据库。另一类叫做 非关系型数据库。</p><ul><li>关系型数据库： MySQL（已被Oracle收购），Oracle，PostgreSQL，SQLserver</li><li>非关系型数据库：Redis内存数据库，MongoDB文档数据库</li></ul><hr><h2 id="二、名词积累："><a href="#二、名词积累：" class="headerlink" title="二、名词积累："></a>二、名词积累：</h2><blockquote><p>数据库（Database）：存放和提供数据的“库房”<br>数据（Data）：数据库中存储的基本对象。<br>数据库管理系统（DBMS）：位于用户与操作系统之间的一层数据管理软件。<br>数据库系统（Database System）：包括数据库、DBMS、应用系统、数据库管理员（DBA）<br>主键（Primary Key）：用于唯一的标识表中的某一条记录的属性或属性的集合。<br>外键（Foreign Key）：用于与另一张表关联，外键为另一张表的主键<br>超键（Super Key）：超键是能唯一区分元组的属性或属性的集合<br>键（候选键）：去掉了超键中多余的属性，仍然能够保证区分不同的元组。<br>模式（Schema）：一个数据库的描述，包括对数据库结构，数据类型，还有约束。<br>实例（Instance / State）：数据库中在某一时刻存储的真实的数据。（Instance是Schema在某一时刻的具体化、实例化）<br>数据操纵语言（DML：Data Manipulation Language）：增删改查<br>数据定义语言（DDL：Data Definition Language）：定义、删除、修改数据库中的对象<br>数据控制语言（DCL：Data Control Language）：用于控制用户对数据库操纵的权限<br>数据模型（Data Model）：现实世界数据特征的抽象，用来定义数据如何组织，数据之间的关系怎样<br>并相容性（Union Compatibility）：两个关系具有并相容性需要保证具有相同的属性个数，以及对于每个属性都有相同的域<br>视图（VIEW）：视图是虚拟的表，并不是物理存储的数据。而是由基本表或其他视图派生的数据。对视图的更新，实际上转换为对实际基表的更新。</p></blockquote><hr><h2 id="三、数据模型（Data-Model）"><a href="#三、数据模型（Data-Model）" class="headerlink" title="三、数据模型（Data Model）"></a>三、数据模型（Data Model）</h2><p>基本概念：现实世界数据特征的抽象，用来定义数据如何组织，数据之间的关系怎样。<br>层次：<br>1.概念模型（Conceptual）：按用户的观点来对数据和信息建模<br>2.逻辑/实现模型（Logical / Implementation）：层次模型，网状模型，关系模型<br>3.物理模型（Physical）：数据在具体DBMS产品中的物理储存方式</p><hr><h2 id="四、数据库系统的三级模式结构："><a href="#四、数据库系统的三级模式结构：" class="headerlink" title="四、数据库系统的三级模式结构："></a>四、数据库系统的三级模式结构：</h2><ol><li><p>内模式（Internal Schema）：（也称存储模式。）数据物理结构和储存方式的描述，是数据在数据库内部的表示方式</p></li><li><p>概念模式（Conceptual Schema）：（也称全局模式。）有时简称“模式”。是对数据库中全体数据的逻辑结构和特征的描述</p></li><li><p>外模式（External Schemas）：（也称子模式或者用户模式。）数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述</p></li></ol><hr><h2 id="五、数据库系统的两级映射以及物理、逻辑独立性："><a href="#五、数据库系统的两级映射以及物理、逻辑独立性：" class="headerlink" title="五、数据库系统的两级映射以及物理、逻辑独立性："></a>五、数据库系统的两级映射以及物理、逻辑独立性：</h2><p><strong>两级映射：</strong></p><ol><li>概念模式/内模式映射</li><li>外模式/概念模式映射</li></ol><p><strong>数据的物理独立性：</strong><br>内模式与概念模式之间的映射提供了数据的物理独立性。当数据的物理结构发生变化时，只需要修改内模式与概念模式之间的映射即可。</p><p><strong>数据的逻辑独立性：</strong><br>概念模式与外模式之间的映射提供了数据的逻辑独立性。当数据的整体逻辑结构发生变化时，只需要修改各个外模式与概念模式之间的映射即可保证应用程序不受影响。</p><hr><h2 id="六、数据的约束条件：完整性约束"><a href="#六、数据的约束条件：完整性约束" class="headerlink" title="六、数据的约束条件：完整性约束"></a>六、数据的约束条件：完整性约束</h2><ol><li><p>域约束：对属性取值范围的约束</p></li><li><p>键约束：每个关系必须要有主键，且每个主键必须不相同</p></li><li><p>非空约束：属性值不能为NULL</p></li><li><p>实体完整性约束：主键值不能为空</p></li><li><p>参照完整性约束：外键可以取NULL值，但若外键为另一关系主键，则不能为NULL。</p></li><li><p>用户定义的完整性</p></li></ol><p>各种数据操作可能违反的完整性约束</p><p>插入操作：域约束、键约束、非空约束、实体完整性约束、参照完整性约束</p><p>删除操作：参照完整性约束</p><p>更新操作：域约束、键约束、非空约束、实体完整性约束、参照完整性约束</p><hr><h2 id="七、SQL语句执行顺序："><a href="#七、SQL语句执行顺序：" class="headerlink" title="七、SQL语句执行顺序："></a>七、SQL语句执行顺序：</h2><ol><li><p>FROM子句组装来自不同数据源的数据</p></li><li><p>WHERE子句基于指定的条件对记录进行筛选</p></li><li><p>GROUP BY子句将数据划分为多个分组</p></li><li><p>使用聚集函数进行计算</p></li><li><p>使用HAVING子句筛选分组</p></li><li><p>计算所有的表达式</p></li><li><p>使用ORDER BY对结果集进行排序</p></li></ol><hr><h2 id="八、关系代数："><a href="#八、关系代数：" class="headerlink" title="八、关系代数："></a>八、关系代数：</h2><p>五种基本运算：并、差、笛卡尔积、选择、投影</p><p>内连接的种类：</p><ol><li><p>等值连接</p></li><li><p>不等连接</p></li><li><p>自然连接</p></li></ol><hr><h2 id="九、数据库应用系统设计的基本过程："><a href="#九、数据库应用系统设计的基本过程：" class="headerlink" title="九、数据库应用系统设计的基本过程："></a>九、数据库应用系统设计的基本过程：</h2><blockquote><p>Phases of Database Design andImplementation Process(数据库设计的基本过程)<br>Phase 1:Requirements Collections and Analysis(需求收集与分析)<br>Phase 2:Conceptual Database Design(概念结构设计)<br>Phase 3:Choice of a DBMS(选择合适的DBMS)<br>Phase 4:Data Model Mapping (Logical Database Design)(逻辑结构设计)<br>Phase 5:Physical Database Design(物理结构设计)<br>Phase 6:Database System Implementation(数据库实施)<br>Phase 7:Database System Operation and Maintenance(数据库运行和维护)</p></blockquote><hr><h2 id="十、数据库范式："><a href="#十、数据库范式：" class="headerlink" title="十、数据库范式："></a>十、数据库范式：</h2><ul><li>1NF（First Normal Form）：当且仅当所有域只包含原子值，即每个分量都是不可再分的数据项，则称实体E满足第一范式</li><li>2NF（Second Normal Form）：当且仅当实体E满足第一范式，且每一个非键属性完全依赖主键时，满足第二范式<br><strong>（消除部分依赖）</strong></li><li>3NF（Third Normal Form）：当且仅当实体E是第二范式（2NF），且E中没有非主属性传递依赖时，满足第三范式<br><strong>（消除传递依赖）</strong></li><li>BCNF条件</li></ul><ol><li>所有非主属性对每一个码都是完全函数依赖。</li><li>所有的主属性对每一个不包含它的码,也是完全函数依赖。</li><li>没有任何属性完全函数依赖于非码的任何一组属性。</li></ol><hr><h2 id="十一、数据库SQL"><a href="#十一、数据库SQL" class="headerlink" title="十一、数据库SQL"></a>十一、数据库SQL</h2><h3 id="1-SQL语言的五个部分"><a href="#1-SQL语言的五个部分" class="headerlink" title="1.SQL语言的五个部分"></a>1.SQL语言的五个部分</h3><blockquote><p>1）数据查询语言（Data Query Language，DQL）：DQL主要用于数据的查询，其基本结构是：<br>​使用SELECT子句，FROM子句和WHERE子句的组合来查询一条或多条数据<br>2）数据操作语言（Data Manipulation Language，DML）：DML主要用于对数据库中的数据进行增加、修改和删除的操作，针对表中的数据。其主要包括：<br>INSERT：增加数据<br>UPDATE：修改数据<br>DELETE：删除数据<br>3）数据定义语言（Data Definition Language，DDL）：DDL主要用针对是数据库对象（表、索引、视图、触发器、存储过程、函数、表空间等）进行创建、修改和删除操作。针对数据库对象其 主要包括<br>CREATE：创建数据库对象<br>ALTER：修改数据库对象<br>DROP：删除数据库对象<br>4）数据控制语言（Data Control Language，DCL）：DCL用来授予或回收访问数据库的权限，其主要包括：<br>GRANT：授予用户某种权限<br>REVOKE：回收授予的某种权限<br>5）事务控制语言（Transaction Control Language，TCL）：TCL用于数据库的事务管理。 其主要包括：<br>START TRANSACTION：开启事务<br>COMMIT：提交事务<br>ROLLBACK：回滚事务<br>SET TRANSACTION：设置事务的属性</p></blockquote><h3 id="2-表的创建与定义"><a href="#2-表的创建与定义" class="headerlink" title="2.表的创建与定义"></a>2.表的创建与定义</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">   <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>   id <span class="token keyword">integer</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> auto_increament<span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>   password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>   Id_P <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id_P<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Persons<span class="token punctuation">(</span>Id_P<span class="token punctuation">)</span>，   usercreatstart <span class="token keyword">datetime</span><span class="token punctuation">,</span>   usercreatfinal <span class="token keyword">datetime</span><span class="token punctuation">,</span>      <span class="token keyword">check</span> <span class="token punctuation">(</span>usercreatfinal<span class="token operator">&gt;</span>usercreatstart<span class="token punctuation">)</span>       <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>primary key 主键</li><li>auto_increament 自动增加</li><li>UNIQUE 唯一，不能重复</li><li>not null 不为空</li><li>FOREIGN KEY 外键 要与 REFERENCES与那个表关联</li><li>check 约束条件</li></ul><h3 id="3-ALTER-table：修改数据库对象"><a href="#3-ALTER-table：修改数据库对象" class="headerlink" title="3.ALTER table：修改数据库对象"></a>3.ALTER table：修改数据库对象</h3><ul><li>alter table r add birthday date:增加新属性</li><li>alter table r modify(id char(10)):修改属性</li></ul><h3 id="4-DROP-table：删除数据库对象"><a href="#4-DROP-table：删除数据库对象" class="headerlink" title="4.DROP table：删除数据库对象"></a>4.DROP table：删除数据库对象</h3><p>drop table r:删除表r</p><ul><li>cascade（级联）全部删除</li><li>restrict(限制) 确保只有不存在相关视图和完整性约束才能删除</li></ul><h3 id="5-删除表字段-alter-table-student-drop-column-name"><a href="#5-删除表字段-alter-table-student-drop-column-name" class="headerlink" title="5.删除表字段 alter table student drop column name"></a>5.删除表字段 alter table student drop column name</h3><h3 id="6-索引"><a href="#6-索引" class="headerlink" title="6.索引"></a>6.索引</h3><blockquote><p>建立索引目的：加快查询速度<br>建立：create （unique|clustered）索引名 ON 表名 (column_name)<br>删除索引：drop index [indexname] on mytable;<br>修改：alter mytable add index [indexname] on(username(length))<br>查询:show index from table_name \g</p></blockquote><h3 id="7-增删改SQL语句"><a href="#7-增删改SQL语句" class="headerlink" title="7.增删改SQL语句"></a>7.增删改SQL语句</h3><ul><li><p>增加数据：<code>INSERT INTO 表名称 （id，name…）VALUES (值1, 值2,….)</code></p></li><li><p>删除数据：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code></p></li><li><p>修改数据：<code>update &lt;表名&gt; set &lt;列名=更新值&gt; [where &lt;更新条件&gt;]</code></p></li></ul><h3 id="8-SQL语句查询"><a href="#8-SQL语句查询" class="headerlink" title="8.SQL语句查询"></a>8.SQL语句查询</h3><ul><li>sql语句：<code>select （all|distinct）&lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达试&gt;] group by&lt;列名&gt;(having 条件 )[order by &lt;排序的列名&gt;[asc或desc]] limit[n,m]</code><blockquote><p>默认按照升序(asc)对记录进行排序，distinct 去除重复值<br>limit[n,m]表示分页，其中limit[0,5]表示1-5的5条数据，<code>limit[(n-1)*pagesize,pagesize]</code>,页面总数=总数据/页面大小</p></blockquote></li></ul><h3 id="9-操作符-描述"><a href="#9-操作符-描述" class="headerlink" title="9.操作符 描述"></a>9.操作符 描述</h3><ul><li>= 等于(IN 可以是一个结果集,但结果集只有一个值时“=”等价于“IN” )</li><li>&lt;&gt; 不等于</li><li><strong>BETWEEN</strong> 在某个范围内 如:select * from emp where sal between 1000 and 3000;</li><li><strong>LIKE</strong> 搜索某种模式为模糊查询(百分号 %：任意字符,下划线 _ :单个字符) 如：select * from emp where - ename like ‘%o%’;– 查询忽略大小写</li></ul><h3 id="10-聚集函数"><a href="#10-聚集函数" class="headerlink" title="10.聚集函数"></a>10.聚集函数</h3><blockquote><p>平均值：avg<br>最小值：min<br>最大值：max<br>总和：sum<br>计数：count<br>group by 和 having<br>聚集函数前面必须用group by 中having<br>任何没有出现在group by字句中的属性，如果出现在select中它只能出现在聚集函数内部，如根据学院分不能将学生姓名输出没在select中</p></blockquote><p>例题：编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> s1<span class="token punctuation">.</span>Score<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span> Rank<span class="token keyword">from</span>Scores s1<span class="token punctuation">,</span>Scores s2<span class="token keyword">where</span>s1<span class="token punctuation">.</span>score<span class="token operator">&lt;=</span>s2<span class="token punctuation">.</span>score<span class="token keyword">group</span> <span class="token keyword">by</span> s1<span class="token punctuation">.</span>Id<span class="token keyword">order</span> <span class="token keyword">by</span> Rank<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exists</strong><br>exists表示存在量词，带有exists谓词的子查询，该类子查询的目标列为</p><p><strong>EXISTS语句：</strong>执行student.length次先查询外表，<strong>而IN 语句：</strong>只执行一次查询内表。如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。注意exists后要是select *<br><del>记忆中是嵌套时候用的多</del></p><hr><p>事务等待更…</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络篇</title>
      <link href="/2023/05/24/ji-suan-ji-wang-luo-pian/"/>
      <url>/2023/05/24/ji-suan-ji-wang-luo-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络篇"><a href="#计算机网络篇" class="headerlink" title="计算机网络篇"></a>计算机网络篇</h1><h2 id="1、GET和POST的请求的区别"><a href="#1、GET和POST的请求的区别" class="headerlink" title="1、GET和POST的请求的区别"></a>1、GET和POST的请求的区别</h2><p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</p><h3 id="发送的报文格式："><a href="#发送的报文格式：" class="headerlink" title="发送的报文格式："></a>发送的报文格式：</h3><p>Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</p><h3 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h3><p>Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</p><h3 id="请求长度："><a href="#请求长度：" class="headerlink" title="请求长度："></a>请求长度：</h3><p>浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</p><h3 id="参数类型："><a href="#参数类型：" class="headerlink" title="参数类型："></a>参数类型：</h3><p>post 的参数传递支持更多的数据类型。</p><hr><h2 id="2、POST和PUT请求的区别"><a href="#2、POST和PUT请求的区别" class="headerlink" title="2、POST和PUT请求的区别"></a>2、POST和PUT请求的区别</h2><p>  PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。<strong>（可以理解为时更新数据）</strong><br>  POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。<strong>（可以理解为是创建数据）</strong></p><hr><h2 id="3、常见的HTTP请求头和响应头"><a href="#3、常见的HTTP请求头和响应头" class="headerlink" title="3、常见的HTTP请求头和响应头"></a>3、常见的HTTP请求头和响应头</h2><h3 id="HTTP-Request-Header-常见的请求头："><a href="#HTTP-Request-Header-常见的请求头：" class="headerlink" title="HTTP Request Header 常见的请求头："></a>HTTP Request Header 常见的请求头：</h3><ul><li>Accept:浏览器能够处理的内容类型</li><li>Accept-Charset:浏览器能够显示的字符集</li><li>Accept-Encoding：浏览器能够处理的压缩编码</li><li>Accept-Language：浏览器当前设置的语言</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cookie：当前页面设置的任何Cookie</li><li>Host：发出请求的页面所在的域</li><li>Referer：发出请求的页面的URL</li><li>User-Agent：浏览器的用户代理字符串</li></ul><h3 id="HTTP-Responses-Header-常见的响应头："><a href="#HTTP-Responses-Header-常见的响应头：" class="headerlink" title="HTTP Responses Header 常见的响应头："></a>HTTP Responses Header 常见的响应头：</h3><ul><li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li><li>server:服务器名称</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cache-Control：控制HTTP缓存</li><li>content-type:表示后面的文档属于什么MIME类型</li></ul><h4 id="常见的-Content-Type-属性值有以下四种："><a href="#常见的-Content-Type-属性值有以下四种：" class="headerlink" title="常见的 Content-Type 属性值有以下四种："></a>常见的 Content-Type 属性值有以下四种：</h4><p>（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。</p><p>（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。</p><p>（3）application/json：服务器消息主体是序列化后的 JSON 字符串。</p><p>（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p><hr><h2 id="4、常见的HTTP请求方法"><a href="#4、常见的HTTP请求方法" class="headerlink" title="4、常见的HTTP请求方法"></a>4、常见的HTTP请求方法</h2><pre class="line-numbers language-none"><code class="language-none">GET: 向服务器获取数据；POST：将实体提交到指定的资源，通常会造成服务器资源的修改；PUT：上传文件，更新数据；DELETE：删除服务器上的对象；HEAD：获取报文首部，与GET相比，不返回报文主体部分；OPTIONS：询问支持的请求方法，用来跨域请求；CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5、HTTP-1-1-和-HTTP-2-0-的区别"><a href="#5、HTTP-1-1-和-HTTP-2-0-的区别" class="headerlink" title="5、HTTP 1.1 和 HTTP 2.0 的区别"></a>5、HTTP 1.1 和 HTTP 2.0 的区别</h2><ul><li><strong>二进制协议：</strong> HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li><li><strong>多路复用：</strong> HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，<strong>客户端和服务器都可以同时发送多个请求或回应</strong>，而且不用按照顺序一一发送，这样就避免了”队头堵塞”【1】的问题。</li><li><strong>数据流：</strong> HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li><li><strong>头信息压缩：</strong> HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li><li><strong>服务器推送：</strong> HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li></ul><hr><h2 id="6、HTTP和HTTPS协议的区别"><a href="#6、HTTP和HTTPS协议的区别" class="headerlink" title="6、HTTP和HTTPS协议的区别"></a>6、HTTP和HTTPS协议的区别</h2><ul><li>HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；</li><li>HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；</li><li>使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；</li><li>HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。</li></ul><hr><h2 id="7、浏览器输入URL后，会发生什么？"><a href="#7、浏览器输入URL后，会发生什么？" class="headerlink" title="7、浏览器输入URL后，会发生什么？"></a>7、浏览器输入URL后，会发生什么？</h2><blockquote><p><strong>（1）解析URL：</strong> 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。<br><strong>（2）缓存判断：</strong> 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。<br><strong>（3）DNS解析：</strong> 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。<br><strong>（4）获取MAC地址：</strong> 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。<br><strong>（5）TCP三次握手：</strong> 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。<br><strong>（6）HTTPS握手：</strong> 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。<br><strong>（7）返回数据：</strong> 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。<br><strong>（8）页面渲染：</strong> 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p></blockquote><hr><h2 id="8、与缓存相关的HTTP请求头有哪些"><a href="#8、与缓存相关的HTTP请求头有哪些" class="headerlink" title="8、与缓存相关的HTTP请求头有哪些"></a>8、与缓存相关的HTTP请求头有哪些</h2><h4 id="强缓存："><a href="#强缓存：" class="headerlink" title="强缓存："></a>强缓存：</h4><ul><li>Expires</li><li>Cache-Control</li></ul><h4 id="协商缓存："><a href="#协商缓存：" class="headerlink" title="协商缓存："></a>协商缓存：</h4><ul><li>Etag、If-None-Match</li><li>Last-Modified、If-Modified-Since</li></ul><hr><h2 id="9、什么是HTTPS协议？"><a href="#9、什么是HTTPS协议？" class="headerlink" title="9、什么是HTTPS协议？"></a>9、什么是HTTPS协议？</h2><p><strong>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）</strong>是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10885a9d4d574d7caf3fee1416f623ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"><br>HTTP协议采用明文<strong>传输信息</strong>，存在信息窃听、信息篡改和信息劫持的风险，而<strong>协议TLS/SSL具有身份验证、信息加密和完整性校验</strong>的功能，可以避免此类问题发生。<br>安全层的主要职责就是对<strong>发起的HTTP请求的数据进行加密操作</strong> 和 <strong>对接收到的HTTP的内容进行解密操作</strong>。</p><hr><h2 id="10、TLS-x2F-SSL的工作原理"><a href="#10、TLS-x2F-SSL的工作原理" class="headerlink" title="10、TLS/SSL的工作原理"></a>10、TLS/SSL的工作原理</h2><p>TLS/SSL全称安全传输层协议（Transport Layer Security）, 是议<strong>介于TCP和HTTP之间的一层安全协</strong>，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</p><p>TLS/SSL的功能实现主要依赖三类基本算法：<strong>散列函数hash、对称加密、非对称加密</strong>。这三类算法的作用如下：</p><ul><li>基于散列函数验证信息的完整性</li><li>对称加密算法采用协商的秘钥对数据加密</li><li>非对称加密实现身份认证和秘钥协商<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5696ee8ccb0d44b08b812a7c964695b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></li></ul><hr><h2 id="11、HTTP状态码"><a href="#11、HTTP状态码" class="headerlink" title="11、HTTP状态码"></a>11、HTTP状态码</h2><table><thead><tr><th>类别</th><th>原因</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>Informational(信息性状态码)</td><td>接受的请求正在处理</td></tr><tr><td>2xx</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作一完成请求</td></tr><tr><td>4xx</td><td>Client Error (客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h3><p><strong>永久重定向。</strong> 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。<br><del>做项目血的教训 呜呜</del></p><hr><h2 id="12、DNS-协议是什么"><a href="#12、DNS-协议是什么" class="headerlink" title="12、DNS 协议是什么"></a>12、DNS 协议是什么</h2><p><strong>概念：</strong> DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p><p><strong>作用：</strong> 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。</p><hr><h2 id="13、DNS同时使用TCP和UDP协议？"><a href="#13、DNS同时使用TCP和UDP协议？" class="headerlink" title="13、DNS同时使用TCP和UDP协议？"></a>13、DNS同时使用TCP和UDP协议？</h2><p><strong>DNS占用53号端口，同时使用TCP和UDP协议</strong></p><h4 id="（1）在区域传输的时候使用TCP协议"><a href="#（1）在区域传输的时候使用TCP协议" class="headerlink" title="（1）在区域传输的时候使用TCP协议"></a>（1）在区域传输的时候使用TCP协议</h4><p>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。<br>TCP是一种可靠连接，保证了数据的准确性。</p><h4 id="（2）在域名解析的时候使用UDP协议"><a href="#（2）在域名解析的时候使用UDP协议" class="headerlink" title="（2）在域名解析的时候使用UDP协议"></a>（2）在域名解析的时候使用UDP协议</h4><p>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</p><hr><h2 id="14、DNS完整的查询过程"><a href="#14、DNS完整的查询过程" class="headerlink" title="14、DNS完整的查询过程"></a>14、DNS完整的查询过程</h2><ul><li>首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</li><li>将请求发送给<strong>本地DNS服务器</strong>，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li><li>本地DNS服务器向<strong>根域名服务器</strong>发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li><li>本地DNS服务器向<strong>顶级域名服务器</strong>发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li><li>本地DNS服务器向<strong>权威域名服务器</strong>发送请求，域名服务器返回对应的结果</li><li>本地DNS服务器将返回结果保存在缓存中，便于下次使用</li><li>本地DNS服务器将返回结果返回给浏览器</li></ul><h3 id="DNS解析是一个包含迭代查询和递归查询的过程"><a href="#DNS解析是一个包含迭代查询和递归查询的过程" class="headerlink" title="DNS解析是一个包含迭代查询和递归查询的过程"></a>DNS解析是一个包含迭代查询和递归查询的过程</h3><p><strong>递归查询</strong>指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。<br><strong>迭代查询</strong>指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。<br><u>一般我们向本地 DNS 服务器发送请求的方式就是递归查询~</u></p><h5 id="DNS-服务器中以资源记录的形式存储信息，每一个-DNS-响应报文一般包含多条资源记录。一条资源记录的具体的格式为："><a href="#DNS-服务器中以资源记录的形式存储信息，每一个-DNS-响应报文一般包含多条资源记录。一条资源记录的具体的格式为：" class="headerlink" title="DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为："></a>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为：</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http">（Name，Value，Type，TTL）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间</strong><br>常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p><ul><li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li><li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li><li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li><li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li></ul><hr><h2 id="15、网络模型"><a href="#15、网络模型" class="headerlink" title="15、网络模型"></a>15、网络模型</h2><h3 id="1）-OSI七层模型"><a href="#1）-OSI七层模型" class="headerlink" title="1）. OSI七层模型"></a>1）. OSI七层模型</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1e8e168d9f249788c74c5b50e0528e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></p><h4 id="（1）应用层"><a href="#（1）应用层" class="headerlink" title="（1）应用层"></a>（1）应用层</h4><p>OSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：<strong>HTTP，HTTPS，FTP，POP3、SMTP</strong>等。</p><h4 id="（2）表示层"><a href="#（2）表示层" class="headerlink" title="（2）表示层"></a>（2）表示层</h4><p>表示层<strong>提供各种用于应用层数据的编码和转换功能</strong>,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p><h4 id="（3）会话层"><a href="#（3）会话层" class="headerlink" title="（3）会话层"></a>（3）会话层</h4><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><h4 id="（4）传输层"><a href="#（4）传输层" class="headerlink" title="（4）传输层"></a>（4）传输层</h4><p>传输层<strong>建立了主机端到端的链接</strong>，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，<strong>TCP UDP就是在这一层</strong>。端口号既是这里的“端”。</p><h4 id="（5）网络层"><a href="#（5）网络层" class="headerlink" title="（5）网络层"></a>（5）网络层</h4><p>本层<strong>通过IP寻址来建立两个节点之间的连接</strong>，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。</p><h4 id="（6）数据链路层"><a href="#（6）数据链路层" class="headerlink" title="（6）数据链路层"></a>（6）数据链路层</h4><p>将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。 网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p><h4 id="（7）物理层"><a href="#（7）物理层" class="headerlink" title="（7）物理层"></a>（7）物理层</h4><p>实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。<br><strong>OSI七层模型通信特点：对等通信</strong> 对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p><h3 id="2）-TCP-x2F-IP五层协议"><a href="#2）-TCP-x2F-IP五层协议" class="headerlink" title="2）.TCP/IP五层协议"></a>2）.TCP/IP五层协议</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48cd77d608714c298366f4dac77f33fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></p><ul><li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。</li><li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li><li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li><li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li><li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li><li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li><li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2db9226a6cdb4ee48daecd9bc4181b64~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></li></ul><hr><h2 id="16、TCP与UDP"><a href="#16、TCP与UDP" class="headerlink" title="16、TCP与UDP"></a>16、TCP与UDP</h2><p>TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：</p><h3 id="（1）UDP"><a href="#（1）UDP" class="headerlink" title="（1）UDP"></a>（1）UDP</h3><p>UDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p><strong>它的特点如下：</strong></p><blockquote><p>1）面向无连接<br>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br>具体来说就是：<br>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了<br>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作<br>2）有单播，多播，广播的功能<br>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。<br>3）面向报文<br>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文<br>4）不可靠性<br>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。<br>5）头部开销小，传输数据报文时是很高效的。</p></blockquote><h3 id="（2）TCP"><a href="#（2）TCP" class="headerlink" title="（2）TCP"></a>（2）TCP</h3><p>TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p><p><strong>它有以下几个特点：</strong></p><blockquote><p>1）面向连接<br>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br>2）仅支持单播传输<br>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br>3）面向字节流<br>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br>4）可靠传输<br>对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br>5）提供拥塞控制<br>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。<br>6）提供全双工通信<br>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p></blockquote><hr><h2 id="17、WebSocket"><a href="#17、WebSocket" class="headerlink" title="17、WebSocket"></a>17、WebSocket</h2><p>WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。<br>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p><h3 id="WebSocket原理："><a href="#WebSocket原理：" class="headerlink" title="WebSocket原理："></a>WebSocket原理：</h3><p>客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。​</p><h3 id="WebSocket-特点的如下："><a href="#WebSocket-特点的如下：" class="headerlink" title="WebSocket 特点的如下："></a>WebSocket 特点的如下：</h3><ul><li>支持双向通信，实时性更强</li><li>可以发送文本，也可以发送二进制数据‘’</li><li>建立在TCP协议之上，服务端的实现比较容易</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，- 能通过各种 HTTP 代理服务器。</li></ul><h3 id="Websocket的使用方法如下："><a href="#Websocket的使用方法如下：" class="headerlink" title="Websocket的使用方法如下："></a>Websocket的使用方法如下：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在index.html中直接写WebSocket，设置服务端的端口号为 9999</span><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:9999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在客户端与服务端建立连接后触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection open."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在服务端给客户端发来消息的时候触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 打印的是MessageEvent对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印的是收到的消息</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在客户端与服务端建立关闭后触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？"><a href="#即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？" class="headerlink" title="即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？"></a>即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h3><p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p><blockquote><p><strong>短轮询的基本思路：</strong> 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。<br><strong>长轮询的基本思路：</strong> 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。<br><strong>SSE 的基本思想：</strong> 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。<br><strong>WebSocket</strong>是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p></blockquote><p>上面的四个通信协议，前三个都是基于HTTP协议的。</p><p>对于这四种即使通信协议，从性能的角度来看： <strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong> 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： 短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络请求区别 </tag>
            
            <tag> HTTP和HTTPS </tag>
            
            <tag> HTTP状态码 </tag>
            
            <tag> TCP和UDP </tag>
            
            <tag> DNS </tag>
            
            <tag> 网络传输层 </tag>
            
            <tag> Websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法分析</title>
      <link href="/2023/05/23/yu-fa-fen-xi/"/>
      <url>/2023/05/23/yu-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的语法分析-–nefu编译原理-实验2"><a href="#一个简单的语法分析-–nefu编译原理-实验2" class="headerlink" title="一个简单的语法分析 –nefu编译原理-实验2"></a>一个简单的语法分析 –nefu编译原理-实验2</h2><h5 id="代码块中含有文法样例"><a href="#代码块中含有文法样例" class="headerlink" title="代码块中含有文法样例"></a>代码块中含有文法样例</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_RULES</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SYMBOLS</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TABLE_SIZE</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token comment">//文法  选自课上ppt </span><span class="token comment">//E -&gt; TE'</span><span class="token comment">//E' -&gt; +TE' | ε</span><span class="token comment">//T -&gt; FT'</span><span class="token comment">//T' -&gt; *FT' | ε</span><span class="token comment">//F -&gt; (E) | id</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span> NON_TERMINAL<span class="token punctuation">,</span> TERMINAL <span class="token punctuation">}</span> SymbolType<span class="token punctuation">;</span><span class="token comment">// 结构体 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    SymbolType type<span class="token punctuation">;</span>    <span class="token keyword">char</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span> Symbol<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Symbol left<span class="token punctuation">;</span>    Symbol right<span class="token punctuation">[</span>MAX_SYMBOLS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right_length<span class="token punctuation">;</span><span class="token punctuation">}</span> Rule<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Rule rules<span class="token punctuation">[</span>MAX_RULES<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num_rules<span class="token punctuation">;</span><span class="token punctuation">}</span> Grammar<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> Rule <span class="token operator">*</span>table<span class="token punctuation">[</span>TABLE_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>TABLE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ParsingTable<span class="token punctuation">;</span><span class="token comment">// 函数声明</span><span class="token keyword">void</span> <span class="token function">parse_input</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">,</span> <span class="token keyword">const</span> ParsingTable <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>Grammar <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ParsingTable <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Grammar grammar <span class="token operator">=</span> <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParsingTable table <span class="token operator">=</span> <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> <span class="token string">"id+id*id$"</span><span class="token punctuation">;</span><span class="token comment">//1、 (id+id)*id   2、 id+id*id</span>    <span class="token function">parse_input</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>grammar<span class="token punctuation">,</span> <span class="token operator">&amp;</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Grammar <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Grammar grammar<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>num_rules <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// E -&gt; TE'</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// E' -&gt; +TE' | ε</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'+'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// T -&gt; FT'</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// T' -&gt; *FT' | ε</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// F -&gt; (E) | id</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'d'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">;</span><span class="token punctuation">}</span>ParsingTable <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ParsingTable table<span class="token punctuation">;</span>    <span class="token comment">// 初始化预测分析表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TABLE_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> TABLE_SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            table<span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 填充预测分析表</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'E'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'E'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'+'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">')'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'$'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'T'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'T'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'+'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'*'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">')'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'$'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'F'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'F'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_input</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">,</span> <span class="token keyword">const</span> ParsingTable <span class="token operator">*</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化分析栈</span>    <span class="token keyword">char</span> stack<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    <span class="token comment">// 对输入字符串进行语法分析</span>    <span class="token keyword">int</span> input_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> lookahead <span class="token operator">=</span> input<span class="token punctuation">[</span>input_pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> stack_top <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_top <span class="token operator">==</span> lookahead<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lookahead <span class="token operator">==</span> <span class="token char">'$'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accepted\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lookahead <span class="token operator">=</span> input<span class="token punctuation">[</span>input_pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token keyword">const</span> Rule <span class="token operator">*</span>rule <span class="token operator">=</span> table<span class="token operator">-&gt;</span>table<span class="token punctuation">[</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">[</span>lookahead<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rule <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Rejected\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> rule<span class="token operator">-&gt;</span>right_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rule<span class="token operator">-&gt;</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown使用</title>
      <link href="/2023/05/23/gong-ju-ji-he-ji-bao-cuo/markdown-shi-yong/"/>
      <url>/2023/05/23/gong-ju-ji-he-ji-bao-cuo/markdown-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown的基本语法"><a href="#MarkDown的基本语法" class="headerlink" title="MarkDown的基本语法"></a>MarkDown的基本语法</h1><h2 id="1、三种方式"><a href="#1、三种方式" class="headerlink" title="1、三种方式"></a>1、三种方式</h2><p>1、内嵌<br>qq<code>console.log()</code><br>2、`用它代码块，指定类型高亮</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、tab 四个空格</p><h2 id="2、标题大小"><a href="#2、标题大小" class="headerlink" title="2、标题大小"></a>2、标题大小</h2><p>`#</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>`##</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>`###</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>`####</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>`#####</p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>`######</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加粗</span><span class="token operator">*</span><span class="token operator">*</span>加粗<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">// 代码高亮</span><span class="token operator">==</span>代码高亮<span class="token operator">==</span><span class="token comment">// 删除线</span><span class="token operator">~</span><span class="token operator">~</span>删除线<span class="token operator">~</span><span class="token operator">~</span><span class="token comment">// 斜体</span><span class="token operator">*</span>斜体内容<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用语法</span><span class="token operator">&gt;</span>作者：coderlhl<span class="token operator">&gt;&gt;</span>作者：coderlhl<span class="token operator">&gt;&gt;&gt;</span>作者：coderlhl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作者：coderlhl</p><blockquote><p>作者：coderlhl</p><blockquote><p>作者：coderlhl</p></blockquote></blockquote></blockquote><h2 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//分割线两种</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="6、图片插入"><a href="#6、图片插入" class="headerlink" title="6、图片插入"></a>6、图片插入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在线图片、本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>我的照片<span class="token punctuation">]</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img2.baidu.com/it/u=3411579598,3704843474&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=848&amp;h=500" alt="插入图片"></p><h2 id="7、超链接"><a href="#7、超链接" class="headerlink" title="7、超链接"></a>7、超链接</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//超链接语法</span><span class="token punctuation">[</span>我的github<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">LHLsnowing</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/LHLsnowing">我的github</a></p><h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无序列表</span><span class="token operator">-</span> 目录<span class="token number">1</span><span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span><span class="token comment">//1+. +名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>无序列表</li><li>1</li><li>2</li></ul><ol><li>首页</li><li>分类</li></ol><h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">|</span> 成绩 <span class="token operator">|</span> 数学 <span class="token operator">|</span> 语文 <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span> <span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span>  <span class="token operator">|</span><span class="token operator">|</span>  左对齐   <span class="token operator">|</span>  右对齐<span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>换行   <span class="token operator">|</span>  居中 <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>成绩</th><th>数学</th><th>语文</th></tr></thead><tbody><tr><td>22</td><td>100<br>换行</td><td>32</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 资源整合 </category>
          
          <category> MarkDown使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词法分析</title>
      <link href="/2023/05/23/ci-fa-fen-xi/"/>
      <url>/2023/05/23/ci-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的词法分析-–nefu编译原理-实验1"><a href="#一个简单的词法分析-–nefu编译原理-实验1" class="headerlink" title="一个简单的词法分析 –nefu编译原理-实验1"></a>一个简单的词法分析 –nefu编译原理-实验1</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LENGTH</span> <span class="token expression"><span class="token number">300</span></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 关键字列表 */</span>    <span class="token keyword">char</span> keywords<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"char"</span><span class="token punctuation">,</span> <span class="token string">"const"</span><span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">,</span>                                      <span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token string">"else"</span><span class="token punctuation">,</span> <span class="token string">"enum"</span><span class="token punctuation">,</span> <span class="token string">"extern"</span><span class="token punctuation">,</span> <span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"goto"</span><span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">,</span>                                      <span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token string">"register"</span><span class="token punctuation">,</span> <span class="token string">"return"</span><span class="token punctuation">,</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"signed"</span><span class="token punctuation">,</span> <span class="token string">"sizeof"</span><span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">,</span>                                      <span class="token string">"struct"</span><span class="token punctuation">,</span> <span class="token string">"switch"</span><span class="token punctuation">,</span> <span class="token string">"typedef"</span><span class="token punctuation">,</span><span class="token string">"unsigned"</span><span class="token punctuation">,</span> <span class="token string">"void"</span><span class="token punctuation">,</span> <span class="token string">"volatile"</span><span class="token punctuation">,</span> <span class="token string">"while"</span><span class="token punctuation">,</span><span class="token string">"then"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> input<span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存储用户输入</span>    <span class="token keyword">char</span> lexemes<span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存储识别出来的词法单元</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从标准输入中读取用户输入</span>    input<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// 将换行符替换成字符串结束符</span>    <span class="token comment">/* 逐个字符进行识别和匹配 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* 如果是标识符或关键字 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 跳过已经识别的字符，下一次从 j 处继续</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是数字 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 跳过已经识别的字符，下一次从 j 处继续</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是字符串字面量 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\"'</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是字符字面量 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是注释 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'*'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是运算符 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'='</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&gt;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&lt;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&amp;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'|'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'!'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'%'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'^'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'~'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'?'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是分隔符 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'{'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'}'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">';'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">','</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 输出识别出来的词法单元 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"识别出来的词法单元有：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* 过滤掉空格 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/* 判断是否是关键字 */</span>            m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>keywords<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：关键字\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：标识符\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：常数\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：分隔符\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                m<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词法分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
