<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理习题—中间代码生成</title>
      <link href="/2023/05/25/bian-yi-yuan-li-xi-ti-zhong-jian-dai-ma-sheng-cheng/"/>
      <url>/2023/05/25/bian-yi-yuan-li-xi-ti-zhong-jian-dai-ma-sheng-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理中间代码生成例题"><a href="#编译原理中间代码生成例题" class="headerlink" title="编译原理中间代码生成例题"></a>编译原理中间代码生成例题</h1><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p>语句：<code>if A and B and C&gt;D then if A&lt;B then F=1; else F=0; else G=G+1;</code><br>按照条件和赋值的翻译过程将上面的语句翻译成中间代码（用三地址码或四元式都可以）。</p><ul><li>解答<br><strong>中间代码（三地址码）：</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">1. t1 = A and B and C&gt;D2. if t1 goto 43. G = G + 14. t2 = A &lt; B5. if t2 goto 76. F = 07. F = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中间代码（四元式）：</strong></p><pre class="line-numbers language-none"><code class="language-none">1. (and, A, B, t1)2. (&gt;, C, D, t2)3. (and, t1, t2, t3)4. (if_true, t3, _, 7)5. (add, G, 1, G)6. (goto, _, _, 8)7. (if_false, t3, _, 9)8. (assign, 0, _, F)9. (assign, 1, _, F)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p>语句：<code>while a&gt;b do if c==5 then while x&lt;y do x=x+1; else x=y;</code><br>按照条件和赋值的翻译过程将上面的语句翻译成中间代码（用三地址码或四元式都可以）。</p><p><strong>中间代码（三地址码）：</strong></p><pre class="line-numbers language-none"><code class="language-none">1. label1: if a &gt; b goto 22. t1 = c == 53. if t1 goto 54. goto 95. label2: if x &lt; y goto 67. goto 46. x = x + 1;8. goto 59. t2 = x if y10. x = t2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>中间代码（四元式）：</strong></p><pre class="line-numbers language-none"><code class="language-none">1. (label, _, _, label1)2. (&gt;, a, b, t1)3. (if_true, t1, _, 4)4. (goto, _, _, label2)5. (==, c, 5, t2)6. (if_true, t2, _, 8)7. (goto, _, _, 3)8. (label, _, _, label2)9. (&lt;, x, y, t3)10. (if_true, t3, _, 11)11. (goto, _, _, 7)12. (add, x, 1, t4)13. (assign, t4, _, x)14. (goto, _, _, 9)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h2><p>针对如下三地址码</p><pre class="line-numbers language-none"><code class="language-none">    j=0L1：i=0    if i&lt;8 goto L3L2：a=b+c    b=d*cL3：if b==0 goto L4    b=a+b    goto L5L4：i=i+1    if i&lt;8 goto L2L5：j=j+1    if j&lt;=3 goto L1    b=8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）划分出基本块<br>（2）绘制程序的流程图（流图）<br>（3）求出流图中各结点的必经结点集（支配节点集）<br>（4）找出流图中的回边，给出回边对应的循环结点（自然循环）</p><p><strong>(1) 基本块划分：</strong></p><pre class="line-numbers language-none"><code class="language-none">基本块1：j=0基本块2：L1：i=0   if i&lt;8 goto L3基本块3：L2：a=b+c   b=d*c基本块4：L3：if b==0 goto L4   b=a+b   goto L5基本块5：L4：i=i+1   if i&lt;8 goto L2基本块6：L5：j=j+1   if j&lt;=3 goto L1   b=8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2) 程序的流程图：</strong><br>结合（1）大概是这样</p><pre class="line-numbers language-none"><code class="language-none">+-----+     +-----+|  1  |----&gt;|  2  |+-----+     +-----+   ^           |   |           v+-----+     +-----+|  3  |----&gt;|  4  |+-----+     +-----+   ^           |   |           v+-----+     +-----+|  5  |     |  6  |+-----+     +-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(3) 流图中各结点的必经结点集：</strong></p><blockquote><p>B1: {B1}<br>B2: {B1, B2}<br>B3: {B1, B2, B3}<br>B4: {B1, B2, B3, B4}<br>B5: {B1, B2, B3, B5}<br>B6: {B1, B2, B3, B6}</p></blockquote><p><strong>(4) 回边对应的循环结点：</strong></p><blockquote><p>回边：B5 -&gt; B2<br>循环结点：{B2, B3, B4, B5} （自然循环）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
          <category> 习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间代码生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2023/05/25/jdbc/"/>
      <url>/2023/05/25/jdbc/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="JDBC概念"><a href="#JDBC概念" class="headerlink" title="JDBC概念"></a>JDBC概念</h2><p><strong>JDBC ( Java DataBaseConnectivity java数据库连接)</strong> 是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。<br><strong>本质</strong>：其实就是java官方提供的一套规范(接口)。用于帮助开发人员快速实现不同关系型数据库的连接!</p><p>直接上代码！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DriverManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBC_index1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//注册驱动</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MySQL5以后可直接省略</span>        <span class="token comment">//获取数据库连接</span>        <span class="token class-name">Connection</span> con<span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/cadastre"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"XXXXXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取执行者对象</span>        <span class="token class-name">Statement</span> stat<span class="token operator">=</span>con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行sql语句并返回结果</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from 网易云热评"</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> re<span class="token operator">=</span>stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理结果</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>re<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//释放资源</span>        con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC功能详解"><a href="#JDBC功能详解" class="headerlink" title="JDBC功能详解"></a>JDBC功能详解</h2><h3 id="1、DriverManager驱动管理对象"><a href="#1、DriverManager驱动管理对象" class="headerlink" title="1、DriverManager驱动管理对象"></a>1、DriverManager驱动管理对象</h3><h4 id="1-注册驱动-（mysql5以后可直接省略驱动）"><a href="#1-注册驱动-（mysql5以后可直接省略驱动）" class="headerlink" title="(1)注册驱动:（mysql5以后可直接省略驱动）"></a>(1)注册驱动:（mysql5以后可直接省略驱动）</h4><ol><li>注册给定的驱动程序: <code>staticvoid registerDriver(Driver driver);</code></li><li>写代码使用:<code>Class.forName(“com.mysql.jdbc.Driver”);</code></li><li>在<code>com.mysql.jdbc.Driver</code>类中存在静态代码块</li></ol><h4 id="2-获取数据库连接"><a href="#2-获取数据库连接" class="headerlink" title="(2)获取数据库连接:"></a>(2)获取数据库连接:</h4><ol><li>获取数据库连接对象: <code>static ConnectiongetConnection(Stringurl, String user,String password);</code></li><li>返回值:Connection数据库连接对象</li><li>参数<br>url:指定连接的路径。语法: jdbc:mysql://ip地址(域名):端口号/数据库名称<br>​ user:用户名<br>​ password:密码</li></ol><h3 id="2、Connection数据库连接对象"><a href="#2、Connection数据库连接对象" class="headerlink" title="2、Connection数据库连接对象"></a>2、Connection数据库连接对象</h3><ol><li>获取执行者对象:<br>获取普通执行者对象: <code>Statement createStatement0;</code><br>获取预编译执行者对象:<code>PreparedStatement prepareStatement(String sql);</code></li><li>管理事务<br>开启事务 : <code>setAutoCommit(boolean autoCommit);</code>参数为false，则开启事务<br>​ 提交事务:<code>commit();</code><br>​ 回滚事务: <code>rollback();</code></li><li>释放资源<br>立即将数据库连接对象释放:<code>void close();</code></li></ol><h3 id="3、Statement执行sql语句的对象"><a href="#3、Statement执行sql语句的对象" class="headerlink" title="3、Statement执行sql语句的对象"></a>3、Statement执行sql语句的对象</h3><ol><li>执行DML语句: <code>int executeUpdate(String sql);</code><br>返回值int :返回影响的行数。<br>参数sql:可以执行insert、update、delete语句。</li><li>执行DQL语句:<code>ResultSet executeQuery(String sql);</code><br>返回值ResultSet:封装查询的结果。<br>参数sql:可以执行select语句。</li><li>释放资源<br>立即将数据库连接对象释放:<code>void close();</code></li></ol><h3 id="4、ResultSet结果集对象"><a href="#4、ResultSet结果集对象" class="headerlink" title="4、ResultSet结果集对象"></a>4、ResultSet结果集对象</h3><ol><li>判断结果集中是否还有数据: <code>boolean next();</code><br>有数据返回true，并将索引向下移动一行。没有数据返回false。</li><li>获取结果集中的数据:XXX getXxx(“列名”);XXX代表数据类型(要获取某列数据，这一列的数据类型)。<br>例如: <code>String getString(“name”);int getInt(" age");</code></li><li>释放资源<br>立即将结果集对象释放:<code>void close();</code></li></ol><hr><p>待更…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript笔记</title>
      <link href="/2023/05/24/javascript-bi-ji/"/>
      <url>/2023/05/24/javascript-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/05/24/javascript-bi-ji/bg.jpg"></p><h1 id="Javascript篇"><a href="#Javascript篇" class="headerlink" title="Javascript篇"></a>Javascript篇</h1>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习</title>
      <link href="/2023/05/24/springboot-xue-xi/"/>
      <url>/2023/05/24/springboot-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot项目启动不自动启动内嵌tomcat问题"><a href="#springboot项目启动不自动启动内嵌tomcat问题" class="headerlink" title="springboot项目启动不自动启动内嵌tomcat问题"></a>springboot项目启动不自动启动内嵌tomcat问题</h3><p>pom.xml需要按照以下顺序配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 这个dependcy放在最前面 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="SPring-Boot-提供-spring-boot-devtools-组件，使得无需手动重启Spring-Boot应用即可重新编译启动项目，缩短编译启动时间"><a href="#SPring-Boot-提供-spring-boot-devtools-组件，使得无需手动重启Spring-Boot应用即可重新编译启动项目，缩短编译启动时间" class="headerlink" title="SPring Boot 提供  spring-boot-devtools 组件，使得无需手动重启Spring Boot应用即可重新编译启动项目，缩短编译启动时间"></a>SPring Boot 提供  spring-boot-devtools 组件，使得无需手动重启Spring Boot应用即可重新编译启动项目，缩短编译启动时间</h3><hr><h3 id="Web入门"><a href="#Web入门" class="headerlink" title="Web入门"></a>Web入门</h3><ul><li>Spring Boot将传统Web开发的mvc、json、tomcat等框架整合，提供了spring-boot-starter-web组件，简化了Web应用配置。</li><li>创建SpringBoot项目勾选Spring Web选项后，会自动将spring-boot-starter- web组件加入到项目中。</li><li>spring-boot-starter-web启动器主要包括web、webmvc、json、tomcat等基础依赖组件，作用是提供Web开发场景所需的所有底层依赖。</li><li>webmvc为Web开发的基础框架，json为JSON数据解析组件，tomcat为自带的容器依赖。</li></ul><h4 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h4><ul><li>Spring Boot提供了@Controller和@RestController两种注解来标识此类负责接收和处理HTTP请求。</li><li>如果请求的是页面和数据，使用@Controller注解即可；如果只是请求数据，则可以使用@RestController注解。<br><img src="/2023/05/24/springboot-xue-xi/MVC.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue后台管理系统项目总结</title>
      <link href="/2023/05/24/vue-hou-tai-guan-li-xi-tong-xiang-mu-zong-jie/"/>
      <url>/2023/05/24/vue-hou-tai-guan-li-xi-tong-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>2023-5-20</p><h1 id="Vue后台项目总结"><a href="#Vue后台项目总结" class="headerlink" title="Vue后台项目总结"></a>Vue后台项目总结</h1><ol><li>token、路由导航守卫、劫持request添加authorization</li><li>组件分类及命名，eslint检测，熟悉配置文件</li><li>接口请求、跨域、301永久重定向，不允许更换请求（出现服务器请求服务器状况）、前端请求代理、熟悉后端部分</li><li>熟悉element-ui，cascader 部分有个动态属性类，用它改变样式，之前还有bug</li><li>全局css、按需引入等</li><li>性能优化：vue ui使用<blockquote><p>1） babel.config.js 配置插件 发布时不带console<br>2） vue.config.js 自定义配置webpack<br>3） externals 加载外部CDN资源 直接房dist里 index.js cdn引入<br>4） gzip压缩等</p></blockquote></li><li>配置https SSL证书  <a href="https://freessl.org/">https://freessl.org</a>,    pm2管理</li><li>git流程</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>面包屑部分没封装， axios暴漏</li></ol><hr><p><a href="https://gitee.com/lhlsnowing/vue_shop_project">这个用的Gitee，在这里！https://gitee.com/lhlsnowing/vue_shop_project</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统篇</title>
      <link href="/2023/05/24/cao-zuo-xi-tong-pian/"/>
      <url>/2023/05/24/cao-zuo-xi-tong-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统篇"><a href="#操作系统篇" class="headerlink" title="操作系统篇"></a>操作系统篇</h1><h2 id="一、操作系统的概念、功能和目标"><a href="#一、操作系统的概念、功能和目标" class="headerlink" title="一、操作系统的概念、功能和目标"></a>一、操作系统的概念、功能和目标</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14a0b1654b994d8d8a48496b729e0b58~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="二、操作系统的4个特征"><a href="#二、操作系统的4个特征" class="headerlink" title="二、操作系统的4个特征"></a>二、操作系统的4个特征</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3d62f68bff8410e8ba4b316de842851~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="三、操作系统运行机制和体系结构"><a href="#三、操作系统运行机制和体系结构" class="headerlink" title="三、操作系统运行机制和体系结构"></a>三、操作系统运行机制和体系结构</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1370116b9fe0477fac917c5a77b4f608~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp"></p><hr><h2 id="四、进程与线程"><a href="#四、进程与线程" class="headerlink" title="四、进程与线程"></a>四、进程与线程</h2><p><a href="https://juejin.cn/post/6844903801321685000">这篇文章讲的好，看这个！</a></p><hr><p>待更…</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库篇</title>
      <link href="/2023/05/24/shu-ju-ku-pian/"/>
      <url>/2023/05/24/shu-ju-ku-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库基础篇"><a href="#数据库基础篇" class="headerlink" title="数据库基础篇"></a>数据库基础篇</h1><h2 id="一，认识MySQL数据库"><a href="#一，认识MySQL数据库" class="headerlink" title="一，认识MySQL数据库"></a>一，认识MySQL数据库</h2><h3 id="1，什么是数据库"><a href="#1，什么是数据库" class="headerlink" title="1，什么是数据库"></a>1，什么是数据库</h3><p><strong>数据库(Database)就是按照数据结构来组织，存储和管理数据的仓库</strong></p><p>专业的数据库是专门对数据进行创建，访问，管理，搜索等操作的软件，比起我们自己用文件读写的方 式对象数据进行管理更加的方便，快速，安全</p><h3 id="2，作用"><a href="#2，作用" class="headerlink" title="2，作用"></a>2，作用</h3><ul><li>对数据进行持久化的保存</li><li>方便数据的存储和查询，速度快，安全，方便</li><li>可以处理并发访问</li><li>更加安全的权限管理访问机制</li></ul><h3 id="3，常见的数据库"><a href="#3，常见的数据库" class="headerlink" title="3，常见的数据库"></a>3，常见的数据库</h3><p>数据库分两大类，一类是 关系型数据库。另一类叫做 非关系型数据库。</p><ul><li>关系型数据库： MySQL（已被Oracle收购），Oracle，PostgreSQL，SQLserver</li><li>非关系型数据库：Redis内存数据库，MongoDB文档数据库</li></ul><hr><h2 id="二、名词积累："><a href="#二、名词积累：" class="headerlink" title="二、名词积累："></a>二、名词积累：</h2><blockquote><p>数据库（Database）：存放和提供数据的“库房”<br>数据（Data）：数据库中存储的基本对象。<br>数据库管理系统（DBMS）：位于用户与操作系统之间的一层数据管理软件。<br>数据库系统（Database System）：包括数据库、DBMS、应用系统、数据库管理员（DBA）<br>主键（Primary Key）：用于唯一的标识表中的某一条记录的属性或属性的集合。<br>外键（Foreign Key）：用于与另一张表关联，外键为另一张表的主键<br>超键（Super Key）：超键是能唯一区分元组的属性或属性的集合<br>键（候选键）：去掉了超键中多余的属性，仍然能够保证区分不同的元组。<br>模式（Schema）：一个数据库的描述，包括对数据库结构，数据类型，还有约束。<br>实例（Instance / State）：数据库中在某一时刻存储的真实的数据。（Instance是Schema在某一时刻的具体化、实例化）<br>数据操纵语言（DML：Data Manipulation Language）：增删改查<br>数据定义语言（DDL：Data Definition Language）：定义、删除、修改数据库中的对象<br>数据控制语言（DCL：Data Control Language）：用于控制用户对数据库操纵的权限<br>数据模型（Data Model）：现实世界数据特征的抽象，用来定义数据如何组织，数据之间的关系怎样<br>并相容性（Union Compatibility）：两个关系具有并相容性需要保证具有相同的属性个数，以及对于每个属性都有相同的域<br>视图（VIEW）：视图是虚拟的表，并不是物理存储的数据。而是由基本表或其他视图派生的数据。对视图的更新，实际上转换为对实际基表的更新。</p></blockquote><hr><h2 id="三、数据模型（Data-Model）"><a href="#三、数据模型（Data-Model）" class="headerlink" title="三、数据模型（Data Model）"></a>三、数据模型（Data Model）</h2><p>基本概念：现实世界数据特征的抽象，用来定义数据如何组织，数据之间的关系怎样。<br>层次：<br>1.概念模型（Conceptual）：按用户的观点来对数据和信息建模<br>2.逻辑/实现模型（Logical / Implementation）：层次模型，网状模型，关系模型<br>3.物理模型（Physical）：数据在具体DBMS产品中的物理储存方式</p><hr><h2 id="四、数据库系统的三级模式结构："><a href="#四、数据库系统的三级模式结构：" class="headerlink" title="四、数据库系统的三级模式结构："></a>四、数据库系统的三级模式结构：</h2><ol><li><p>内模式（Internal Schema）：（也称存储模式。）数据物理结构和储存方式的描述，是数据在数据库内部的表示方式</p></li><li><p>概念模式（Conceptual Schema）：（也称全局模式。）有时简称“模式”。是对数据库中全体数据的逻辑结构和特征的描述</p></li><li><p>外模式（External Schemas）：（也称子模式或者用户模式。）数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述</p></li></ol><hr><h2 id="五、数据库系统的两级映射以及物理、逻辑独立性："><a href="#五、数据库系统的两级映射以及物理、逻辑独立性：" class="headerlink" title="五、数据库系统的两级映射以及物理、逻辑独立性："></a>五、数据库系统的两级映射以及物理、逻辑独立性：</h2><p><strong>两级映射：</strong></p><ol><li>概念模式/内模式映射</li><li>外模式/概念模式映射</li></ol><p><strong>数据的物理独立性：</strong><br>内模式与概念模式之间的映射提供了数据的物理独立性。当数据的物理结构发生变化时，只需要修改内模式与概念模式之间的映射即可。</p><p><strong>数据的逻辑独立性：</strong><br>概念模式与外模式之间的映射提供了数据的逻辑独立性。当数据的整体逻辑结构发生变化时，只需要修改各个外模式与概念模式之间的映射即可保证应用程序不受影响。</p><hr><h2 id="六、数据的约束条件：完整性约束"><a href="#六、数据的约束条件：完整性约束" class="headerlink" title="六、数据的约束条件：完整性约束"></a>六、数据的约束条件：完整性约束</h2><ol><li><p>域约束：对属性取值范围的约束</p></li><li><p>键约束：每个关系必须要有主键，且每个主键必须不相同</p></li><li><p>非空约束：属性值不能为NULL</p></li><li><p>实体完整性约束：主键值不能为空</p></li><li><p>参照完整性约束：外键可以取NULL值，但若外键为另一关系主键，则不能为NULL。</p></li><li><p>用户定义的完整性</p></li></ol><p>各种数据操作可能违反的完整性约束</p><p>插入操作：域约束、键约束、非空约束、实体完整性约束、参照完整性约束</p><p>删除操作：参照完整性约束</p><p>更新操作：域约束、键约束、非空约束、实体完整性约束、参照完整性约束</p><hr><h2 id="七、SQL语句执行顺序："><a href="#七、SQL语句执行顺序：" class="headerlink" title="七、SQL语句执行顺序："></a>七、SQL语句执行顺序：</h2><ol><li><p>FROM子句组装来自不同数据源的数据</p></li><li><p>WHERE子句基于指定的条件对记录进行筛选</p></li><li><p>GROUP BY子句将数据划分为多个分组</p></li><li><p>使用聚集函数进行计算</p></li><li><p>使用HAVING子句筛选分组</p></li><li><p>计算所有的表达式</p></li><li><p>使用ORDER BY对结果集进行排序</p></li></ol><hr><h2 id="八、关系代数："><a href="#八、关系代数：" class="headerlink" title="八、关系代数："></a>八、关系代数：</h2><p>五种基本运算：并、差、笛卡尔积、选择、投影</p><p>内连接的种类：</p><ol><li><p>等值连接</p></li><li><p>不等连接</p></li><li><p>自然连接</p></li></ol><hr><h2 id="九、数据库应用系统设计的基本过程："><a href="#九、数据库应用系统设计的基本过程：" class="headerlink" title="九、数据库应用系统设计的基本过程："></a>九、数据库应用系统设计的基本过程：</h2><blockquote><p>Phases of Database Design andImplementation Process(数据库设计的基本过程)<br>Phase 1:Requirements Collections and Analysis(需求收集与分析)<br>Phase 2:Conceptual Database Design(概念结构设计)<br>Phase 3:Choice of a DBMS(选择合适的DBMS)<br>Phase 4:Data Model Mapping (Logical Database Design)(逻辑结构设计)<br>Phase 5:Physical Database Design(物理结构设计)<br>Phase 6:Database System Implementation(数据库实施)<br>Phase 7:Database System Operation and Maintenance(数据库运行和维护)</p></blockquote><hr><h2 id="十、数据库范式："><a href="#十、数据库范式：" class="headerlink" title="十、数据库范式："></a>十、数据库范式：</h2><ul><li>1NF（First Normal Form）：当且仅当所有域只包含原子值，即每个分量都是不可再分的数据项，则称实体E满足第一范式</li><li>2NF（Second Normal Form）：当且仅当实体E满足第一范式，且每一个非键属性完全依赖主键时，满足第二范式<br><strong>（消除部分依赖）</strong></li><li>3NF（Third Normal Form）：当且仅当实体E是第二范式（2NF），且E中没有非主属性传递依赖时，满足第三范式<br><strong>（消除传递依赖）</strong></li><li>BCNF条件</li></ul><ol><li>所有非主属性对每一个码都是完全函数依赖。</li><li>所有的主属性对每一个不包含它的码,也是完全函数依赖。</li><li>没有任何属性完全函数依赖于非码的任何一组属性。</li></ol><hr><h2 id="十一、数据库SQL"><a href="#十一、数据库SQL" class="headerlink" title="十一、数据库SQL"></a>十一、数据库SQL</h2><h3 id="1-SQL语言的五个部分"><a href="#1-SQL语言的五个部分" class="headerlink" title="1.SQL语言的五个部分"></a>1.SQL语言的五个部分</h3><blockquote><p>1）数据查询语言（Data Query Language，DQL）：DQL主要用于数据的查询，其基本结构是：<br>​使用SELECT子句，FROM子句和WHERE子句的组合来查询一条或多条数据<br>2）数据操作语言（Data Manipulation Language，DML）：DML主要用于对数据库中的数据进行增加、修改和删除的操作，针对表中的数据。其主要包括：<br>INSERT：增加数据<br>UPDATE：修改数据<br>DELETE：删除数据<br>3）数据定义语言（Data Definition Language，DDL）：DDL主要用针对是数据库对象（表、索引、视图、触发器、存储过程、函数、表空间等）进行创建、修改和删除操作。针对数据库对象其 主要包括<br>CREATE：创建数据库对象<br>ALTER：修改数据库对象<br>DROP：删除数据库对象<br>4）数据控制语言（Data Control Language，DCL）：DCL用来授予或回收访问数据库的权限，其主要包括：<br>GRANT：授予用户某种权限<br>REVOKE：回收授予的某种权限<br>5）事务控制语言（Transaction Control Language，TCL）：TCL用于数据库的事务管理。 其主要包括：<br>START TRANSACTION：开启事务<br>COMMIT：提交事务<br>ROLLBACK：回滚事务<br>SET TRANSACTION：设置事务的属性</p></blockquote><h3 id="2-表的创建与定义"><a href="#2-表的创建与定义" class="headerlink" title="2.表的创建与定义"></a>2.表的创建与定义</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">   <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>   id <span class="token keyword">integer</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> auto_increament<span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>   password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>   Id_P <span class="token keyword">int</span><span class="token punctuation">,</span>   <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>Id_P<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> Persons<span class="token punctuation">(</span>Id_P<span class="token punctuation">)</span>，   usercreatstart <span class="token keyword">datetime</span><span class="token punctuation">,</span>   usercreatfinal <span class="token keyword">datetime</span><span class="token punctuation">,</span>      <span class="token keyword">check</span> <span class="token punctuation">(</span>usercreatfinal<span class="token operator">&gt;</span>usercreatstart<span class="token punctuation">)</span>       <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>primary key 主键</li><li>auto_increament 自动增加</li><li>UNIQUE 唯一，不能重复</li><li>not null 不为空</li><li>FOREIGN KEY 外键 要与 REFERENCES与那个表关联</li><li>check 约束条件</li></ul><h3 id="3-ALTER-table：修改数据库对象"><a href="#3-ALTER-table：修改数据库对象" class="headerlink" title="3.ALTER table：修改数据库对象"></a>3.ALTER table：修改数据库对象</h3><ul><li>alter table r add birthday date:增加新属性</li><li>alter table r modify(id char(10)):修改属性</li></ul><h3 id="4-DROP-table：删除数据库对象"><a href="#4-DROP-table：删除数据库对象" class="headerlink" title="4.DROP table：删除数据库对象"></a>4.DROP table：删除数据库对象</h3><p>drop table r:删除表r</p><ul><li>cascade（级联）全部删除</li><li>restrict(限制) 确保只有不存在相关视图和完整性约束才能删除</li></ul><h3 id="5-删除表字段-alter-table-student-drop-column-name"><a href="#5-删除表字段-alter-table-student-drop-column-name" class="headerlink" title="5.删除表字段 alter table student drop column name"></a>5.删除表字段 alter table student drop column name</h3><h3 id="6-索引"><a href="#6-索引" class="headerlink" title="6.索引"></a>6.索引</h3><blockquote><p>建立索引目的：加快查询速度<br>建立：create （unique|clustered）索引名 ON 表名 (column_name)<br>删除索引：drop index [indexname] on mytable;<br>修改：alter mytable add index [indexname] on(username(length))<br>查询:show index from table_name \g</p></blockquote><h3 id="7-增删改SQL语句"><a href="#7-增删改SQL语句" class="headerlink" title="7.增删改SQL语句"></a>7.增删改SQL语句</h3><ul><li><p>增加数据：<code>INSERT INTO 表名称 （id，name…）VALUES (值1, 值2,….)</code></p></li><li><p>删除数据：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code></p></li><li><p>修改数据：<code>update &lt;表名&gt; set &lt;列名=更新值&gt; [where &lt;更新条件&gt;]</code></p></li></ul><h3 id="8-SQL语句查询"><a href="#8-SQL语句查询" class="headerlink" title="8.SQL语句查询"></a>8.SQL语句查询</h3><ul><li>sql语句：<code>select （all|distinct）&lt;列名&gt; from &lt;表名&gt; [where &lt;查询条件表达试&gt;] group by&lt;列名&gt;(having 条件 )[order by &lt;排序的列名&gt;[asc或desc]] limit[n,m]</code><blockquote><p>默认按照升序(asc)对记录进行排序，distinct 去除重复值<br>limit[n,m]表示分页，其中limit[0,5]表示1-5的5条数据，<code>limit[(n-1)*pagesize,pagesize]</code>,页面总数=总数据/页面大小</p></blockquote></li></ul><h3 id="9-操作符-描述"><a href="#9-操作符-描述" class="headerlink" title="9.操作符 描述"></a>9.操作符 描述</h3><ul><li>= 等于(IN 可以是一个结果集,但结果集只有一个值时“=”等价于“IN” )</li><li>&lt;&gt; 不等于</li><li><strong>BETWEEN</strong> 在某个范围内 如:select * from emp where sal between 1000 and 3000;</li><li><strong>LIKE</strong> 搜索某种模式为模糊查询(百分号 %：任意字符,下划线 _ :单个字符) 如：select * from emp where - ename like ‘%o%’;– 查询忽略大小写</li></ul><h3 id="10-聚集函数"><a href="#10-聚集函数" class="headerlink" title="10.聚集函数"></a>10.聚集函数</h3><blockquote><p>平均值：avg<br>最小值：min<br>最大值：max<br>总和：sum<br>计数：count<br>group by 和 having<br>聚集函数前面必须用group by 中having<br>任何没有出现在group by字句中的属性，如果出现在select中它只能出现在聚集函数内部，如根据学院分不能将学生姓名输出没在select中</p></blockquote><p>例题：编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> s1<span class="token punctuation">.</span>Score<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span> Rank<span class="token keyword">from</span>Scores s1<span class="token punctuation">,</span>Scores s2<span class="token keyword">where</span>s1<span class="token punctuation">.</span>score<span class="token operator">&lt;=</span>s2<span class="token punctuation">.</span>score<span class="token keyword">group</span> <span class="token keyword">by</span> s1<span class="token punctuation">.</span>Id<span class="token keyword">order</span> <span class="token keyword">by</span> Rank<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exists</strong><br>exists表示存在量词，带有exists谓词的子查询，该类子查询的目标列为</p><p><strong>EXISTS语句：</strong>执行student.length次先查询外表，<strong>而IN 语句：</strong>只执行一次查询内表。如果子查询得出的结果集记录较少，主查询中的表较大且又有索引时应该用in, 反之如果外层的主查询记录较少，子查询中的表大，又有索引时使用exists。注意exists后要是select *<br><del>记忆中是嵌套时候用的多</del></p><hr><p>事务等待更…</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络篇</title>
      <link href="/2023/05/24/ji-suan-ji-wang-luo-pian/"/>
      <url>/2023/05/24/ji-suan-ji-wang-luo-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络篇"><a href="#计算机网络篇" class="headerlink" title="计算机网络篇"></a>计算机网络篇</h1><h2 id="1、GET和POST的请求的区别"><a href="#1、GET和POST的请求的区别" class="headerlink" title="1、GET和POST的请求的区别"></a>1、GET和POST的请求的区别</h2><p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</p><h3 id="发送的报文格式："><a href="#发送的报文格式：" class="headerlink" title="发送的报文格式："></a>发送的报文格式：</h3><p>Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</p><h3 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h3><p>Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</p><h3 id="请求长度："><a href="#请求长度：" class="headerlink" title="请求长度："></a>请求长度：</h3><p>浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</p><h3 id="参数类型："><a href="#参数类型：" class="headerlink" title="参数类型："></a>参数类型：</h3><p>post 的参数传递支持更多的数据类型。</p><hr><h2 id="2、POST和PUT请求的区别"><a href="#2、POST和PUT请求的区别" class="headerlink" title="2、POST和PUT请求的区别"></a>2、POST和PUT请求的区别</h2><p>  PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。<strong>（可以理解为时更新数据）</strong><br>  POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。<strong>（可以理解为是创建数据）</strong></p><hr><h2 id="3、常见的HTTP请求头和响应头"><a href="#3、常见的HTTP请求头和响应头" class="headerlink" title="3、常见的HTTP请求头和响应头"></a>3、常见的HTTP请求头和响应头</h2><h3 id="HTTP-Request-Header-常见的请求头："><a href="#HTTP-Request-Header-常见的请求头：" class="headerlink" title="HTTP Request Header 常见的请求头："></a>HTTP Request Header 常见的请求头：</h3><ul><li>Accept:浏览器能够处理的内容类型</li><li>Accept-Charset:浏览器能够显示的字符集</li><li>Accept-Encoding：浏览器能够处理的压缩编码</li><li>Accept-Language：浏览器当前设置的语言</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cookie：当前页面设置的任何Cookie</li><li>Host：发出请求的页面所在的域</li><li>Referer：发出请求的页面的URL</li><li>User-Agent：浏览器的用户代理字符串</li></ul><h3 id="HTTP-Responses-Header-常见的响应头："><a href="#HTTP-Responses-Header-常见的响应头：" class="headerlink" title="HTTP Responses Header 常见的响应头："></a>HTTP Responses Header 常见的响应头：</h3><ul><li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li><li>server:服务器名称</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cache-Control：控制HTTP缓存</li><li>content-type:表示后面的文档属于什么MIME类型</li></ul><h4 id="常见的-Content-Type-属性值有以下四种："><a href="#常见的-Content-Type-属性值有以下四种：" class="headerlink" title="常见的 Content-Type 属性值有以下四种："></a>常见的 Content-Type 属性值有以下四种：</h4><p>（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。</p><p>（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。</p><p>（3）application/json：服务器消息主体是序列化后的 JSON 字符串。</p><p>（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p><hr><h2 id="4、常见的HTTP请求方法"><a href="#4、常见的HTTP请求方法" class="headerlink" title="4、常见的HTTP请求方法"></a>4、常见的HTTP请求方法</h2><pre class="line-numbers language-none"><code class="language-none">GET: 向服务器获取数据；POST：将实体提交到指定的资源，通常会造成服务器资源的修改；PUT：上传文件，更新数据；DELETE：删除服务器上的对象；HEAD：获取报文首部，与GET相比，不返回报文主体部分；OPTIONS：询问支持的请求方法，用来跨域请求；CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5、HTTP-1-1-和-HTTP-2-0-的区别"><a href="#5、HTTP-1-1-和-HTTP-2-0-的区别" class="headerlink" title="5、HTTP 1.1 和 HTTP 2.0 的区别"></a>5、HTTP 1.1 和 HTTP 2.0 的区别</h2><ul><li><strong>二进制协议：</strong> HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li><li><strong>多路复用：</strong> HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，<strong>客户端和服务器都可以同时发送多个请求或回应</strong>，而且不用按照顺序一一发送，这样就避免了”队头堵塞”【1】的问题。</li><li><strong>数据流：</strong> HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li><li><strong>头信息压缩：</strong> HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li><li><strong>服务器推送：</strong> HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li></ul><hr><h2 id="6、HTTP和HTTPS协议的区别"><a href="#6、HTTP和HTTPS协议的区别" class="headerlink" title="6、HTTP和HTTPS协议的区别"></a>6、HTTP和HTTPS协议的区别</h2><ul><li>HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；</li><li>HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；</li><li>使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；</li><li>HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。</li></ul><hr><h2 id="7、浏览器输入URL后，会发生什么？"><a href="#7、浏览器输入URL后，会发生什么？" class="headerlink" title="7、浏览器输入URL后，会发生什么？"></a>7、浏览器输入URL后，会发生什么？</h2><blockquote><p><strong>（1）解析URL：</strong> 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。<br><strong>（2）缓存判断：</strong> 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。<br><strong>（3）DNS解析：</strong> 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。<br><strong>（4）获取MAC地址：</strong> 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。<br><strong>（5）TCP三次握手：</strong> 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。<br><strong>（6）HTTPS握手：</strong> 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。<br><strong>（7）返回数据：</strong> 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。<br><strong>（8）页面渲染：</strong> 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p></blockquote><hr><h2 id="8、与缓存相关的HTTP请求头有哪些"><a href="#8、与缓存相关的HTTP请求头有哪些" class="headerlink" title="8、与缓存相关的HTTP请求头有哪些"></a>8、与缓存相关的HTTP请求头有哪些</h2><h4 id="强缓存："><a href="#强缓存：" class="headerlink" title="强缓存："></a>强缓存：</h4><ul><li>Expires</li><li>Cache-Control</li></ul><h4 id="协商缓存："><a href="#协商缓存：" class="headerlink" title="协商缓存："></a>协商缓存：</h4><ul><li>Etag、If-None-Match</li><li>Last-Modified、If-Modified-Since</li></ul><hr><h2 id="9、什么是HTTPS协议？"><a href="#9、什么是HTTPS协议？" class="headerlink" title="9、什么是HTTPS协议？"></a>9、什么是HTTPS协议？</h2><p><strong>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）</strong>是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/10885a9d4d574d7caf3fee1416f623ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"><br>HTTP协议采用明文<strong>传输信息</strong>，存在信息窃听、信息篡改和信息劫持的风险，而<strong>协议TLS/SSL具有身份验证、信息加密和完整性校验</strong>的功能，可以避免此类问题发生。<br>安全层的主要职责就是对<strong>发起的HTTP请求的数据进行加密操作</strong> 和 <strong>对接收到的HTTP的内容进行解密操作</strong>。</p><hr><h2 id="10、TLS-x2F-SSL的工作原理"><a href="#10、TLS-x2F-SSL的工作原理" class="headerlink" title="10、TLS/SSL的工作原理"></a>10、TLS/SSL的工作原理</h2><p>TLS/SSL全称安全传输层协议（Transport Layer Security）, 是议<strong>介于TCP和HTTP之间的一层安全协</strong>，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</p><p>TLS/SSL的功能实现主要依赖三类基本算法：<strong>散列函数hash、对称加密、非对称加密</strong>。这三类算法的作用如下：</p><ul><li>基于散列函数验证信息的完整性</li><li>对称加密算法采用协商的秘钥对数据加密</li><li>非对称加密实现身份认证和秘钥协商<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5696ee8ccb0d44b08b812a7c964695b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></li></ul><hr><h2 id="11、HTTP状态码"><a href="#11、HTTP状态码" class="headerlink" title="11、HTTP状态码"></a>11、HTTP状态码</h2><table><thead><tr><th>类别</th><th>原因</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>Informational(信息性状态码)</td><td>接受的请求正在处理</td></tr><tr><td>2xx</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作一完成请求</td></tr><tr><td>4xx</td><td>Client Error (客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h3><p><strong>永久重定向。</strong> 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。<br><del>做项目血的教训 呜呜</del></p><hr><h2 id="12、DNS-协议是什么"><a href="#12、DNS-协议是什么" class="headerlink" title="12、DNS 协议是什么"></a>12、DNS 协议是什么</h2><p><strong>概念：</strong> DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p><p><strong>作用：</strong> 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。</p><hr><h2 id="13、DNS同时使用TCP和UDP协议？"><a href="#13、DNS同时使用TCP和UDP协议？" class="headerlink" title="13、DNS同时使用TCP和UDP协议？"></a>13、DNS同时使用TCP和UDP协议？</h2><p><strong>DNS占用53号端口，同时使用TCP和UDP协议</strong></p><h4 id="（1）在区域传输的时候使用TCP协议"><a href="#（1）在区域传输的时候使用TCP协议" class="headerlink" title="（1）在区域传输的时候使用TCP协议"></a>（1）在区域传输的时候使用TCP协议</h4><p>辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。<br>TCP是一种可靠连接，保证了数据的准确性。</p><h4 id="（2）在域名解析的时候使用UDP协议"><a href="#（2）在域名解析的时候使用UDP协议" class="headerlink" title="（2）在域名解析的时候使用UDP协议"></a>（2）在域名解析的时候使用UDP协议</h4><p>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</p><hr><h2 id="14、DNS完整的查询过程"><a href="#14、DNS完整的查询过程" class="headerlink" title="14、DNS完整的查询过程"></a>14、DNS完整的查询过程</h2><ul><li>首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</li><li>将请求发送给<strong>本地DNS服务器</strong>，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li><li>本地DNS服务器向<strong>根域名服务器</strong>发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li><li>本地DNS服务器向<strong>顶级域名服务器</strong>发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li><li>本地DNS服务器向<strong>权威域名服务器</strong>发送请求，域名服务器返回对应的结果</li><li>本地DNS服务器将返回结果保存在缓存中，便于下次使用</li><li>本地DNS服务器将返回结果返回给浏览器</li></ul><h3 id="DNS解析是一个包含迭代查询和递归查询的过程"><a href="#DNS解析是一个包含迭代查询和递归查询的过程" class="headerlink" title="DNS解析是一个包含迭代查询和递归查询的过程"></a>DNS解析是一个包含迭代查询和递归查询的过程</h3><p><strong>递归查询</strong>指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。<br><strong>迭代查询</strong>指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。<br><u>一般我们向本地 DNS 服务器发送请求的方式就是递归查询~</u></p><h5 id="DNS-服务器中以资源记录的形式存储信息，每一个-DNS-响应报文一般包含多条资源记录。一条资源记录的具体的格式为："><a href="#DNS-服务器中以资源记录的形式存储信息，每一个-DNS-响应报文一般包含多条资源记录。一条资源记录的具体的格式为：" class="headerlink" title="DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为："></a>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为：</h5><pre class="line-numbers language-http" data-language="http"><code class="language-http">（Name，Value，Type，TTL）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间</strong><br>常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p><ul><li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li><li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li><li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li><li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li></ul><hr><h2 id="15、网络模型"><a href="#15、网络模型" class="headerlink" title="15、网络模型"></a>15、网络模型</h2><h3 id="1）-OSI七层模型"><a href="#1）-OSI七层模型" class="headerlink" title="1）. OSI七层模型"></a>1）. OSI七层模型</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1e8e168d9f249788c74c5b50e0528e2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></p><h4 id="（1）应用层"><a href="#（1）应用层" class="headerlink" title="（1）应用层"></a>（1）应用层</h4><p>OSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：<strong>HTTP，HTTPS，FTP，POP3、SMTP</strong>等。</p><h4 id="（2）表示层"><a href="#（2）表示层" class="headerlink" title="（2）表示层"></a>（2）表示层</h4><p>表示层<strong>提供各种用于应用层数据的编码和转换功能</strong>,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p><h4 id="（3）会话层"><a href="#（3）会话层" class="headerlink" title="（3）会话层"></a>（3）会话层</h4><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><h4 id="（4）传输层"><a href="#（4）传输层" class="headerlink" title="（4）传输层"></a>（4）传输层</h4><p>传输层<strong>建立了主机端到端的链接</strong>，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，<strong>TCP UDP就是在这一层</strong>。端口号既是这里的“端”。</p><h4 id="（5）网络层"><a href="#（5）网络层" class="headerlink" title="（5）网络层"></a>（5）网络层</h4><p>本层<strong>通过IP寻址来建立两个节点之间的连接</strong>，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。</p><h4 id="（6）数据链路层"><a href="#（6）数据链路层" class="headerlink" title="（6）数据链路层"></a>（6）数据链路层</h4><p>将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。 网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p><h4 id="（7）物理层"><a href="#（7）物理层" class="headerlink" title="（7）物理层"></a>（7）物理层</h4><p>实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。<br><strong>OSI七层模型通信特点：对等通信</strong> 对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p><h3 id="2）-TCP-x2F-IP五层协议"><a href="#2）-TCP-x2F-IP五层协议" class="headerlink" title="2）.TCP/IP五层协议"></a>2）.TCP/IP五层协议</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48cd77d608714c298366f4dac77f33fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></p><ul><li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。</li><li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li><li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li><li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li><li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li><li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li><li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2db9226a6cdb4ee48daecd9bc4181b64~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp"></li></ul><hr><h2 id="16、TCP与UDP"><a href="#16、TCP与UDP" class="headerlink" title="16、TCP与UDP"></a>16、TCP与UDP</h2><p>TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：</p><h3 id="（1）UDP"><a href="#（1）UDP" class="headerlink" title="（1）UDP"></a>（1）UDP</h3><p>UDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p><p><strong>它的特点如下：</strong></p><blockquote><p>1）面向无连接<br>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br>具体来说就是：<br>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了<br>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作<br>2）有单播，多播，广播的功能<br>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。<br>3）面向报文<br>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文<br>4）不可靠性<br>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。<br>5）头部开销小，传输数据报文时是很高效的。</p></blockquote><h3 id="（2）TCP"><a href="#（2）TCP" class="headerlink" title="（2）TCP"></a>（2）TCP</h3><p>TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p><p><strong>它有以下几个特点：</strong></p><blockquote><p>1）面向连接<br>面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br>2）仅支持单播传输<br>每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br>3）面向字节流<br>TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br>4）可靠传输<br>对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br>5）提供拥塞控制<br>当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。<br>6）提供全双工通信<br>TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</p></blockquote><hr><h2 id="17、WebSocket"><a href="#17、WebSocket" class="headerlink" title="17、WebSocket"></a>17、WebSocket</h2><p>WebSocket是HTML5提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。<br>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：<strong>服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</strong></p><h3 id="WebSocket原理："><a href="#WebSocket原理：" class="headerlink" title="WebSocket原理："></a>WebSocket原理：</h3><p>客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。​</p><h3 id="WebSocket-特点的如下："><a href="#WebSocket-特点的如下：" class="headerlink" title="WebSocket 特点的如下："></a>WebSocket 特点的如下：</h3><ul><li>支持双向通信，实时性更强</li><li>可以发送文本，也可以发送二进制数据‘’</li><li>建立在TCP协议之上，服务端的实现比较容易</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>没有同源限制，客户端可以与任意服务器通信</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，- 能通过各种 HTTP 代理服务器。</li></ul><h3 id="Websocket的使用方法如下："><a href="#Websocket的使用方法如下：" class="headerlink" title="Websocket的使用方法如下："></a>Websocket的使用方法如下：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在index.html中直接写WebSocket，设置服务端的端口号为 9999</span><span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:9999'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在客户端与服务端建立连接后触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection open."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在服务端给客户端发来消息的时候触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 打印的是MessageEvent对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印的是收到的消息</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在客户端与服务端建立关闭后触发</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？"><a href="#即时通讯的实现：短轮询、长轮询、SSE-和-WebSocket-间的区别？" class="headerlink" title="即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？"></a>即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h3><p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p><blockquote><p><strong>短轮询的基本思路：</strong> 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。<br><strong>长轮询的基本思路：</strong> 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。<br><strong>SSE 的基本思想：</strong> 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。<br><strong>WebSocket</strong>是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p></blockquote><p>上面的四个通信协议，前三个都是基于HTTP协议的。</p><p>对于这四种即使通信协议，从性能的角度来看： <strong>WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</strong> 但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了： 短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络请求区别 </tag>
            
            <tag> HTTP和HTTPS </tag>
            
            <tag> HTTP状态码 </tag>
            
            <tag> TCP和UDP </tag>
            
            <tag> DNS </tag>
            
            <tag> 网络传输层 </tag>
            
            <tag> Websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法分析</title>
      <link href="/2023/05/23/yu-fa-fen-xi/"/>
      <url>/2023/05/23/yu-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的语法分析-–nefu编译原理-实验2"><a href="#一个简单的语法分析-–nefu编译原理-实验2" class="headerlink" title="一个简单的语法分析 –nefu编译原理-实验2"></a>一个简单的语法分析 –nefu编译原理-实验2</h2><h5 id="代码块中含有文法样例"><a href="#代码块中含有文法样例" class="headerlink" title="代码块中含有文法样例"></a>代码块中含有文法样例</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_RULES</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SYMBOLS</span> <span class="token expression"><span class="token number">10</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TABLE_SIZE</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token comment">//文法  选自课上ppt </span><span class="token comment">//E -&gt; TE'</span><span class="token comment">//E' -&gt; +TE' | ε</span><span class="token comment">//T -&gt; FT'</span><span class="token comment">//T' -&gt; *FT' | ε</span><span class="token comment">//F -&gt; (E) | id</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span> NON_TERMINAL<span class="token punctuation">,</span> TERMINAL <span class="token punctuation">}</span> SymbolType<span class="token punctuation">;</span><span class="token comment">// 结构体 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    SymbolType type<span class="token punctuation">;</span>    <span class="token keyword">char</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span> Symbol<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Symbol left<span class="token punctuation">;</span>    Symbol right<span class="token punctuation">[</span>MAX_SYMBOLS<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right_length<span class="token punctuation">;</span><span class="token punctuation">}</span> Rule<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Rule rules<span class="token punctuation">[</span>MAX_RULES<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num_rules<span class="token punctuation">;</span><span class="token punctuation">}</span> Grammar<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> Rule <span class="token operator">*</span>table<span class="token punctuation">[</span>TABLE_SIZE<span class="token punctuation">]</span><span class="token punctuation">[</span>TABLE_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ParsingTable<span class="token punctuation">;</span><span class="token comment">// 函数声明</span><span class="token keyword">void</span> <span class="token function">parse_input</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">,</span> <span class="token keyword">const</span> ParsingTable <span class="token operator">*</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>Grammar <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ParsingTable <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Grammar grammar <span class="token operator">=</span> <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ParsingTable table <span class="token operator">=</span> <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input <span class="token operator">=</span> <span class="token string">"id+id*id$"</span><span class="token punctuation">;</span><span class="token comment">//1、 (id+id)*id   2、 id+id*id</span>    <span class="token function">parse_input</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token operator">&amp;</span>grammar<span class="token punctuation">,</span> <span class="token operator">&amp;</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Grammar <span class="token function">create_grammar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Grammar grammar<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>num_rules <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// E -&gt; TE'</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// E' -&gt; +TE' | ε</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'+'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// T -&gt; FT'</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'T'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// T' -&gt; *FT' | ε</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'Y'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// F -&gt; (E) | id</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>type <span class="token operator">=</span> NON_TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token char">'d'</span><span class="token punctuation">;</span>    grammar<span class="token punctuation">.</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right_length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> grammar<span class="token punctuation">;</span><span class="token punctuation">}</span>ParsingTable <span class="token function">create_parsing_table</span><span class="token punctuation">(</span><span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ParsingTable table<span class="token punctuation">;</span>    <span class="token comment">// 初始化预测分析表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TABLE_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> TABLE_SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            table<span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 填充预测分析表</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'E'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'E'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'+'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">')'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'X'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'$'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'T'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'T'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'+'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'*'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">')'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'$'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'F'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'('</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token char">'F'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">'i'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>grammar<span class="token operator">-&gt;</span>rules<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_input</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> <span class="token keyword">const</span> Grammar <span class="token operator">*</span>grammar<span class="token punctuation">,</span> <span class="token keyword">const</span> ParsingTable <span class="token operator">*</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化分析栈</span>    <span class="token keyword">char</span> stack<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>    <span class="token comment">// 对输入字符串进行语法分析</span>    <span class="token keyword">int</span> input_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> lookahead <span class="token operator">=</span> input<span class="token punctuation">[</span>input_pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> stack_top <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_top <span class="token operator">==</span> lookahead<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lookahead <span class="token operator">==</span> <span class="token char">'$'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accepted\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lookahead <span class="token operator">=</span> input<span class="token punctuation">[</span>input_pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token keyword">const</span> Rule <span class="token operator">*</span>rule <span class="token operator">=</span> table<span class="token operator">-&gt;</span>table<span class="token punctuation">[</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">[</span>lookahead<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rule <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Rejected\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> rule<span class="token operator">-&gt;</span>right_length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> rule<span class="token operator">-&gt;</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown使用</title>
      <link href="/2023/05/23/markdown-shi-yong/"/>
      <url>/2023/05/23/markdown-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown的基本语法"><a href="#MarkDown的基本语法" class="headerlink" title="MarkDown的基本语法"></a>MarkDown的基本语法</h1><h2 id="1、三种方式"><a href="#1、三种方式" class="headerlink" title="1、三种方式"></a>1、三种方式</h2><p>1、内嵌<br>qq<code>console.log()</code><br>2、`用它代码块，指定类型高亮</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、tab 四个空格</p><h2 id="2、标题大小"><a href="#2、标题大小" class="headerlink" title="2、标题大小"></a>2、标题大小</h2><p>`#</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>`##</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>`###</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>`####</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>`#####</p><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>`######</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加粗</span><span class="token operator">*</span><span class="token operator">*</span>加粗<span class="token operator">*</span><span class="token operator">*</span><span class="token comment">// 代码高亮</span><span class="token operator">==</span>代码高亮<span class="token operator">==</span><span class="token comment">// 删除线</span><span class="token operator">~</span><span class="token operator">~</span>删除线<span class="token operator">~</span><span class="token operator">~</span><span class="token comment">// 斜体</span><span class="token operator">*</span>斜体内容<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用语法</span><span class="token operator">&gt;</span>作者：coderlhl<span class="token operator">&gt;&gt;</span>作者：coderlhl<span class="token operator">&gt;&gt;&gt;</span>作者：coderlhl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>作者：coderlhl</p><blockquote><p>作者：coderlhl</p><blockquote><p>作者：coderlhl</p></blockquote></blockquote></blockquote><h2 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//分割线两种</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="6、图片插入"><a href="#6、图片插入" class="headerlink" title="6、图片插入"></a>6、图片插入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在线图片、本地图片</span><span class="token operator">!</span><span class="token punctuation">[</span>我的照片<span class="token punctuation">]</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img2.baidu.com/it/u=3411579598,3704843474&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=848&amp;h=500" alt="插入图片"></p><h2 id="7、超链接"><a href="#7、超链接" class="headerlink" title="7、超链接"></a>7、超链接</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//超链接语法</span><span class="token punctuation">[</span>我的github<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token class-name">LHLsnowing</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/LHLsnowing">我的github</a></p><h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无序列表</span><span class="token operator">-</span> 目录<span class="token number">1</span><span class="token operator">-</span> 目录<span class="token number">2</span><span class="token operator">-</span> 目录<span class="token number">3</span><span class="token comment">//1+. +名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>无序列表</li><li>1</li><li>2</li></ul><ol><li>首页</li><li>分类</li></ol><h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">|</span> 成绩 <span class="token operator">|</span> 数学 <span class="token operator">|</span> 语文 <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span> <span class="token operator">|</span> <span class="token operator">:</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">:</span>  <span class="token operator">|</span><span class="token operator">|</span>  左对齐   <span class="token operator">|</span>  右对齐<span class="token generics"><span class="token punctuation">&lt;</span>br<span class="token punctuation">&gt;</span></span>换行   <span class="token operator">|</span>  居中 <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>成绩</th><th>数学</th><th>语文</th></tr></thead><tbody><tr><td>22</td><td>100<br>换行</td><td>32</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词法分析</title>
      <link href="/2023/05/23/ci-fa-fen-xi/"/>
      <url>/2023/05/23/ci-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一个简单的词法分析-–nefu编译原理-实验1"><a href="#一个简单的词法分析-–nefu编译原理-实验1" class="headerlink" title="一个简单的词法分析 –nefu编译原理-实验1"></a>一个简单的词法分析 –nefu编译原理-实验1</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LENGTH</span> <span class="token expression"><span class="token number">300</span></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 关键字列表 */</span>    <span class="token keyword">char</span> keywords<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"char"</span><span class="token punctuation">,</span> <span class="token string">"const"</span><span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">,</span>                                      <span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token string">"else"</span><span class="token punctuation">,</span> <span class="token string">"enum"</span><span class="token punctuation">,</span> <span class="token string">"extern"</span><span class="token punctuation">,</span> <span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"goto"</span><span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">,</span>                                      <span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token string">"register"</span><span class="token punctuation">,</span> <span class="token string">"return"</span><span class="token punctuation">,</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"signed"</span><span class="token punctuation">,</span> <span class="token string">"sizeof"</span><span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">,</span>                                      <span class="token string">"struct"</span><span class="token punctuation">,</span> <span class="token string">"switch"</span><span class="token punctuation">,</span> <span class="token string">"typedef"</span><span class="token punctuation">,</span><span class="token string">"unsigned"</span><span class="token punctuation">,</span> <span class="token string">"void"</span><span class="token punctuation">,</span> <span class="token string">"volatile"</span><span class="token punctuation">,</span> <span class="token string">"while"</span><span class="token punctuation">,</span><span class="token string">"then"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> input<span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存储用户输入</span>    <span class="token keyword">char</span> lexemes<span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span><span class="token punctuation">[</span>MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 存储识别出来的词法单元</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从标准输入中读取用户输入</span>    input<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// 将换行符替换成字符串结束符</span>    <span class="token comment">/* 逐个字符进行识别和匹配 */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* 如果是标识符或关键字 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isalnum</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 跳过已经识别的字符，下一次从 j 处继续</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是数字 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 跳过已经识别的字符，下一次从 j 处继续</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是字符串字面量 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\"'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\"'</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是字符字面量 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是注释 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'*'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>                lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是运算符 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'='</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&gt;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&lt;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&amp;'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'|'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'!'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'%'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'^'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'~'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'?'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 如果是分隔符 */</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'{'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'}'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">';'</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">','</span> <span class="token operator">||</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            lexemes<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 输出识别出来的词法单元 */</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"识别出来的词法单元有：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* 过滤掉空格 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">/* 判断是否是关键字 */</span>            m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>keywords<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：关键字\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：标识符\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：常数\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s：分隔符\n"</span><span class="token punctuation">,</span> lexemes<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                m<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词法分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
